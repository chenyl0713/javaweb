<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\F盘其他资料\jmeter_exe\apache-jmeter-2.12\lib\ext\jce.jar,D:\E盘\工作资料\数据平台重构性能测试\接口测试相关资料,D:\F盘其他资料\jmeter_exe\apache-jmeter-2.12\lib\ext\bcprov-jdk16-1.46.jar</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局自定义变量A【测试数据相关】--【测试环境】专用配置" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="http_type" elementType="Argument">
            <stringProp name="Argument.name">http_type</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.desc">协议类型，可选http或https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">10.10.**.**</stringProp>
            <stringProp name="Argument.desc">访问地址或域名（后台：10.10.202.143:30334）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">端口</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_prefix" elementType="Argument">
            <stringProp name="Argument.name">path_prefix</stringProp>
            <stringProp name="Argument.value">/j-api/paas</stringProp>
            <stringProp name="Argument.desc">控制台接口前缀（用前端ip需要使用：/j-api/paas；后端ip保持为空）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ip_port" elementType="Argument">
            <stringProp name="Argument.name">ip_port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">域名:端口（10.10.202.143:30333，galaxy-web-server.galaxy.test）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cookie" elementType="Argument">
            <stringProp name="Argument.name">cookie</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">默认的一个cookie</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="check_list" elementType="Argument">
            <stringProp name="Argument.name">check_list</stringProp>
            <stringProp name="Argument.value">①与数据库/pc系统上对应页面进行核对检查，接口实现功能是否正确没有造成其他影响。 ②检查返回字段名称和接口文档中响应参数列表对应一致 ③检查返回接口返回数据是否正确</stringProp>
            <stringProp name="Argument.desc">手工检查内容列表</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="file_url" elementType="Argument">
            <stringProp name="Argument.name">file_url</stringProp>
            <stringProp name="Argument.value">C:\user-1000-前500.csv</stringProp>
            <stringProp name="Argument.desc">登录用户数据文件【未用】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="my_DB" elementType="Argument">
            <stringProp name="Argument.name">my_DB</stringProp>
            <stringProp name="Argument.value">mysql_test</stringProp>
            <stringProp name="Argument.desc">选择使用哪个数据库</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.desc">表示目前在哪个环境上执行测试【值：test、production】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--团队和用户数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupId" elementType="Argument">
            <stringProp name="Argument.name">USER_groupId</stringProp>
            <stringProp name="Argument.value">216</stringProp>
            <stringProp name="Argument.desc">用于自动化脚本进行测试的团队</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupname" elementType="Argument">
            <stringProp name="Argument.name">USER_groupname</stringProp>
            <stringProp name="Argument.value">金刚测试2.x自动化回归专用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupTag" elementType="Argument">
            <stringProp name="Argument.name">USER_groupTag</stringProp>
            <stringProp name="Argument.value">jingangnewone</stringProp>
            <stringProp name="Argument.desc">USER_groupId对应的groupTag</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupId_jingang" elementType="Argument">
            <stringProp name="Argument.name">USER_groupId_jingang</stringProp>
            <stringProp name="Argument.value">226</stringProp>
            <stringProp name="Argument.desc">拥有一些准备数据的测试团队2.x</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupname_jingang" elementType="Argument">
            <stringProp name="Argument.name">USER_groupname_jingang</stringProp>
            <stringProp name="Argument.value">金刚测试2.x手工回归专用（其他人勿动）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupTag_jingang" elementType="Argument">
            <stringProp name="Argument.name">USER_groupTag_jingang</stringProp>
            <stringProp name="Argument.value">jinganghuiguiyi</stringProp>
            <stringProp name="Argument.desc">USER_groupId_jingang对应的groupTag</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupId_transform" elementType="Argument">
            <stringProp name="Argument.name">USER_groupId_transform</stringProp>
            <stringProp name="Argument.value">14</stringProp>
            <stringProp name="Argument.desc">从1.x转换为2.x的团队（2019.01.07迁移的）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupname_transform" elementType="Argument">
            <stringProp name="Argument.name">USER_groupname_transform</stringProp>
            <stringProp name="Argument.value">测试团队</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_groupTag_transform" elementType="Argument">
            <stringProp name="Argument.name">USER_groupTag_transform</stringProp>
            <stringProp name="Argument.value">kg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--团队和用户数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_id_admin" elementType="Argument">
            <stringProp name="Argument.name">USER_id_admin</stringProp>
            <stringProp name="Argument.value">2322</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_name_admin" elementType="Argument">
            <stringProp name="Argument.name">USER_name_admin</stringProp>
            <stringProp name="Argument.value">jingang</stringProp>
            <stringProp name="Argument.desc">平台管理员账号【属于团队USER_groupId_jingang】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_pass_admin" elementType="Argument">
            <stringProp name="Argument.name">USER_pass_admin</stringProp>
            <stringProp name="Argument.value">123qwe</stringProp>
            <stringProp name="Argument.desc">密码</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_name" elementType="Argument">
            <stringProp name="Argument.name">USER_name</stringProp>
            <stringProp name="Argument.value">jingangt</stringProp>
            <stringProp name="Argument.desc">团队管理员角色账号1【只属于团队USER_groupId；有未结束的工单】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_pass" elementType="Argument">
            <stringProp name="Argument.name">USER_pass</stringProp>
            <stringProp name="Argument.value">123qwe</stringProp>
            <stringProp name="Argument.desc">密码</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_name_jingang" elementType="Argument">
            <stringProp name="Argument.name">USER_name_jingang</stringProp>
            <stringProp name="Argument.value">jingangt2</stringProp>
            <stringProp name="Argument.desc">团队管理员角色账号2【只属于团队USER_groupId_jingang】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_pass_jingang" elementType="Argument">
            <stringProp name="Argument.name">USER_pass_jingang</stringProp>
            <stringProp name="Argument.value">123qwe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_name_pt" elementType="Argument">
            <stringProp name="Argument.name">USER_name_pt</stringProp>
            <stringProp name="Argument.value">jingang-pt</stringProp>
            <stringProp name="Argument.desc">普通用户角色的用户【属于团队USER_groupId】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_pass_pt" elementType="Argument">
            <stringProp name="Argument.name">USER_pass_pt</stringProp>
            <stringProp name="Argument.value">123qwe</stringProp>
            <stringProp name="Argument.desc">密码</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_appId_transform" elementType="Argument">
            <stringProp name="Argument.name">Def_appId_transform</stringProp>
            <stringProp name="Argument.value">6159</stringProp>
            <stringProp name="Argument.desc">团队{USER_groupId_transform}拥有运行实例的应用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_appName_transform" elementType="Argument">
            <stringProp name="Argument.name">Def_appName_transform</stringProp>
            <stringProp name="Argument.value">jingang-demo-jar-迁移团队新增190107</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--lob/scrum测试数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scrumId_def" elementType="Argument">
            <stringProp name="Argument.name">scrumId_def</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.desc">指定所属ScrumTean；50-测试专用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lobId_def" elementType="Argument">
            <stringProp name="Argument.name">lobId_def</stringProp>
            <stringProp name="Argument.value">21</stringProp>
            <stringProp name="Argument.desc">指定所属LOB；21-测试专用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--拥有运行实例的测试数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_appId" elementType="Argument">
            <stringProp name="Argument.name">Def_appId</stringProp>
            <stringProp name="Argument.value">5362</stringProp>
            <stringProp name="Argument.desc">预准备的测试数据：应用的appId【①开发环境有一个实例启动②测试环境默认版本有多个实例启动】--手工测试团队下</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_appName" elementType="Argument">
            <stringProp name="Argument.name">Def_appName</stringProp>
            <stringProp name="Argument.value">jar包-滚动升级-1112-自动化专用</stringProp>
            <stringProp name="Argument.desc">拥有测试数据的应用名称；配置好了Accesskey和授权URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_fpdev_serviceVersion" elementType="Argument">
            <stringProp name="Argument.name">Def_fpdev_serviceVersion</stringProp>
            <stringProp name="Argument.value">v1</stringProp>
            <stringProp name="Argument.desc">Def_appId应用的fpdev环境的服务默认版本号【该版本下有一个实例运行中】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_test_serviceVersion" elementType="Argument">
            <stringProp name="Argument.name">Def_test_serviceVersion</stringProp>
            <stringProp name="Argument.value">v1</stringProp>
            <stringProp name="Argument.desc">Def_appId应用的test环境的服务默认版本号【该版本下有多个实例运行中；配置了鹰眼监控并有鹰眼数据】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Def_pro_serviceVersion" elementType="Argument">
            <stringProp name="Argument.name">Def_pro_serviceVersion</stringProp>
            <stringProp name="Argument.value">v1</stringProp>
            <stringProp name="Argument.desc">Def_appId应用的pro环境的服务默认版本号【该版本下服务可以正常运行】</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auto_appId" elementType="Argument">
            <stringProp name="Argument.name">auto_appId</stringProp>
            <stringProp name="Argument.value">6981</stringProp>
            <stringProp name="Argument.desc">USER_groupId下的应用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auto_appName" elementType="Argument">
            <stringProp name="Argument.name">auto_appName</stringProp>
            <stringProp name="Argument.value">金刚java-jar-重要-有实例运行</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auto_intranetDomain" elementType="Argument">
            <stringProp name="Argument.name">auto_intranetDomain</stringProp>
            <stringProp name="Argument.value">jingang-demo-jar-0314-1807-346.jingangnewone.test</stringProp>
            <stringProp name="Argument.desc">内网域名</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auto_waiDomain" elementType="Argument">
            <stringProp name="Argument.name">auto_waiDomain</stringProp>
            <stringProp name="Argument.value">jingang-autotest01.test.iqianjin.com</stringProp>
            <stringProp name="Argument.desc">外网域名</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--填写服务信息各个字段的测试数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="S_appId" elementType="Argument">
            <stringProp name="Argument.name">S_appId</stringProp>
            <stringProp name="Argument.value">5514</stringProp>
            <stringProp name="Argument.desc">应用id，预准备的数据，有自定义镜像</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="S_appName" elementType="Argument">
            <stringProp name="Argument.name">S_appName</stringProp>
            <stringProp name="Argument.value">校验服务修改接口的应用-1120-自动化专用</stringProp>
            <stringProp name="Argument.desc">应用名称（该应用下的服务信息填写全面，用于测试修改服务信息）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--外部数据文件--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="report_file" elementType="Argument">
            <stringProp name="Argument.name">report_file</stringProp>
            <stringProp name="Argument.value">/Users/jingang/Documents/Git-Test-Documents/Test-Documents/api-auto-test/data/report-demo.jpg</stringProp>
            <stringProp name="Argument.desc">上传测试报告的文件路径</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局自定义变量A【测试数据相关】--【测试环境】专用配置-bak" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="IP" elementType="Argument">
            <stringProp name="Argument.name">IP</stringProp>
            <stringProp name="Argument.value">14.116.185.125</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">18082</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appId" elementType="Argument">
            <stringProp name="Argument.name">appId</stringProp>
            <stringProp name="Argument.value">10000005</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appsecret" elementType="Argument">
            <stringProp name="Argument.name">appsecret</stringProp>
            <stringProp name="Argument.value">lxfU8f2zX0vf95EwNBIsPyuBDxa4j9Dy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accessToken1" elementType="Argument">
            <stringProp name="Argument.name">accessToken1</stringProp>
            <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhcHBLZXkiOiI2Njc3MTE4NTAwMDAwMDAwMDIiLCJ1c2VyaWQiOiIwMGVmOThkYjlkYzkzODQ0NTBkNGY1OTNlZjMxZjQ3NSIsImlzcyI6ImZmY3NpY3RkYXRhIiwiYXVkIjoiMDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjYiLCJleHAiOjE1NDMzNzM3NTUsIm5iZiI6MTU0MzIwMDk1NX0.1mroXwk1OJv5KTqzVIok3qJ7cgDxYck9geg_8fQL0Sc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">http://14.116.185.125:18082/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="model" elementType="Argument">
            <stringProp name="Argument.name">model</stringProp>
            <stringProp name="Argument.value">/openapi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">29000029038</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Ffcs123$%^</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accesstoken" elementType="Argument">
            <stringProp name="Argument.name">accesstoken</stringProp>
            <stringProp name="Argument.value">1976b94b8ee2d1bfaf1c3048bf26c1ae</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timestamp" elementType="Argument">
            <stringProp name="Argument.name">timestamp</stringProp>
            <stringProp name="Argument.value">${__time(/1000,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sign" elementType="Argument">
            <stringProp name="Argument.name">sign</stringProp>
            <stringProp name="Argument.value">1e60a20d9ddb99cd8c3bd7b59a473d28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="_password" elementType="Argument">
            <stringProp name="Argument.name">_password</stringProp>
            <stringProp name="Argument.value">RmZjczEyMyQlXjFlNjBhMjBkOWRkYjk5Y2Q4YzNiZDdiNTlhNDczZDI4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code" elementType="Argument">
            <stringProp name="Argument.name">code</stringProp>
            <stringProp name="Argument.value">xwa31+HGzMHla9yChBdSG9sd7O3LnOD7I3ZGOQZFzZATub9cT7Bg5MyPY5jGRu5M5XbRFUMKQ47qVLWZ3yq3WkLyI0uXZLWajc+1CDsaVMYet8AH0WS7OdYecbdbppZnKPeI7Qry/Tf52NEKqcaPOYOJZlyW3YtPQR4wIfvwVduZk6zWhs6Zz47jF+eFhaNGOeoWrvcFa4JJzXeqSqxGYpI6bhnWbJqd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--用户管理功能模块数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username1" elementType="Argument">
            <stringProp name="Argument.name">username1</stringProp>
            <stringProp name="Argument.value">cyltest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">18950295877</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password1" elementType="Argument">
            <stringProp name="Argument.name">password1</stringProp>
            <stringProp name="Argument.value">Ffcs12e3$%^</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="is_admin" elementType="Argument">
            <stringProp name="Argument.name">is_admin</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="is_mobile_power" elementType="Argument">
            <stringProp name="Argument.name">is_mobile_power</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="record_auth" elementType="Argument">
            <stringProp name="Argument.name">record_auth</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="one_click_shout" elementType="Argument">
            <stringProp name="Argument.name">one_click_shout</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code1" elementType="Argument">
            <stringProp name="Argument.name">code1</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">新增用户加密  code,存放到code1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="-------------------------------" elementType="Argument">
            <stringProp name="Argument.name">-------------------------------</stringProp>
            <stringProp name="Argument.value">------------------------媒体功能模块数据----------------------------</stringProp>
            <stringProp name="Argument.desc">---------------------------------</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isText" elementType="Argument">
            <stringProp name="Argument.name">isText</stringProp>
            <stringProp name="Argument.value">village</stringProp>
            <stringProp name="Argument.desc">用于区分上传的是文本还是音频,音频:village,文本:text</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="media_name" elementType="Argument">
            <stringProp name="Argument.name">media_name</stringProp>
            <stringProp name="Argument.value">test天翼大喇叭自动化多媒体测试</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
            <stringProp name="Argument.desc">分类信息：1-政治宣导 2-通知 3-消防警报 4-新闻知识 5-文体娱乐 6-其他</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kind" elementType="Argument">
            <stringProp name="Argument.name">kind</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="voice" elementType="Argument">
            <stringProp name="Argument.name">voice</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">声音字段 0 女生(默认) 1男生</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="speed" elementType="Argument">
            <stringProp name="Argument.name">speed</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">仅文本时有该字段,限定-1慢速0正常(默认)1快速</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_media" elementType="Argument">
            <stringProp name="Argument.name">code_media</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">json加密后save</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="id" elementType="Argument">
            <stringProp name="Argument.name">id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">媒体审核参数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="status" elementType="Argument">
            <stringProp name="Argument.name">status</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">媒体审核</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_check" elementType="Argument">
            <stringProp name="Argument.name">code_check</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">媒体审核code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_delete" elementType="Argument">
            <stringProp name="Argument.name">code_delete</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">媒体删除code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="my_db" elementType="Argument">
            <stringProp name="Argument.name">my_db</stringProp>
            <stringProp name="Argument.value">mysql_test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--speaker功能模块数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="type" elementType="Argument">
            <stringProp name="Argument.name">type</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="keyword" elementType="Argument">
            <stringProp name="Argument.name">keyword</stringProp>
            <stringProp name="Argument.value">0067000885广播任务</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name=" page" elementType="Argument">
            <stringProp name="Argument.name"> page</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_speaker_list" elementType="Argument">
            <stringProp name="Argument.name">code_speaker_list</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="group_id" elementType="Argument">
            <stringProp name="Argument.name">group_id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">从获取分组列表响应中取出group_id,存放到该变量给新增应急任务使用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="name" elementType="Argument">
            <stringProp name="Argument.name">name</stringProp>
            <stringProp name="Argument.value">测试应急任务</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="level" elementType="Argument">
            <stringProp name="Argument.name">level</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.desc">引用${media_id}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mid" elementType="Argument">
            <stringProp name="Argument.name">mid</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="group" elementType="Argument">
            <stringProp name="Argument.name">group</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">引用${group_id}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="type" elementType="Argument">
            <stringProp name="Argument.name">type</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="media_id" elementType="Argument">
            <stringProp name="Argument.name">media_id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">从获取媒体列表响应中取出ID,存放到该变量给新增应急任务使用</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_addPolicy" elementType="Argument">
            <stringProp name="Argument.name">code_addPolicy</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">新增应急任务3des加密code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="volume" elementType="Argument">
            <stringProp name="Argument.name">volume</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name=" " elementType="Argument">
            <stringProp name="Argument.name"> </stringProp>
            <stringProp name="Argument.value">----------------------- （3）新增日常任务接口 ---------------</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cycle" elementType="Argument">
            <stringProp name="Argument.name">cycle</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="begin_time" elementType="Argument">
            <stringProp name="Argument.name">begin_time</stringProp>
            <stringProp name="Argument.value">20:27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_time" elementType="Argument">
            <stringProp name="Argument.name">end_time</stringProp>
            <stringProp name="Argument.value">21:27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="day" elementType="Argument">
            <stringProp name="Argument.name">day</stringProp>
            <stringProp name="Argument.value">2020-12-03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="assign" elementType="Argument">
            <stringProp name="Argument.name">assign</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_addPolicy_daily" elementType="Argument">
            <stringProp name="Argument.name">code_addPolicy_daily</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="page" elementType="Argument">
            <stringProp name="Argument.name">page</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">----------------------- （4）获取任务详情接口 ---------------</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="id_speakinfo" elementType="Argument">
            <stringProp name="Argument.name">id_speakinfo</stringProp>
            <stringProp name="Argument.value">201202163147533310</stringProp>
            <stringProp name="Argument.desc">201203170157587078(备用的任务详情：任务ID对应数据库表dc_speaker_policy 的notice_id )</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="status" elementType="Argument">
            <stringProp name="Argument.name">status</stringProp>
            <stringProp name="Argument.value">${status}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start_time" elementType="Argument">
            <stringProp name="Argument.name">start_time</stringProp>
            <stringProp name="Argument.value">20:27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_time_speakerinfo" elementType="Argument">
            <stringProp name="Argument.name">end_time_speakerinfo</stringProp>
            <stringProp name="Argument.value">23:27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_speaker_info" elementType="Argument">
            <stringProp name="Argument.name">code_speaker_info</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">----------------------- （5）删除任务接口 ---------------</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_delPolicy" elementType="Argument">
            <stringProp name="Argument.name">code_delPolicy</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">删除任务3des加密code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_stopplay" elementType="Argument">
            <stringProp name="Argument.name">code_stopplay</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">停止播放任务3des加密code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUT_play_id" elementType="Argument">
            <stringProp name="Argument.name">OUT_play_id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUT_policy-id1" elementType="Argument">
            <stringProp name="Argument.name">OUT_policy-id1</stringProp>
            <stringProp name="Argument.value">111111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局自定义变量A【测试数据相关】--【测试环境】专用配置" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="IP" elementType="Argument">
            <stringProp name="Argument.name">IP</stringProp>
            <stringProp name="Argument.value">14.116.185.125</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">18082</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appId" elementType="Argument">
            <stringProp name="Argument.name">appId</stringProp>
            <stringProp name="Argument.value">10000005</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appsecret" elementType="Argument">
            <stringProp name="Argument.name">appsecret</stringProp>
            <stringProp name="Argument.value">lxfU8f2zX0vf95EwNBIsPyuBDxa4j9Dy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accessToken144" elementType="Argument">
            <stringProp name="Argument.name">accessToken144</stringProp>
            <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhcHBLZXkiOiI2Njc3MTE4NTAwMDAwMDAwMDIiLCJ1c2VyaWQiOiIwMGVmOThkYjlkYzkzODQ0NTBkNGY1OTNlZjMxZjQ3NSIsImlzcyI6ImZmY3NpY3RkYXRhIiwiYXVkIjoiMDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjYiLCJleHAiOjE1NDMzNzM3NTUsIm5iZiI6MTU0MzIwMDk1NX0.1mroXwk1OJv5KTqzVIok3qJ7cgDxYck9geg_8fQL0Sc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">accessToken1</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">http://14.116.185.125:18082/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="model" elementType="Argument">
            <stringProp name="Argument.name">model</stringProp>
            <stringProp name="Argument.value">/openapi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">29000029038</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Ffcs123$%^</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accesstoken66" elementType="Argument">
            <stringProp name="Argument.name">accesstoken66</stringProp>
            <stringProp name="Argument.value">1976b94b8ee2d1bfaf1c3048bf26c1ae</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">accesstoken</stringProp>
          </elementProp>
          <elementProp name="sign" elementType="Argument">
            <stringProp name="Argument.name">sign</stringProp>
            <stringProp name="Argument.value">1e60a20d9ddb99cd8c3bd7b59a473d28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="_password" elementType="Argument">
            <stringProp name="Argument.name">_password</stringProp>
            <stringProp name="Argument.value">RmZjczEyMyQlXjFlNjBhMjBkOWRkYjk5Y2Q4YzNiZDdiNTlhNDczZDI4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code" elementType="Argument">
            <stringProp name="Argument.name">code</stringProp>
            <stringProp name="Argument.value">xwa31+HGzMHla9yChBdSG9sd7O3LnOD7I3ZGOQZFzZATub9cT7Bg5MyPY5jGRu5M5XbRFUMKQ47qVLWZ3yq3WkLyI0uXZLWajc+1CDsaVMYet8AH0WS7OdYecbdbppZnKPeI7Qry/Tf52NEKqcaPOYOJZlyW3YtPQR4wIfvwVduZk6zWhs6Zz47jF+eFhaNGOeoWrvcFa4JJzXeqSqxGYpI6bhnWbJqd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--用户管理功能模块数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username1" elementType="Argument">
            <stringProp name="Argument.name">username1</stringProp>
            <stringProp name="Argument.value">cyltest</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mobile" elementType="Argument">
            <stringProp name="Argument.name">mobile</stringProp>
            <stringProp name="Argument.value">18950295877</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password1" elementType="Argument">
            <stringProp name="Argument.name">password1</stringProp>
            <stringProp name="Argument.value">Ffcs12e3$%^</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isText" elementType="Argument">
            <stringProp name="Argument.name">isText</stringProp>
            <stringProp name="Argument.value">village</stringProp>
            <stringProp name="Argument.desc">用于区分上传的是文本还是音频,音频:village,文本:text</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="media_name" elementType="Argument">
            <stringProp name="Argument.name">media_name</stringProp>
            <stringProp name="Argument.value">test天翼大喇叭自动化多媒体测试</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="email" elementType="Argument">
            <stringProp name="Argument.name">email</stringProp>
            <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
            <stringProp name="Argument.desc">分类信息：1-政治宣导 2-通知 3-消防警报 4-新闻知识 5-文体娱乐 6-其他</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kind" elementType="Argument">
            <stringProp name="Argument.name">kind</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="voice" elementType="Argument">
            <stringProp name="Argument.name">voice</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">声音字段 0 女生(默认) 1男生</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="speed" elementType="Argument">
            <stringProp name="Argument.name">speed</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">仅文本时有该字段,限定-1慢速0正常(默认)1快速</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_media" elementType="Argument">
            <stringProp name="Argument.name">code_media</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">json加密后save</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="id" elementType="Argument">
            <stringProp name="Argument.name">id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">媒体审核参数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="status" elementType="Argument">
            <stringProp name="Argument.name">status</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">媒体审核</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_check" elementType="Argument">
            <stringProp name="Argument.name">code_check</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">媒体审核code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_delete" elementType="Argument">
            <stringProp name="Argument.name">code_delete</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">媒体删除code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">----------------------- （4）获取任务详情接口 ---------------</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="id_speakinfo" elementType="Argument">
            <stringProp name="Argument.name">id_speakinfo</stringProp>
            <stringProp name="Argument.value">201202163147533310</stringProp>
            <stringProp name="Argument.desc">201203170157587078(备用的任务详情：任务ID对应数据库表dc_speaker_policy 的notice_id )</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="status" elementType="Argument">
            <stringProp name="Argument.name">status</stringProp>
            <stringProp name="Argument.value">${status}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="start_time" elementType="Argument">
            <stringProp name="Argument.name">start_time</stringProp>
            <stringProp name="Argument.value">20:27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="end_time_speakerinfo" elementType="Argument">
            <stringProp name="Argument.name">end_time_speakerinfo</stringProp>
            <stringProp name="Argument.value">23:27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_speaker_info" elementType="Argument">
            <stringProp name="Argument.name">code_speaker_info</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value">----------------------- （5）删除任务接口 ---------------</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_delPolicy" elementType="Argument">
            <stringProp name="Argument.name">code_delPolicy</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">删除任务3des加密code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code_stopplay" elementType="Argument">
            <stringProp name="Argument.name">code_stopplay</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">停止播放任务3des加密code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUT_play_id" elementType="Argument">
            <stringProp name="Argument.name">OUT_play_id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUT_policy-id1" elementType="Argument">
            <stringProp name="Argument.name">OUT_policy-id1</stringProp>
            <stringProp name="Argument.value">111111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局自定义变量A【测试数据】-【测试环境】" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="http_type" elementType="Argument">
            <stringProp name="Argument.name">http_type</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.desc">协议类型</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IP" elementType="Argument">
            <stringProp name="Argument.name">IP</stringProp>
            <stringProp name="Argument.value">14.116.185.125</stringProp>
            <stringProp name="Argument.desc">接口访问的地址</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">18082</stringProp>
            <stringProp name="Argument.desc">端口</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--用户数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">jingang</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--获取token功能模块数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">18082</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appId" elementType="Argument">
            <stringProp name="Argument.name">appId</stringProp>
            <stringProp name="Argument.value">10000005</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appsecret" elementType="Argument">
            <stringProp name="Argument.name">appsecret</stringProp>
            <stringProp name="Argument.value">lxfU8f2zX0vf95EwNBIsPyuBDxa4j9Dy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accessToken15" elementType="Argument">
            <stringProp name="Argument.name">accessToken15</stringProp>
            <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhcHBLZXkiOiI2Njc3MTE4NTAwMDAwMDAwMDIiLCJ1c2VyaWQiOiIwMGVmOThkYjlkYzkzODQ0NTBkNGY1OTNlZjMxZjQ3NSIsImlzcyI6ImZmY3NpY3RkYXRhIiwiYXVkIjoiMDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjYiLCJleHAiOjE1NDMzNzM3NTUsIm5iZiI6MTU0MzIwMDk1NX0.1mroXwk1OJv5KTqzVIok3qJ7cgDxYck9geg_8fQL0Sc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">http://14.116.185.125:18082/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="model" elementType="Argument">
            <stringProp name="Argument.name">model</stringProp>
            <stringProp name="Argument.value">/openapi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">29000029038</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Ffcs123$%^</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accesstoken44" elementType="Argument">
            <stringProp name="Argument.name">accesstoken44</stringProp>
            <stringProp name="Argument.value">1976b94b8ee2d1bfaf1c3048bf26c1ae</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sign" elementType="Argument">
            <stringProp name="Argument.name">sign</stringProp>
            <stringProp name="Argument.value">1e60a20d9ddb99cd8c3bd7b59a473d28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="_password" elementType="Argument">
            <stringProp name="Argument.name">_password</stringProp>
            <stringProp name="Argument.value">RmZjczEyMyQlXjFlNjBhMjBkOWRkYjk5Y2Q4YzNiZDdiNTlhNDczZDI4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="code" elementType="Argument">
            <stringProp name="Argument.name">code</stringProp>
            <stringProp name="Argument.value">xwa31+HGzMHla9yChBdSG9sd7O3LnOD7I3ZGOQZFzZATub9cT7Bg5MyPY5jGRu5M5XbRFUMKQ47qVLWZ3yq3WkLyI0uXZLWajc+1CDsaVMYet8AH0WS7OdYecbdbppZnKPeI7Qry/Tf52NEKqcaPOYOJZlyW3YtPQR4wIfvwVduZk6zWhs6Zz47jF+eFhaNGOeoWrvcFa4JJzXeqSqxGYpI6bhnWbJqd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputDeviceId" elementType="Argument">
            <stringProp name="Argument.name">outputDeviceId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="----" elementType="Argument">
            <stringProp name="Argument.name">----</stringProp>
            <stringProp name="Argument.value">--用户管理功能模块数据--</stringProp>
            <stringProp name="Argument.desc">----</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局自定义变量B【运行参数】" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="xiancheng" elementType="Argument">
            <stringProp name="Argument.name">xiancheng</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">模拟的用户并发量</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="yanchi_time" elementType="Argument">
            <stringProp name="Argument.name">yanchi_time</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">每个线程组延迟启动时间（单位：s）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chixu_time" elementType="Argument">
            <stringProp name="Argument.name">chixu_time</stringProp>
            <stringProp name="Argument.value">300000</stringProp>
            <stringProp name="Argument.desc">每个线程组持续运行时间（单位：s）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xunhuan" elementType="Argument">
            <stringProp name="Argument.name">xunhuan</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">设置线程循环次数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="flag" elementType="Argument">
            <stringProp name="Argument.name">flag</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">是否启用集合点（启用：1，不启用：0）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xiancheng_time" elementType="Argument">
            <stringProp name="Argument.name">xiancheng_time</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">设置线程启动区间时间（单位：s）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="desk_warn" elementType="Argument">
            <stringProp name="Argument.name">desk_warn</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">是否显示手工检查提醒（0：不显示，1：显示）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="check_list" elementType="Argument">
            <stringProp name="Argument.name">check_list</stringProp>
            <stringProp name="Argument.value">①与数据库/pc系统上对应页面进行核对检查，接口实现功能是否正确没有造成其他影响。 ②检查返回字段名称和接口文档中响应参数列表对应一致 ③检查返回接口返回数据是否正确</stringProp>
            <stringProp name="Argument.desc">手工检查内容列表</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="No" elementType="Argument">
            <stringProp name="Argument.name">No</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">用例编号(从序号1开始)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xc" elementType="Argument">
            <stringProp name="Argument.name">xc</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">全局自定义变量B【运行参数】</stringProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers"/>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">mysql_test</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://127.0.0.1:3308/galaxy?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</stringProp>
        <stringProp name="driver">org.gjt.mm.mysql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">G7%hK0@hK0@e</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">99</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">number</stringProp>
        <stringProp name="CounterConfig.format">00</stringProp>
        <boolProp name="CounterConfig.per_user">true</boolProp>
      </CounterConfig>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment【当前&lt;脚本&gt;通用模块库】" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------数据准备模块-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##DB【SQL查询数据】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">select id from t_group 
where support_version = &apos;2.x&apos; and delete_status = 0
order by rand() limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL_group_id</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler(设置输出变量)" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;Rnd_group_id&quot;,&quot;${SQL_group_id_1}&quot;);
log.info(&quot;{Rnd_group_id}=${SQL_group_id_1}&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[SQL]：【获取删除用户】数据库随机抽取已经删除的用户，输出{OUT_username_del}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库中随机抽取某个已经删除的用户" enabled="true">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">Select a.id,a.username,a.password from t_user a
where a.enable &lt;&gt; 1
order by rand() limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">10</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL-id,SQL-username,SQL-password</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;OUT_username_del&quot;,&quot;${SQL-username_1}&quot;);
log.info(&quot;{OUT_username_del}=${SQL-username_1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[SQL]：【获取正常用户】数据库随机抽取正常状态的用户，输出{OUT_username}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库中随机抽取一个正常的用户" enabled="true">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">Select a.id,a.username,a.password from t_user a 
where a.enable = 1
order by rand() limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">10</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL-id,SQL-username,SQL-password</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;OUT_username&quot;,&quot;${SQL-username_1}&quot;);
log.info(&quot;{OUT_username}=${SQL-username_1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[SQL]：【获取用户id】通过用户名{username}，查询该用户的id，输出{OUT_userId}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1769670314">
                  <stringProp name="1685720944">${username}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库中查询" enabled="true">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">SELECT id FROM t_user  WHERE username = &apos;${username}&apos; 
order by rand() limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">10</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL-id</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;OUT_userId&quot;,&quot;${SQL-id_1}&quot;);
log.info(&quot;{OUT_userId}=${SQL-id_1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[SQL]：【获取可删除的应用id和团队id】到数据库查询可进行删除的应用id和和团队groupId，输出{OUT_app_id},{OUT_groupId}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${ENV}&quot; == &quot;test&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skucode1" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select aa.id,aa.group_id from t_application aa  left join t_group bb on aa.group_id = bb.id 
where aa.delete_status = 0 and bb.support_version = &apos;2.x&apos;
order by rand() limit 1</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">OUT_app_id,OUT_groupId</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">vars.put(&quot;OUT_app_id&quot;,&quot;${OUT_app_id_1}&quot;);
vars.put(&quot;OUT_groupId&quot;,&quot;${OUT_groupId_1}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[SQL]：【获取某用户可删除的应用id】到数据库查询某用户（{username}）【可进行】删除的应用id和和团队groupId，输出{OUT_user_app_id},{OUT_user_groupId}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1769670314">
                  <stringProp name="1685720944">${username}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取" enabled="true">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">select aa.id,aa.group_id 
from t_application aa inner join  t_group_user bb on aa.group_id = bb.group_id
where aa.delete_status = 0 and bb.username = &apos;${username}&apos;
order by rand() limit 1</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">OUT_app_id,OUT_groupId</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;OUT_user_app_id&quot;,&quot;${OUT_app_id_1}&quot;);
vars.put(&quot;OUT_user_groupId&quot;,&quot;${OUT_groupId_1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##数据准备【单/多接口组合-有用】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="-1893274607">appsecret</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2133378685">
                  <stringProp name="568870116">10000005</stringProp>
                  <stringProp name="84103">29000029038</stringProp>
                  <stringProp name="625994203">Ffcs123$%^</stringProp>
                  <stringProp name="1955239142">lxfU8f2zX0vf95EwNBIsPyuBDxa4j9Dy</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取Token接口（租户管理员）  " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/getToken</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="DO-SIGN" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
//从自定义变量中，获取各个变量的初始值。
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;

log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取accessToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;accessToken&quot;:&quot;(.+?)&quot;,&quot;accesstoken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取device_id】利用获取设备列表消息体中的device_id,输出到OUT_device_id,作为设备详情接口的输入。" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-607038954">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1226916004">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取获取设备列表接口获取响应体中的device_id,输出到OUT_device_id,作为设备详情接口的输入。" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备列表" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="code" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">code</stringProp>
                    </elementProp>
                    <elementProp name="XDEBUG_SESSION_START" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">1446</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">XDEBUG_SESSION_START</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/device/list</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备列表json加密为code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
        map.put(&quot;device_type&quot;,&quot;${device_type}&quot;);
        map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">OUT_device_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.items[0].device_id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="输出deviceId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">deviceId</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;device_id&quot;:&quot;(.+?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取分组列表group_id】利用获取分组列表接口，输出{group_id}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1829936677">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取获取分组列表接口获取响应体中的group_id,输出到{group_id}。" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取分组列表【输出{group_id_extr_1}并存放用户变量group_id】" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/speaker/getGroupList</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一分组列表json加密输出code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;isTree&quot;,&quot;${isTree}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取分组列表json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取分组列表json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-获取group_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">group_id_extr</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-存放到变量group_id" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">vars.put(&quot;group_id&quot;,&quot;${group_id_extr_1}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取在播任务play_id】利用在播任务接口，输出{OUT_play_id}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1829936677">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用在播列表接口获取响应体中的play_id,输出到{OUT_play_id}。" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="在播列表接口【获取响应体中的id值，输出{OUT_play_id}】--（必须用29038账号创建播放任务才能查询到。因为登录用的是29038账号）" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/speaker/speakerList</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-356380116">res_code</stringProp>
                    <stringProp name="-2063490517">timstamp</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-1209318569">
                      <stringProp name="49586">200</stringProp>
                      <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取在播列表json加密为code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      //  map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       // map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      //  map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON -【获取在播任务id】利用在播列表接口获取响应体中的id值，输出{OUT_play_id}" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">OUT_play_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.items[0].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-存放到用户变量{OUT_play_id}" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//vars.put(&quot;media_id&quot;,&quot;${media_id_extr_1}&quot;);

vars.put(&quot;OUT_play_id&quot;,&quot;${OUT_play_id}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-bak" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.io.UnsupportedEncodingException;
import org.apache.jmeter.assertions.AssertionResult;
import org.json.*;

//import com.google.gson.JsonObject;  
//import com.google.gson.JsonParser; 


String str = prev.getResponseDataAsString();
String result = &quot;&quot;; 

log.info(&quot;返回的字符串为:&quot;+str);
try 
{ 
	result = java.net.URLDecoder.decode(str, &quot;UTF-8&quot;); 
	} catch (UnsupportedEncodingException e){
		e.printStackTrace();
		}
	JSONObject data_obj=new JSONObject(str);
	String result1 = data_obj.get(&quot;code&quot;).toString();
	if(result1.contains(&quot;200&quot;)) {
		Failure = true;
		FailureMessage = &quot;断言成功&quot;;
		log.info(&quot;断言成功&quot;);
		}else{ 
	Failure = false;
	FailureMessage = &quot;断言失败&quot;;
	}

/*
String code = prev.getResponseCode();
log.info(&quot;播放list&quot;+code);

if(code.equals(&quot;${res_code}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
}

else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}

*/</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.io.UnsupportedEncodingException;
import org.apache.jmeter.assertions.AssertionResult;
import org.json.*;

//import com.google.gson.JsonObject;  
//import com.google.gson.JsonParser; 


String str = prev.getResponseDataAsString();
String result = &quot;&quot;; 

log.info(&quot;返回的字符串为:&quot;+str);
try 
{ 
	result = java.net.URLDecoder.decode(str, &quot;UTF-8&quot;); 
	} catch (UnsupportedEncodingException e){
		e.printStackTrace();
		}
	JSONObject data_obj=new JSONObject(str);
	String result1 = data_obj.get(&quot;code&quot;).toString();
	if(result1.contains(&quot;200&quot;)) {
		Failure = true;
		FailureMessage = &quot;断言成功&quot;;
		log.info(&quot;断言成功&quot;);
		}else{ 
	Failure = false;
	FailureMessage = &quot;断言失败&quot;;
	}

/*
String code = prev.getResponseCode();
log.info(&quot;播放list&quot;+code);

if(code.equals(&quot;${res_code}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
}

else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}

*/</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor--断言检查：BeanShell代码方式校验获取的数据是否成功" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//import org.json.*;
import org.json.JSONObject;
//import com.alibaba.fastjson.JSONObject;
String response_data = prev.getResponseDataAsString();
 //日志打印获取请求的返回值 
 log.info(response_data); 
 //将 String 类型的返回值构造成 JSONObject 对象 
 JSONObject data_obj = new JSONObject(response_data); 
 //获取作为下一个请求 post 的参数值 Province(两种方式)
 //String Provincelist_str = data_obj.get(&quot;Province&quot;).toString(); 
 ////JSONArray Provincelist_str = data_obj.getJSONArray(&quot;Province&quot;); 
 //log.info(Provincelist_str); 
 //获取 Province 数组的长度 
 /*
 int len = Provincelist_str.length(); 
 String strlen = Integer.toString(len); 
 vars.put(&quot;MessageNum&quot;,strlen); 
 log.info(strlen);

*/
JSONObject data_obj=new JSONObject(response_data);
	String result1 = data_obj.get(&quot;code&quot;).toString();

	log.info(&quot;结果码：&quot;+result1);
	//if(result1.contains(&quot;200&quot;)) {
		if(result1.equals(&quot;200&quot;)) {
		IsSuccess = false; // 判断失败
          ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;  
		log.info(&quot;断言成功&quot;);
		}else{ 
	IsSuccess = true; // 判断成功
	//Failure = false;
	FailureMessage = &quot;断言失败&quot;;
		}
/*
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}
*/

 /*
 
 int i = 0; 
 for(;i &lt; len;++i) {
	 //获取 data[ i ] 数组对象 
	 JSONObject jsonTemp = (JSONObject)Provincelist_str.getJSONObject(i); 
	 switch(i) {
		 case 0: //两种提取参数的写法 
		 String NameItems = jsonTemp.getString(&quot;Name&quot;); 
		 // String NameItems = jsonTemp.get(&quot;Name&quot;).toString(); 
		 // 两种打印参数的方法 
		 // vars.put(&quot;Name_1&quot;, jsonTemp.getString(&quot;Name&quot;)); 
		 vars.put(&quot;Name_1&quot;, NameItems); 
		 log.info(NameItems);
		 }
		 } 

		 */</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="(可以成执行）BeanShell Assertion-断言检查：BeanShell代码方式校验获取的数据是否成功" enabled="true">
                  <stringProp name="BeanShellAssertion.query">//import org.json.*;
import org.json.JSONObject;
//import com.alibaba.fastjson.JSONObject;
String response_data = prev.getResponseDataAsString();
 //日志打印获取请求的返回值 
 log.info(response_data); 
 //将 String 类型的返回值构造成 JSONObject 对象 
 JSONObject data_obj = new JSONObject(response_data); 
 //获取作为下一个请求 post 的参数值 Province(两种方式)
 //String Provincelist_str = data_obj.get(&quot;Province&quot;).toString(); 
 ////JSONArray Provincelist_str = data_obj.getJSONArray(&quot;Province&quot;); 
 //log.info(Provincelist_str); 
 //获取 Province 数组的长度 
 /*
 int len = Provincelist_str.length(); 
 String strlen = Integer.toString(len); 
 vars.put(&quot;MessageNum&quot;,strlen); 
 log.info(strlen);

*/
JSONObject data_obj=new JSONObject(response_data);
	String result1 = data_obj.get(&quot;code&quot;).toString();

	log.info(&quot;结果码：&quot;+result1);
	//if(result1.contains(&quot;200&quot;)) {
		if(result1.equals(&quot;200&quot;)) {
		  Failure = false; //设置结果成功
		//IsSuccess = false; // 判断失败
         // ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;  
		//log.info(&quot;断言成功&quot;);
		}else{ 
               Failure = true; //设置结果为失败
		     log.info(result1); //打印调试信息
		     FailureMessage = response_data; //自定义失败信息，在查看结果树中可以显示出错误信息。
			
	//IsSuccess = true; // 判断成功
	//Failure = false;
	//FailureMessage = &quot;断言失败&quot;;
		}
/*
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}
*/

 /*
 
 int i = 0; 
 for(;i &lt; len;++i) {
	 //获取 data[ i ] 数组对象 
	 JSONObject jsonTemp = (JSONObject)Provincelist_str.getJSONObject(i); 
	 switch(i) {
		 case 0: //两种提取参数的写法 
		 String NameItems = jsonTemp.getString(&quot;Name&quot;); 
		 // String NameItems = jsonTemp.get(&quot;Name&quot;).toString(); 
		 // 两种打印参数的方法 
		 // vars.put(&quot;Name_1&quot;, jsonTemp.getString(&quot;Name&quot;)); 
		 vars.put(&quot;Name_1&quot;, NameItems); 
		 log.info(NameItems);
		 }
		 } 

		 */</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取媒体管理列表media_id】利用获取媒体管理列表接口，输出{media_id}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1638313341">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取媒体管理列表接口获取响应体中的media_id,输出{meida_id}】" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体管理列表【利用媒体管理列表输出{meida_id}】" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/speaker/mediaList</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体管理列表json加密为code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      //  map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       // map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      //  map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-获取媒体id，输出{media_id}" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">media_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.items[0].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-存放到变量media_id" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//vars.put(&quot;media_id&quot;,&quot;${media_id_extr_1}&quot;);

vars.put(&quot;media_id&quot;,&quot;${media_id_extr_1}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2-数据准备：利用媒体分组列表接口获取响应体中的group_id值，输出{group_id}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="1020178624">数据准备[接口]：【获取分组列表group_id】利用获取分组列表接口，输出{group_id}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤3-数据准备：利用获取媒体管理列表接口获取响应体中的media_id值，输出{media_id}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="1957491360">数据准备[接口]：【获取媒体管理列表media_id】利用获取媒体管理列表接口，输出{media_id}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤4-数据准备：利用获取新增应急任务接口获取响应体中的policy_id,输出{OUT_policy_id}】" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增应急任务(需要获取媒体管理列表接口的media_ID，和媒体分组列表的group_id，并输出{OUT_policy-_d}）" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/speaker/addPolicy</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="3575610">type</stringProp>
                    <stringProp name="95131878">cycle</stringProp>
                    <stringProp name="1112183971">begin_time</stringProp>
                    <stringProp name="1725551537">end_time</stringProp>
                    <stringProp name="99228">day</stringProp>
                    <stringProp name="-1408204561">assign</stringProp>
                    <stringProp name="-810883302">volume</stringProp>
                    <stringProp name="3373707">name</stringProp>
                    <stringProp name="102865796">level</stringProp>
                    <stringProp name="108104">mid</stringProp>
                    <stringProp name="98629247">group</stringProp>
                    <stringProp name="55126294">timestamp</stringProp>
                    <stringProp name="1226862376">weekday</stringProp>
                    <stringProp name="1018214091">describe</stringProp>
                    <stringProp name="-338200277">showinfo</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-956051731">
                      <stringProp name="49">1</stringProp>
                      <stringProp name="49">1</stringProp>
                      <stringProp name="47663361">20:27</stringProp>
                      <stringProp name="47722943">22:27</stringProp>
                      <stringProp name="1020067966">2021-12-13</stringProp>
                      <stringProp name="49">1</stringProp>
                      <stringProp name="49">1</stringProp>
                      <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                      <stringProp name="49">1</stringProp>
                      <stringProp name="-821288720">${media_id}</stringProp>
                      <stringProp name="-149757429">${group_id}</stringProp>
                      <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                      <stringProp name="47060128">1;2;3</stringProp>
                      <stringProp name="1005079562">这是一个测试</stringProp>
                      <stringProp name="103609040">led展示</stringProp>
                    </collectionProp>
                    <collectionProp name="535946194">
                      <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                      <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                      <stringProp name="0"></stringProp>
                      <stringProp name="0"></stringProp>
                      <stringProp name="0"></stringProp>
                      <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                      <stringProp name="1362927496">音量1~10</stringProp>
                      <stringProp name="89">Y</stringProp>
                      <stringProp name="659329481">优先级1~4    Y</stringProp>
                      <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                      <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                      <stringProp name="0"></stringProp>
                      <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                      <stringProp name="0"></stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">true</boolProp>
                  <stringProp name="TestPlan.comments">
</stringProp>
                </UserParameters>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取新增应急任务json加密输出code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//




        Map map=new HashMap();
        map.put(&quot;name&quot;,&quot;${name}&quot;);
        map.put(&quot;level&quot;,&quot;${level}&quot;);
       // map.put(&quot;mid&quot;,&quot;${media_id}&quot;);
       // map.put(&quot;group&quot;,&quot;${group_id}&quot;);

         map.put(&quot;mid&quot;,&quot;${mid}&quot;);
        map.put(&quot;group&quot;,&quot;${group}&quot;);
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;volume&quot;,&quot;${volume}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
        map.put(&quot;describe&quot;,&quot;${describe}&quot;);
        map.put(&quot;showinfo&quot;,&quot;${showinfo}&quot;);
        map.put(&quot;assign&quot;,&quot;${assign}&quot;);
        map.put(&quot;weekday&quot;,&quot;${weekday}&quot;);
        map.put(&quot;cycle&quot;,&quot;${cycle}&quot;);
        map.put(&quot;begin_time&quot;,&quot;${begin_time}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
        map.put(&quot;day&quot;,&quot;${day}&quot;);


/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_addPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON-【获取id】利用新增应急任务接口获取响应体中的ID值，输出{OUT_policy_id}" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">OUT_policy_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While控制器" enabled="true">
              <stringProp name="WhileController.condition">${__jexl3(&quot;${OUT_policy_id}&quot;==&quot;NULL&quot;)}</stringProp>
            </WhileController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="【步骤4-数据准备】：新增应急任务，输出应用的id：${OUT_policy_id}" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2063490517">timstamp</stringProp>
                    <stringProp name="3373707">name</stringProp>
                    <stringProp name="108104">mid</stringProp>
                    <stringProp name="98629247">group</stringProp>
                    <stringProp name="3575610">type</stringProp>
                    <stringProp name="-810883302">volume</stringProp>
                    <stringProp name="102865796">level</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-735436805">
                      <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                      <stringProp name="1216364763">${name}</stringProp>
                      <stringProp name="-821288720">${media_id}</stringProp>
                      <stringProp name="-149757429">${group_id}</stringProp>
                      <stringProp name="1222623756">${type}</stringProp>
                      <stringProp name="-394123284">${volume}</stringProp>
                      <stringProp name="-1000694512">${level}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                  <stringProp name="TestPlan.comments">  map.put(&quot;name&quot;,&quot;${name}&quot;);
        map.put(&quot;level&quot;,&quot;${level}&quot;);
        map.put(&quot;mid&quot;,&quot;${media_id}&quot;);
        map.put(&quot;group&quot;,&quot;${group_id}&quot;);
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;volume&quot;,&quot;${volume}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

</stringProp>
                </UserParameters>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增应急任务(需要获取媒体管理列表接口的media_ID，和媒体分组列表的group_id，并输出{OUT_policy-id}）" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">${model}/speaker/addPolicy</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">appId</stringProp>
                        <stringProp name="Header.value">${appId}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">accessToken</stringProp>
                        <stringProp name="Header.value">${accessToken}</stringProp>
                      </elementProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取新增应急任务json加密输出code" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;name&quot;,&quot;${name}&quot;);
        map.put(&quot;level&quot;,&quot;${level}&quot;);
        map.put(&quot;mid&quot;,&quot;${media_id}&quot;);
        map.put(&quot;group&quot;,&quot;${group_id}&quot;);
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;volume&quot;,&quot;${volume}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);


/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_addPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON-【获取id】利用新增应急任务接口获取响应体中的ID值，输出{OUT_policy_id}" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">OUT_policy_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                      <name>saveConfig</name>
                      <value class="SampleSaveConfiguration">
                        <time>true</time>
                        <latency>true</latency>
                        <timestamp>true</timestamp>
                        <success>true</success>
                        <label>true</label>
                        <code>true</code>
                        <message>true</message>
                        <threadName>true</threadName>
                        <dataType>true</dataType>
                        <encoding>false</encoding>
                        <assertions>true</assertions>
                        <subresults>true</subresults>
                        <responseData>false</responseData>
                        <samplerData>false</samplerData>
                        <xml>false</xml>
                        <fieldNames>false</fieldNames>
                        <responseHeaders>false</responseHeaders>
                        <requestHeaders>false</requestHeaders>
                        <responseDataOnError>false</responseDataOnError>
                        <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                        <assertionsResultsToSave>0</assertionsResultsToSave>
                        <bytes>true</bytes>
                        <threadCounts>true</threadCounts>
                      </value>
                    </objProp>
                    <stringProp name="filename"></stringProp>
                  </ResultCollector>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">1000</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">100</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取新增用户userCode】利用新增用户接口，输出{OUT_userCode}）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2132345367">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2-数据准备：利用新增用户接口获取响应体中的userCode值，输出{OUT_userCode}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户新增【获取用户新增响应体中Usrcode，输出{OUT_userCode}】" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/user/create</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增信息json加密为code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;username&quot;,&quot;${username2}&quot;);
        map.put(&quot;mobile&quot;,&quot;${mobile}&quot;);
        map.put(&quot;email&quot;,&quot;${email}&quot;);
        map.put(&quot;password&quot;,&quot;${password1}&quot;);
        map.put(&quot;is_admin&quot;,&quot;${is_admin}&quot;);
        map.put(&quot;record_auth&quot;,&quot;${record_auth}&quot;);
        map.put(&quot;one_click_shout&quot;,&quot;${one_click_shout}&quot;);
        map.put(&quot;is_mobile_power&quot;,&quot;${is_mobile_power}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor-获取用户新增响应体中Usrcode，输出{OUT_userCode}" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">OUT_userCode</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.userCode</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取新增媒体id】利用新增媒体接口，输出{OUT_id}）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1327453018">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1843136958">cyl_新增媒体测试</stringProp>
                  <stringProp name="365423760">cyl_天翼大喇叭自动化新增多媒体测试</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤4-数据准备：利用新增媒体接口获取响应体中的id值，输出{OUT_id}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增媒体【获取新增媒体响应体中id，输出{OUT_id}】" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/speaker/mediaUploadRecOrText</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增媒体json加密为code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;isText&quot;,&quot;${isText}&quot;);
        map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;kind&quot;,&quot;${kind}&quot;);
        map.put(&quot;text&quot;,&quot;${text}&quot;);
        map.put(&quot;voice&quot;,&quot;${voice}&quot;);
        map.put(&quot;speed&quot;,&quot;${speed}&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_media&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取响应体中的id,输出到{OUT_id}" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_id</stringProp>
                  <stringProp name="RegexExtractor.regex">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:{&quot;id&quot;:&quot;(.+?)&quot;}}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取新增媒体id】利用新增媒体接口，输出{OUT_id}）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
            <stringProp name="TestPlan.comments">【调用获取设备列表消息体中获取device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1327453018">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1843136958">cyl_新增媒体测试</stringProp>
                  <stringProp name="365423760">cyl_天翼大喇叭自动化新增多媒体测试</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1-数据准备：利用获取token接口获取响应体中的accessToken值，输出{accessToken}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                  <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤4-数据准备：利用新增媒体接口获取响应体中的id值，输出{OUT_id}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增媒体【获取新增媒体响应体中id，输出{OUT_id}】" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${IP}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${model}/speaker/mediaUploadRecOrText</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">appId</stringProp>
                      <stringProp name="Header.value">${appId}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">accessToken</stringProp>
                      <stringProp name="Header.value">${accessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增媒体json加密为code" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;isText&quot;,&quot;${isText}&quot;);
        map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;kind&quot;,&quot;${kind}&quot;);
        map.put(&quot;text&quot;,&quot;${text}&quot;);
        map.put(&quot;voice&quot;,&quot;${voice}&quot;);
        map.put(&quot;speed&quot;,&quot;${speed}&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_media&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取响应体中的id,输出到{OUT_id}" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_id</stringProp>
                  <stringProp name="RegexExtractor.regex">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:{&quot;id&quot;:&quot;(.+?)&quot;}}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <threadCounts>true</threadCounts>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------获取token模块（有用)-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取token接口-有用】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取token]-通用模块：正常值入参，检验接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="-1893274607">appsecret</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="616981688">
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                  <stringProp name="404756043">${password}</stringProp>
                  <stringProp name="-191645021">${appsecret}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/getToken</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="DO-SIGN" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
//从自定义变量中，获取各个变量的初始值。
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;

log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取accessToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;accessToken&quot;:&quot;(.+?)&quot;,&quot;accesstoken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取token]-通用模块：异常值入参，检验接口返回预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="-1893274607">appsecret</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1975109655">
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                  <stringProp name="404756043">${password}</stringProp>
                  <stringProp name="-191645021">${appsecret}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/getToken</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="DO-SIGN" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
//从自定义变量中，获取各个变量的初始值。
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;

log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="获取accessToken" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">accessToken</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;accessToken&quot;:&quot;(.+?)&quot;,&quot;accesstoken&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------登录模块-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【登录】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[登录]-通用模块：正常值入参，检验接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-744348931">
                  <stringProp name="1564648407">${freeLogin}</stringProp>
                  <stringProp name="404756043">${password}</stringProp>
                  <stringProp name="294132726">${randomCode}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                  <stringProp name="11814622">${verificationCode}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言--正则匹配" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-963499297">\{&quot;code&quot;:0,&quot;t&quot;:[0-9]+,&quot;content&quot;:\{&quot;menuList&quot;:\[\{&quot;createTime&quot;:[0-9]+,&quot;id&quot;:88,&quot;name&quot;:&quot;应用管理&quot;.*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[登录]-通用模块：异常值入参，检验接口返回预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-736064165">
                  <stringProp name="1564648407">${freeLogin}</stringProp>
                  <stringProp name="404756043">${password}</stringProp>
                  <stringProp name="294132726">${randomCode}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                  <stringProp name="11814622">${verificationCode}</stringProp>
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【退出登录接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[退出登录接口]-通用模块：正常值入参，检验接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1197850219">
                  <stringProp name="-762753733">${token}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/userLogout</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1119182345">退出成功</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[退出登录接口]-通用模块：通过查询用户所在团队接口，验证用户已经登出" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1664488314">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1160377390">您没有登录，请重新登录</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/group/queryByUser</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【查询用户所属团队】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询用户所属团队]-通用模块：正确入参(非平台管理员登录)，详细检查返回结果" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-265713450">username</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1003948076">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/group/queryByUser</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="951530617">content</stringProp>
                  <stringProp name="-1483226179">groupList</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.groupList.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_groupList_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_groupList_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_groupList_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].tag&quot;);
    		vars.put(&quot;Json_groupList_tag_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_groupList_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].creatorId&quot;);
    		vars.put(&quot;Json_groupList_creatorId_&quot;+i,str);    		
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].description&quot;);
    		vars.put(&quot;Json_groupList_description_&quot;+i,str);    		
    	}
    	
//	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
//    	vars.put(&quot;Json_user_id&quot;,str);
//	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
//    	vars.put(&quot;Json_user_username&quot;,str);
  	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1719467628">loginName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1769670314">
                    <stringProp name="1685720944">${username}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select distinct  c.id,c.name,c.tag,unix_timestamp(c.create_time)*1000,ifnull(c.creator_id,&apos;null&apos;),ifnull(c.description,&apos;null&apos;),c.support_version 
from t_user a left join t_group_user b on a.id = b.user_id left join t_group c on b.group_id = c.id
where a.username = &apos;${loginName}&apos; and c.support_version in(&apos;2.x&apos;,&apos;1.x&apos;)
order by c.support_version desc,c.id asc</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_id,SQL_name,SQL_tag,SQL_createTime,SQL_creatorId,SQL_description</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="false">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_password}&quot;,&quot;${Json_user_mobile}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;,&quot;${Json_user_avatar}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;${SQL_user_password_1}&quot;,&quot;${SQL_user_mobile_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;,&quot;${SQL_user_avatar_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_groupList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_id_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_name_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_tag_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_tag_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_createTime_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_creatorId_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_creatorId_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果(查询用户是否超级管理员)" enabled="false">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">select a.username,c.name
from t_user a left join t_user_role b on a.id = b.user_id left join t_role c on b.role_id = c.id 
where a.username = &apos;${username}&apos; and c.name = &apos;平台管理员&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL0_username,SQL0_name</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器(如果为管理员时查询所有团队)" enabled="false">
              <stringProp name="IfController.condition">${SQL0_username_#}  &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-1719467628">loginName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-1769670314">
                      <stringProp name="1685720944">${username}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">true</boolProp>
                </UserParameters>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                  <stringProp name="dataSource">${my_DB}</stringProp>
                  <stringProp name="query">select a.id,a.name,a.tag,unix_timestamp(a.create_time)*1000,ifnull(a.creator_id,&apos;null&apos;),ifnull(a.description,&apos;null&apos;) 
from  t_group a</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout">5</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">SQL_id,SQL_name,SQL_tag,SQL_createTime,SQL_creatorId,SQL_description</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="false">
                  <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_password}&quot;,&quot;${Json_user_mobile}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;,&quot;${Json_user_avatar}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;${SQL_user_password_1}&quot;,&quot;${SQL_user_mobile_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;,&quot;${SQL_user_avatar_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                  <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_groupList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_tag_&quot; + i);
	String str_sql = vars.get(&quot;SQL_tag_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}
//
//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_creatorId_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_creatorId_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器(如果不为管理员)" enabled="false">
              <stringProp name="IfController.condition">${SQL0_username_#}  == 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询用户所属团队]-通用模块：正确入参(平台管理员登录)，详细检查返回结果" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-265713450">username</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1003948076">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/group/queryByUser</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="951530617">content</stringProp>
                  <stringProp name="-1483226179">groupList</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.groupList.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_groupList_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_groupList_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_groupList_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].tag&quot;);
    		vars.put(&quot;Json_groupList_tag_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_groupList_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].creatorId&quot;);
    		vars.put(&quot;Json_groupList_creatorId_&quot;+i,str);    		
    		str = Test.readjson(response_data,&quot;$.content.groupList[&quot;+ i +&quot;].description&quot;);
    		vars.put(&quot;Json_groupList_description_&quot;+i,str);    		
    	}
    	
//	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
//    	vars.put(&quot;Json_user_id&quot;,str);
//	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
//    	vars.put(&quot;Json_user_username&quot;,str);
  	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1719467628">loginName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1769670314">
                    <stringProp name="1685720944">${username}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select a.id,a.name,a.tag,unix_timestamp(a.create_time)*1000,ifnull(a.creator_id,&apos;null&apos;),ifnull(a.description,&apos;null&apos;) 
from  t_group a
where a.support_version in (&quot;2.x&quot;,&quot;1.x&quot;) and  delete_status = 0</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_id,SQL_name,SQL_tag,SQL_createTime,SQL_creatorId,SQL_description</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="false">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_password}&quot;,&quot;${Json_user_mobile}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;,&quot;${Json_user_avatar}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;${SQL_user_password_1}&quot;,&quot;${SQL_user_mobile_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;,&quot;${SQL_user_avatar_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_groupList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_id_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_name_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_tag_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_tag_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

//for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_createTime_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_creatorId_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_creatorId_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果(查询用户是否超级管理员)" enabled="false">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">select a.username,c.name
from t_user a left join t_user_role b on a.id = b.user_id left join t_role c on b.role_id = c.id 
where a.username = &apos;${username}&apos; and c.name = &apos;平台管理员&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL0_username,SQL0_name</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器(如果为管理员时查询所有团队)" enabled="false">
              <stringProp name="IfController.condition">${SQL0_username_#}  &gt; 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器(如果不为管理员)" enabled="false">
              <stringProp name="IfController.condition">${SQL0_username_#}  == 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询用户所属团队]-通用模块：异常值入参，检查接口返回预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1430913781">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="1685720944">${username}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/group/queryByUser</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【查询权限配置】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询权限配置]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1321148966">exclude</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-925564151">
                  <stringProp name="235936698">${exclude}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                </collectionProp>
                <collectionProp name="-1143501581">
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-2108168743">
                  <stringProp name="-876186816">true时，采用排除方式获取被排除的权限</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="exclude" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${exclude}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">exclude</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/user/roles/permissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="false">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.spaceList.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_spaceList_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_spaceList_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_spaceList_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].description&quot;);
    		vars.put(&quot;Json_spaceList_description_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].spaceType&quot;);
    		vars.put(&quot;Json_spaceList_spaceType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].isDefault&quot;);
    		vars.put(&quot;Json_spaceList_isDefault_&quot;+i,str);    		
 		
    	}
    	
//	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
//    	vars.put(&quot;Json_user_id&quot;,str);
//	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
//    	vars.put(&quot;Json_user_username&quot;,str);
  	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="2331">ID</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="408121590">
                    <stringProp name="36984427">${Id}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select b.id,b.name,b.description,b.`type`,case b.is_default when 1 then &apos;true&apos; else &apos;false&apos; end
from t_group_space a join t_space b on a.space_id = b.id
where a.group_id = ${ID}
order by b.sort asc</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_id,SQL_name,SQL_description,SQL_type,SQL_is_default</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_spaceList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_description_&quot; + i);
	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_spaceType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_type_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_isDefault_&quot; + i);
	String str_sql = vars.get(&quot;SQL_is_default_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询权限配置]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1321148966">exclude</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1745576888">
                  <stringProp name="235936698">${exclude}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-1088785594">
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-928696544">
                  <stringProp name="-876186816">true时，采用排除方式获取被排除的权限</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="exclude" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${exclude}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">exclude</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/user/roles/permissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询权限配置]-通用模块：错误入参，检查返回失败，出现预期错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1321148966">exclude</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-150793405">
                  <stringProp name="235936698">${exclude}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="-1088785594">
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-928696544">
                  <stringProp name="-876186816">true时，采用排除方式获取被排除的权限</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="exclude" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${exclude}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">exclude</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/user/roles/permissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
                <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;${code_err}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【根据团队查询空间】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[根据团队查询空间]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="964717590">
                  <stringProp name="36984427">${Id}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;id&quot;:${Id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/space/querySpaceByGroupId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.spaceList.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_spaceList_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_spaceList_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_spaceList_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].description&quot;);
    		vars.put(&quot;Json_spaceList_description_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].spaceType&quot;);
    		vars.put(&quot;Json_spaceList_spaceType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.spaceList[&quot;+ i +&quot;].isDefault&quot;);
    		vars.put(&quot;Json_spaceList_isDefault_&quot;+i,str);    		
 		
    	}
    	
//	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
//    	vars.put(&quot;Json_user_id&quot;,str);
//	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
//    	vars.put(&quot;Json_user_username&quot;,str);
  	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="2331">ID</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="408121590">
                    <stringProp name="36984427">${Id}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select b.id,b.name,b.description,b.`type`,case b.is_default when 1 then &apos;true&apos; else &apos;false&apos; end
from t_group_space a join t_space b on a.space_id = b.id
where a.group_id = ${ID}
order by b.sort asc</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_id,SQL_name,SQL_description,SQL_type,SQL_is_default</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_spaceList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_description_&quot; + i);
	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_spaceType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_type_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_spaceList_isDefault_&quot; + i);
	String str_sql = vars.get(&quot;SQL_is_default_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="214768715">
                  <stringProp name="36984427">${Id}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;id&quot;:${Id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/space/querySpaceByGroupId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------用户管理模块（有用）-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【用户新增】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[创建用户]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1503853975">
                  <stringProp name="717739512">${username2}</stringProp>
                  <stringProp name="198684516">${mobile}</stringProp>
                  <stringProp name="-1194332168">${email}</stringProp>
                  <stringProp name="-337466786">${password1}</stringProp>
                  <stringProp name="374706380">${is_admin}</stringProp>
                  <stringProp name="518549207">${is_mobile_power}</stringProp>
                  <stringProp name="-580067138">${record_auth}</stringProp>
                  <stringProp name="-1723478677">${one_click_shout}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户新增" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;username&quot;,&quot;${username2}&quot;);
        map.put(&quot;mobile&quot;,&quot;${mobile}&quot;);
        map.put(&quot;email&quot;,&quot;${email}&quot;);
        map.put(&quot;password&quot;,&quot;${password1}&quot;);
        map.put(&quot;is_admin&quot;,&quot;${is_admin}&quot;);
        map.put(&quot;record_auth&quot;,&quot;${record_auth}&quot;);
        map.put(&quot;one_click_shout&quot;,&quot;${one_click_shout}&quot;);
        map.put(&quot;is_mobile_power&quot;,&quot;${is_mobile_power}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1503853975">
                  <stringProp name="717739512">${username2}</stringProp>
                  <stringProp name="198684516">${mobile}</stringProp>
                  <stringProp name="-1194332168">${email}</stringProp>
                  <stringProp name="-337466786">${password1}</stringProp>
                  <stringProp name="374706380">${is_admin}</stringProp>
                  <stringProp name="518549207">${is_mobile_power}</stringProp>
                  <stringProp name="-580067138">${record_auth}</stringProp>
                  <stringProp name="-1723478677">${one_click_shout}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户新增" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;username&quot;,&quot;${username2}&quot;);
        map.put(&quot;mobile&quot;,&quot;${mobile}&quot;);
        map.put(&quot;email&quot;,&quot;${email}&quot;);
        map.put(&quot;password&quot;,&quot;${password1}&quot;);
        map.put(&quot;is_admin&quot;,&quot;${is_admin}&quot;);
        map.put(&quot;record_auth&quot;,&quot;${record_auth}&quot;);
        map.put(&quot;one_click_shout&quot;,&quot;${one_click_shout}&quot;);
        map.put(&quot;is_mobile_power&quot;,&quot;${is_mobile_power}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1503853975">
                  <stringProp name="717739512">${username2}</stringProp>
                  <stringProp name="198684516">${mobile}</stringProp>
                  <stringProp name="-1194332168">${email}</stringProp>
                  <stringProp name="-337466786">${password1}</stringProp>
                  <stringProp name="374706380">${is_admin}</stringProp>
                  <stringProp name="518549207">${is_mobile_power}</stringProp>
                  <stringProp name="-580067138">${record_auth}</stringProp>
                  <stringProp name="-1723478677">${one_click_shout}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户新增" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;username&quot;,&quot;${username2}&quot;);
        map.put(&quot;mobile&quot;,&quot;${mobile}&quot;);
        map.put(&quot;email&quot;,&quot;${email}&quot;);
        map.put(&quot;password&quot;,&quot;${password1}&quot;);
        map.put(&quot;is_admin&quot;,&quot;${is_admin}&quot;);
        map.put(&quot;record_auth&quot;,&quot;${record_auth}&quot;);
        map.put(&quot;one_click_shout&quot;,&quot;${one_click_shout}&quot;);
        map.put(&quot;is_mobile_power&quot;,&quot;${is_mobile_power}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
                <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;${code_err}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【用户删除】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[用户删除]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1933425930">
                  <stringProp name="1646417966">${userCode}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户删除" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户删除信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;userCode&quot;,&quot;${userCode}&quot;);
        //map.put(&quot;userCode&quot;,&quot;${OUT_userCode}&quot;);
       
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;用户删除json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;用户删除json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2061413474">用户删除成功</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1037712514">
                  <stringProp name="1646417966">${userCode}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="24903448">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户删除" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户删除信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;userCode&quot;,&quot;${userCode}&quot;);
        //map.put(&quot;userCode&quot;,&quot;${OUT_userCode}&quot;);
       
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;用户删除json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;用户删除json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1360884489">
                  <stringProp name="1646417966">${userCode}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="24903448">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户删除" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户删除信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;userCode&quot;,&quot;${userCode}&quot;);
        //map.put(&quot;userCode&quot;,&quot;${OUT_userCode}&quot;);
       
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;用户删除json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;用户删除json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-867653613">code_err</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【当前登录用户信息】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[当前登录用户信息]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1827298422">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="当前登录用户信息" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${username}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="mobile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">18950295813</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mobile</stringProp>
                  </elementProp>
                  <elementProp name="email" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/userInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取当前用户登录信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[当前登录用户信息]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1184970731">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="当前登录用户信息" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${username}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="mobile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">18950295813</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mobile</stringProp>
                  </elementProp>
                  <elementProp name="email" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/userInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取当前用户登录信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[当前登录用户信息]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-711399562">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="当前登录用户信息" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${username}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                  </elementProp>
                  <elementProp name="mobile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">18950295813</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mobile</stringProp>
                  </elementProp>
                  <elementProp name="email" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">chenyulan@ffcs.cn</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">email</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/user/userInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取当前用户登录信息json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------告警模块（有用）-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取告警统计信息】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取告警统计]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1450936061">
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取告警统计信息" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getCount</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-告警统计json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取告警统计]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1892327868">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取告警统计信息" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getCount</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-告警统计json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取告警统计]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="506269135">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取告警统计信息" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getCount</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-告警统计json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【告警列表】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[告警列表]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1892327868">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="告警列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getAlarmList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-告警列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[告警列表]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1892327868">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="告警列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getAlarmList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-告警列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[告警列表]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="506269135">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="告警列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getAlarmList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-告警列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------设备模块（有用）-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取设备列表】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取设备列表]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="123654144">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="961592241">${device_type}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                </collectionProp>
                <collectionProp name="1226916004">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                  <elementProp name="XDEBUG_SESSION_START" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">1446</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">XDEBUG_SESSION_START</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/list</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取设备列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-88394335">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="961592241">${device_type}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-620284491">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                  <elementProp name="XDEBUG_SESSION_START" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">1446</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">XDEBUG_SESSION_START</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/list</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取设备列表]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1984764628">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="961592241">${device_type}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="-620284491">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                  <elementProp name="XDEBUG_SESSION_START" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">1446</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">XDEBUG_SESSION_START</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/list</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取设备详情接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取设备详情接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-266368154">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                </collectionProp>
                <collectionProp name="-1078967327">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备详情接口【引用OUT_devic_id作为入参】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/61611</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备详情json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       // map.put(&quot;id&quot;,&quot;${OUT_device_id}&quot;);
        map.put(&quot;id&quot;,&quot;${id}&quot;);
        //map.put(&quot;id&quot;,&quot;${deviceId_g1}&quot;);
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;设备详情json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;设备详情json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//vars.put(&quot;code1&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取设备详情接口]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="705816315">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备详情接口【引用OUT_devic_id作为入参】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/61611</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备详情json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${OUT_device_id}&quot;);
        //map.put(&quot;id&quot;,&quot;${deviceId_g1}&quot;);
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;设备详情json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;设备详情json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//vars.put(&quot;code1&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取设备详情接口]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1190553978">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取设备详情接口【引用OUT_devic_id作为入参】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/61611</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备详情json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${OUT_device_id}&quot;);
        //map.put(&quot;id&quot;,&quot;${deviceId_g1}&quot;);
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;设备详情json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;设备详情json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);
//vars.put(&quot;code1&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【设备类型统计列表接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[设备类型统计列表接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-582859479">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                </collectionProp>
                <collectionProp name="315942253">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设备类型统计接口" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/statistics</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备类型统计json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
         map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[设备类型统计列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-316164118">mesage_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1226848362">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="-191454052">${mesage_err}</stringProp>
                </collectionProp>
                <collectionProp name="1204300300">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设备类型统计接口" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/statistics</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备类型统计json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-191454052">${mesage_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[设备类型统计列表接口]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1883116835">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="1204300300">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设备类型统计接口" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/device/statistics</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取设备类型统计json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取告警统计json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取告警统计json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------speaker模块（有用）-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【在播列表接口接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[在播列表接口接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="2036370398">accessToken3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1012572673">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="在播列表接口【获取响应体中的id值，输出{OUT_play_id}】--（必须用29038账号创建播放任务才能查询到。因为登录用的是29038账号）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/speakerList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取在播列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      //  map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       // map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      //  map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="(可以成执行）BeanShell Assertion-断言检查：BeanShell代码方式校验获取的数据是否成功" enabled="false">
                <stringProp name="BeanShellAssertion.query">//import org.json.*;
import org.json.JSONObject;
//import com.alibaba.fastjson.JSONObject;
String response_data = prev.getResponseDataAsString();
 //日志打印获取请求的返回值 
 log.info(response_data); 
 //将 String 类型的返回值构造成 JSONObject 对象 
 JSONObject data_obj = new JSONObject(response_data); 
 //获取作为下一个请求 post 的参数值 Province(两种方式)
 //String Provincelist_str = data_obj.get(&quot;Province&quot;).toString(); 
 ////JSONArray Provincelist_str = data_obj.getJSONArray(&quot;Province&quot;); 
 //log.info(Provincelist_str); 
 //获取 Province 数组的长度 
 /*
 int len = Provincelist_str.length(); 
 String strlen = Integer.toString(len); 
 vars.put(&quot;MessageNum&quot;,strlen); 
 log.info(strlen);

*/
JSONObject data_obj=new JSONObject(response_data);
	String result1 = data_obj.get(&quot;code&quot;).toString();

	log.info(&quot;结果码：&quot;+result1);
	//if(result1.contains(&quot;200&quot;)) {
		if(result1.equals(&quot;200&quot;)) {
		  Failure = false; //设置结果成功
		//IsSuccess = false; // 判断失败
         // ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;  
		//log.info(&quot;断言成功&quot;);
		}else{ 
               Failure = true; //设置结果为失败
		     log.info(result1); //打印调试信息
		     FailureMessage = response_data; //自定义失败信息，在查看结果树中可以显示出错误信息。
			
	//IsSuccess = true; // 判断成功
	//Failure = false;
	//FailureMessage = &quot;断言失败&quot;;
		}
/*
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}
*/

 /*
 
 int i = 0; 
 for(;i &lt; len;++i) {
	 //获取 data[ i ] 数组对象 
	 JSONObject jsonTemp = (JSONObject)Provincelist_str.getJSONObject(i); 
	 switch(i) {
		 case 0: //两种提取参数的写法 
		 String NameItems = jsonTemp.getString(&quot;Name&quot;); 
		 // String NameItems = jsonTemp.get(&quot;Name&quot;).toString(); 
		 // 两种打印参数的方法 
		 // vars.put(&quot;Name_1&quot;, jsonTemp.getString(&quot;Name&quot;)); 
		 vars.put(&quot;Name_1&quot;, NameItems); 
		 log.info(NameItems);
		 }
		 } 

		 */</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[在播列表接口接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="2036370398">accessToken3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1012572673">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="在播列表接口【获取响应体中的id值，输出{OUT_play_id}】--（必须用29038账号创建播放任务才能查询到。因为登录用的是29038账号）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/speakerList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取在播列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      //  map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       // map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      //  map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="(可以成执行）BeanShell Assertion-断言检查：BeanShell代码方式校验获取的数据是否成功" enabled="false">
                <stringProp name="BeanShellAssertion.query">//import org.json.*;
import org.json.JSONObject;
//import com.alibaba.fastjson.JSONObject;
String response_data = prev.getResponseDataAsString();
 //日志打印获取请求的返回值 
 log.info(response_data); 
 //将 String 类型的返回值构造成 JSONObject 对象 
 JSONObject data_obj = new JSONObject(response_data); 
 //获取作为下一个请求 post 的参数值 Province(两种方式)
 //String Provincelist_str = data_obj.get(&quot;Province&quot;).toString(); 
 ////JSONArray Provincelist_str = data_obj.getJSONArray(&quot;Province&quot;); 
 //log.info(Provincelist_str); 
 //获取 Province 数组的长度 
 /*
 int len = Provincelist_str.length(); 
 String strlen = Integer.toString(len); 
 vars.put(&quot;MessageNum&quot;,strlen); 
 log.info(strlen);

*/
JSONObject data_obj=new JSONObject(response_data);
	String result1 = data_obj.get(&quot;code&quot;).toString();

	log.info(&quot;结果码：&quot;+result1);
	//if(result1.contains(&quot;200&quot;)) {
		if(result1.equals(&quot;200&quot;)) {
		  Failure = false; //设置结果成功
		//IsSuccess = false; // 判断失败
         // ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;  
		//log.info(&quot;断言成功&quot;);
		}else{ 
               Failure = true; //设置结果为失败
		     log.info(result1); //打印调试信息
		     FailureMessage = response_data; //自定义失败信息，在查看结果树中可以显示出错误信息。
			
	//IsSuccess = true; // 判断成功
	//Failure = false;
	//FailureMessage = &quot;断言失败&quot;;
		}
/*
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}
*/

 /*
 
 int i = 0; 
 for(;i &lt; len;++i) {
	 //获取 data[ i ] 数组对象 
	 JSONObject jsonTemp = (JSONObject)Provincelist_str.getJSONObject(i); 
	 switch(i) {
		 case 0: //两种提取参数的写法 
		 String NameItems = jsonTemp.getString(&quot;Name&quot;); 
		 // String NameItems = jsonTemp.get(&quot;Name&quot;).toString(); 
		 // 两种打印参数的方法 
		 // vars.put(&quot;Name_1&quot;, jsonTemp.getString(&quot;Name&quot;)); 
		 vars.put(&quot;Name_1&quot;, NameItems); 
		 log.info(NameItems);
		 }
		 } 

		 */</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[在播列表接口接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="2036370398">accessToken3</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-883797620">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="在播列表接口【获取响应体中的id值，输出{OUT_play_id}】--（必须用29038账号创建播放任务才能查询到。因为登录用的是29038账号）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/speakerList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取在播列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      //  map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       // map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      //  map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="(可以成执行）BeanShell Assertion-断言检查：BeanShell代码方式校验获取的数据是否成功" enabled="false">
                <stringProp name="BeanShellAssertion.query">//import org.json.*;
import org.json.JSONObject;
//import com.alibaba.fastjson.JSONObject;
String response_data = prev.getResponseDataAsString();
 //日志打印获取请求的返回值 
 log.info(response_data); 
 //将 String 类型的返回值构造成 JSONObject 对象 
 JSONObject data_obj = new JSONObject(response_data); 
 //获取作为下一个请求 post 的参数值 Province(两种方式)
 //String Provincelist_str = data_obj.get(&quot;Province&quot;).toString(); 
 ////JSONArray Provincelist_str = data_obj.getJSONArray(&quot;Province&quot;); 
 //log.info(Provincelist_str); 
 //获取 Province 数组的长度 
 /*
 int len = Provincelist_str.length(); 
 String strlen = Integer.toString(len); 
 vars.put(&quot;MessageNum&quot;,strlen); 
 log.info(strlen);

*/
JSONObject data_obj=new JSONObject(response_data);
	String result1 = data_obj.get(&quot;code&quot;).toString();

	log.info(&quot;结果码：&quot;+result1);
	//if(result1.contains(&quot;200&quot;)) {
		if(result1.equals(&quot;200&quot;)) {
		  Failure = false; //设置结果成功
		//IsSuccess = false; // 判断失败
         // ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;  
		//log.info(&quot;断言成功&quot;);
		}else{ 
               Failure = true; //设置结果为失败
		     log.info(result1); //打印调试信息
		     FailureMessage = response_data; //自定义失败信息，在查看结果树中可以显示出错误信息。
			
	//IsSuccess = true; // 判断成功
	//Failure = false;
	//FailureMessage = &quot;断言失败&quot;;
		}
/*
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}
*/

 /*
 
 int i = 0; 
 for(;i &lt; len;++i) {
	 //获取 data[ i ] 数组对象 
	 JSONObject jsonTemp = (JSONObject)Provincelist_str.getJSONObject(i); 
	 switch(i) {
		 case 0: //两种提取参数的写法 
		 String NameItems = jsonTemp.getString(&quot;Name&quot;); 
		 // String NameItems = jsonTemp.get(&quot;Name&quot;).toString(); 
		 // 两种打印参数的方法 
		 // vars.put(&quot;Name_1&quot;, jsonTemp.getString(&quot;Name&quot;)); 
		 vars.put(&quot;Name_1&quot;, NameItems); 
		 log.info(NameItems);
		 }
		 } 

		 */</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【任务详情接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[任务详情接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1256388">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                </collectionProp>
                <collectionProp name="1541156879">
                  <stringProp name="-1969635942">可以201202163147533310</stringProp>
                  <stringProp name="3355">id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="任务详情接口【任务id预先在用户参数表设置好】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/speakerInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取任务详情接口json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
        map.put(&quot;start_time&quot;,&quot;${start_time}&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_speaker_info&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1741720272">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
                <collectionProp name="-1471440356">
                  <stringProp name="686294">可以</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="任务详情接口【任务id预先在用户参数表设置好】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/speakerInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取任务详情接口json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
        map.put(&quot;start_time&quot;,&quot;${start_time}&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
       // map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_speaker_info&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-399657211">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
                <collectionProp name="957326568">
                  <stringProp name="-2120777266">可以 201202163147533310</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="任务详情接口【任务id预先在用户参数表设置好】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/speakerInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取任务详情接口json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
        map.put(&quot;start_time&quot;,&quot;${start_time}&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_speaker_info&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取分组列表】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取分组列表]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1935609503">
                  <stringProp name="1045485790">${isTree}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="777169004">${res_message}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取分组列表【输出{group_id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getGroupList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一分组列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;isTree&quot;,&quot;${isTree}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取分组列表json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取分组列表json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="799375">成功</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取分组列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="198683994">
                  <stringProp name="1045485790">${isTree}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取分组列表【输出{group_id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getGroupList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一分组列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;isTree&quot;,&quot;${isTree}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取分组列表json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取分组列表json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取分组列表]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1697686299">
                  <stringProp name="1045485790">${isTree}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取分组列表【输出{group_id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getGroupList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一分组列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;isTree&quot;,&quot;${isTree}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;获取分组列表json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;获取分组列表json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【播放任务列表接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[播放任务列表接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1398752872">
                  <stringProp name="1222623756">${type}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="播放任务列表接口" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code_speaker_list}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getPolicyList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login   对应数据库表：dc_speaker_policy  ${code_speaker_list}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取播放任务列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_speaker_list&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="784960569">
                  <stringProp name="1222623756">${type}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="播放任务列表接口" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code_speaker_list}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getPolicyList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login   对应数据库表：dc_speaker_policy  ${code_speaker_list}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取播放任务列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_speaker_list&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1111409724">
                  <stringProp name="1222623756">${type}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="播放任务列表接口" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${code_speaker_list}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getPolicyList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login   对应数据库表：dc_speaker_policy  ${code_speaker_list}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取播放任务列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;keyword&quot;,&quot;${keyword}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_speaker_list&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【删除任务】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[删除任务]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-996691908">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
                <collectionProp name="-1049602769">
                  <stringProp name="691625"> 使用</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除任务【参数ID引用了新增应急任务接口获取响应体中的ID值${OUT_policy-id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/delPolicy</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取删除任务json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
       // map.put(&quot;id&quot;,&quot;${OUT_policy_id}&quot;);
         map.put(&quot;id&quot;,&quot;${id}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[删除任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-459383579">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="1822077578">
                  <stringProp name="691625"> 使用</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除任务【参数ID引用了新增应急任务接口获取响应体中的ID值${OUT_policy-id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/delPolicy</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取删除任务json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
       // map.put(&quot;id&quot;,&quot;${OUT_policy_id}&quot;);
        map.put(&quot;id&quot;,&quot;${id}&quot;);
    

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[删除任务]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1658903810">
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="1011178824">
                  <stringProp name="691625"> 使用</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除任务【参数ID引用了新增应急任务接口获取响应体中的ID值${OUT_policy-id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/delPolicy</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取删除任务json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
        //map.put(&quot;id&quot;,&quot;${OUT_policy_id}&quot;);
      map.put(&quot;id&quot;,&quot;${id}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取媒体文件列表】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取媒体文件列表]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1450936061">
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取媒体文件列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getMediaList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取媒体文件列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
     
      
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取媒体文件列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1892327868">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取媒体文件列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getMediaList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取媒体文件列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
     
      
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取媒体文件列表]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1696704680">
                  <stringProp name="1388029471">${timestamp</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取媒体文件列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getMediaList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取媒体文件列表json加密输出code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//

        Map map=new HashMap();
     
      
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【新增日常任务】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[新增日常任务]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-576725448">
                  <stringProp name="1222623756">${type}</stringProp>
                  <stringProp name="-1240445970">${cycle}</stringProp>
                  <stringProp name="1137663747">${begin_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1147318712">${day}</stringProp>
                  <stringProp name="-1731213129">${assign}</stringProp>
                  <stringProp name="-394123284">${volume}</stringProp>
                  <stringProp name="1216364763">${name}</stringProp>
                  <stringProp name="-1000694512">${level}</stringProp>
                  <stringProp name="1147593868">${mid}</stringProp>
                  <stringProp name="-1132027531">${group}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="1914876972">${weekday}</stringProp>
                  <stringProp name="-1462198245">${describe}</stringProp>
                  <stringProp name="-561370693">${showinfo}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增日常任务(需要获取媒体管理列表接口的media_ID，和媒体分组列表的group_id）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/addPolicy</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一新增应急任务json加密输出code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//




        Map map=new HashMap();
        map.put(&quot;name&quot;,&quot;${name}&quot;);
        map.put(&quot;level&quot;,&quot;${level}&quot;);
       // map.put(&quot;mid&quot;,&quot;${media_id}&quot;);
       // map.put(&quot;group&quot;,&quot;${group_id}&quot;);

         map.put(&quot;mid&quot;,&quot;${mid}&quot;);
        map.put(&quot;group&quot;,&quot;${group}&quot;);
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;volume&quot;,&quot;${volume}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
        map.put(&quot;describe&quot;,&quot;${describe}&quot;);
        map.put(&quot;showinfo&quot;,&quot;${showinfo}&quot;);
        map.put(&quot;assign&quot;,&quot;${assign}&quot;);
        map.put(&quot;weekday&quot;,&quot;${weekday}&quot;);
        map.put(&quot;cycle&quot;,&quot;${cycle}&quot;);
        map.put(&quot;begin_time&quot;,&quot;${begin_time}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
map.put(&quot;day&quot;,&quot;${day}&quot;);

/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_addPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="799375">成功</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-576725448">
                  <stringProp name="1222623756">${type}</stringProp>
                  <stringProp name="-1240445970">${cycle}</stringProp>
                  <stringProp name="1137663747">${begin_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1147318712">${day}</stringProp>
                  <stringProp name="-1731213129">${assign}</stringProp>
                  <stringProp name="-394123284">${volume}</stringProp>
                  <stringProp name="1216364763">${name}</stringProp>
                  <stringProp name="-1000694512">${level}</stringProp>
                  <stringProp name="1147593868">${mid}</stringProp>
                  <stringProp name="-1132027531">${group}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="1914876972">${weekday}</stringProp>
                  <stringProp name="-1462198245">${describe}</stringProp>
                  <stringProp name="-561370693">${showinfo}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增日常任务(需要获取媒体管理列表接口的media_ID，和媒体分组列表的group_id）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/addPolicy</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一新增应急任务json加密输出code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//




        Map map=new HashMap();
        map.put(&quot;name&quot;,&quot;${name}&quot;);
        map.put(&quot;level&quot;,&quot;${level}&quot;);
       // map.put(&quot;mid&quot;,&quot;${media_id}&quot;);
       // map.put(&quot;group&quot;,&quot;${group_id}&quot;);

         map.put(&quot;mid&quot;,&quot;${mid}&quot;);
        map.put(&quot;group&quot;,&quot;${group}&quot;);
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;volume&quot;,&quot;${volume}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
        map.put(&quot;describe&quot;,&quot;${describe}&quot;);
        map.put(&quot;showinfo&quot;,&quot;${showinfo}&quot;);
        map.put(&quot;assign&quot;,&quot;${assign}&quot;);
        map.put(&quot;weekday&quot;,&quot;${weekday}&quot;);
        map.put(&quot;cycle&quot;,&quot;${cycle}&quot;);
        map.put(&quot;begin_time&quot;,&quot;${begin_time}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
map.put(&quot;day&quot;,&quot;${day}&quot;);

/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_addPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1821871555">
                  <stringProp name="1222623756">${type}</stringProp>
                  <stringProp name="-1240445970">${cycle}</stringProp>
                  <stringProp name="1137663747">${begin_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1147318712">${day}</stringProp>
                  <stringProp name="-1731213129">${assign}</stringProp>
                  <stringProp name="-394123284">${volume}</stringProp>
                  <stringProp name="1216364763">${name}</stringProp>
                  <stringProp name="-1000694512">${level}</stringProp>
                  <stringProp name="1147593868">${mid}</stringProp>
                  <stringProp name="-1132027531">${group}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="1914876972">${weekday}</stringProp>
                  <stringProp name="-1462198245">${describe}</stringProp>
                  <stringProp name="-561370693">${showinfo}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增日常任务(需要获取媒体管理列表接口的media_ID，和媒体分组列表的group_id）" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/addPolicy</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一新增应急任务json加密输出code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//




        Map map=new HashMap();
        map.put(&quot;name&quot;,&quot;${name}&quot;);
        map.put(&quot;level&quot;,&quot;${level}&quot;);
       // map.put(&quot;mid&quot;,&quot;${media_id}&quot;);
       // map.put(&quot;group&quot;,&quot;${group_id}&quot;);

         map.put(&quot;mid&quot;,&quot;${mid}&quot;);
        map.put(&quot;group&quot;,&quot;${group}&quot;);
        map.put(&quot;type&quot;,&quot;${type}&quot;);
        map.put(&quot;volume&quot;,&quot;${volume}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
        map.put(&quot;describe&quot;,&quot;${describe}&quot;);
        map.put(&quot;showinfo&quot;,&quot;${showinfo}&quot;);
        map.put(&quot;assign&quot;,&quot;${assign}&quot;);
        map.put(&quot;weekday&quot;,&quot;${weekday}&quot;);
        map.put(&quot;cycle&quot;,&quot;${cycle}&quot;);
        map.put(&quot;begin_time&quot;,&quot;${begin_time}&quot;);
        map.put(&quot;end_time&quot;,&quot;${end_time}&quot;);
        map.put(&quot;day&quot;,&quot;${day}&quot;);

/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_addPolicy&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【播放中的任务进行停播】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[播放中的任务进行停播]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-266368154">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="播放中的任务进行停播【先调用在播任务列表获取任务${OUT_play_id}，在进行播放任务暂停操作】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/stopplay</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-任务停播code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      // map.put(&quot;id&quot;,&quot;${OUT_play_id}&quot;);
        map.put(&quot;id&quot;,&quot;${id}&quot;);
       //  map.put(&quot;id&quot;,&quot;${OUT_play_id}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;停播任务json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;停播任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="705816315">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="播放中的任务进行停播【先调用在播任务列表获取任务${OUT_play_id}，在进行播放任务暂停操作】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/stopplay</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-任务停播code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;id&quot;,&quot;${id}&quot;);
      // map.put(&quot;id&quot;,&quot;${OUT_play_id}&quot;);
       //  map.put(&quot;id&quot;,&quot;${OUT_play_id}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;停播任务json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;停播任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="513728212">
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="播放中的任务进行停播【先调用在播任务列表获取任务${OUT_play_id}，在进行播放任务暂停操作】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/stopplay</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-任务停播code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       //map.put(&quot;id&quot;,&quot;${OUT_play_id}&quot;);
       map.put(&quot;id&quot;,&quot;${id}&quot;);
       //  map.put(&quot;id&quot;,&quot;${OUT_play_id}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;停播任务json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;停播任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【启用禁用任务】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[启用禁用任务]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1706710087">
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="777169004">${res_message}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  ${__time(/1000,}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用禁用日常任务" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/dailypolicystatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-启用禁用日常任务code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      // map.put(&quot;id&quot;,&quot;${OUT_policy_id}&quot;);
       map.put(&quot;id&quot;,&quot;${id}&quot;);
     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="777169004">${res_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-453963712">
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  ${__time(/1000,}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用禁用日常任务" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/dailypolicystatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-启用禁用日常任务code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      // map.put(&quot;id&quot;,&quot;${OUT_policy_id}&quot;);
       map.put(&quot;id&quot;,&quot;${id}&quot;);
     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1944633291">
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  ${__time(/1000,}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用禁用日常任务" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/dailypolicystatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-启用禁用日常任务code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      // map.put(&quot;id&quot;,&quot;${OUT_policy_id}&quot;);
       map.put(&quot;id&quot;,&quot;${id}&quot;);
     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【获取一键喊话地址】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取一键喊话地址]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-708738348">
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  ${__time(/1000,}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取一键喊话地址【先调用分组列表接口获取任务group_id，在获取一键喊话地址】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getBrocastUrl</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取一键喊话地址code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;group_id&quot;,&quot;${group_id}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="257740109">code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取一键喊话地址]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-122757811">
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取一键喊话地址【先调用分组列表接口获取任务group_id，在获取一键喊话地址】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getBrocastUrl</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取一键喊话地址code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;group_id&quot;,&quot;${group_id}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[获取一键喊话地址]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2019128104">
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取一键喊话地址【先调用分组列表接口获取任务group_id，在获取一键喊话地址】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/getBrocastUrl</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一获取一键喊话地址code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;group_id&quot;,&quot;${group_id}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);


//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【停止一键喊话任务】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[停止一键喊话任务]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1419281825">
                  <stringProp name="1396331762">${notice_id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  ${__time(/1000,}  ${timestamp}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="停止一键喊话任务【先调新增应急任务获取${OUT_policy_id}，作为键喊话地址接口的notice_id】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/stopAppBrocast</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一键喊话任务code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      map.put(&quot;notice_id&quot;,&quot;${notice_id}&quot;);

     // map.put(&quot;notice_id&quot;,&quot;${OUT_policy_id}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
      //  map.put(&quot;timestamp&quot;,&quot;${__time(/1000,)}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;停止一键喊话json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;停止一键喊话json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="364932288">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:{&quot;info&quot;:&quot;停止一键喊话成功!&quot;}}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[停止一键喊话任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-674769118">
                  <stringProp name="1396331762">${notice_id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="停止一键喊话任务【先调新增应急任务获取${OUT_policy-id}，作为键喊话地址接口的notice_id】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/stopAppBrocast</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一键喊话任务code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      map.put(&quot;notice_id&quot;,&quot;${notice_id}&quot;);

     // map.put(&quot;notice_id&quot;,&quot;${OUT_policy_id}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
      //  map.put(&quot;timestamp&quot;,&quot;${__time(/1000,)}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;停止一键喊话json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;停止一键喊话json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[停止一键喊话任务]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1723827885">
                  <stringProp name="1396331762">${notice_id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="停止一键喊话任务【先调新增应急任务获取${OUT_policy-id}，作为键喊话地址接口的notice_id】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/stopAppBrocast</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-一键喊话任务code（3des加密采用utf-8)" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;notice_id&quot;,&quot;${notice_id}&quot;);

     //  map.put(&quot;id&quot;,&quot;${OUT_policy-id1}&quot;);
       // map.put(&quot;status&quot;,&quot;${status}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);

        
/*


//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;启用禁用json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;启用禁用任务json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_stopplay&quot;,encode);

 
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------媒体模块（有用）-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【新增媒体接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[新增媒体接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="94167579">
                  <stringProp name="1045117231">${isText}</stringProp>
                  <stringProp name="1619923769">${speakerRecFile}</stringProp>
                  <stringProp name="1222036089">${text}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="1213833458">${kind}</stringProp>
                  <stringProp name="-705557214">${voice}</stringProp>
                  <stringProp name="-790638419">${speed}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增媒体【输出媒体{id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaUploadRecOrText</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login  ${code_media}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增媒体json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;isText&quot;,&quot;${isText}&quot;);
        map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;kind&quot;,&quot;${kind}&quot;);
        map.put(&quot;text&quot;,&quot;${text}&quot;);
        map.put(&quot;voice&quot;,&quot;${voice}&quot;);
        map.put(&quot;speed&quot;,&quot;${speed}&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_media&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">1000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1002477850">
                  <stringProp name="1045117231">${isText}</stringProp>
                  <stringProp name="1619923769">${speakerRecFile}</stringProp>
                  <stringProp name="1222036089">${text}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="1213833458">${kind}</stringProp>
                  <stringProp name="-705557214">${voice}</stringProp>
                  <stringProp name="-790638419">${speed}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增媒体【输出媒体{id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaUploadRecOrText</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login  ${code_media}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增媒体json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;isText&quot;,&quot;${isText}&quot;);
        map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;kind&quot;,&quot;${kind}&quot;);
        map.put(&quot;text&quot;,&quot;${text}&quot;);
        map.put(&quot;voice&quot;,&quot;${voice}&quot;);
        map.put(&quot;speed&quot;,&quot;${speed}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_media&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1396119153">
                  <stringProp name="1045117231">${isText}</stringProp>
                  <stringProp name="1619923769">${speakerRecFile}</stringProp>
                  <stringProp name="1222036089">${text}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="1213833458">${kind}</stringProp>
                  <stringProp name="-705557214">${voice}</stringProp>
                  <stringProp name="-790638419">${speed}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新增媒体【输出媒体{id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaUploadRecOrText</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login  ${code_media}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取用户新增媒体json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;isText&quot;,&quot;${isText}&quot;);
        map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;kind&quot;,&quot;${kind}&quot;);
        map.put(&quot;text&quot;,&quot;${text}&quot;);
        map.put(&quot;voice&quot;,&quot;${voice}&quot;);
        map.put(&quot;speed&quot;,&quot;${speed}&quot;);
        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_media&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【媒体审核接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体审核接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3059181">code</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1227153899">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="-202680880">${code_check}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体审核" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaAudit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体审核json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
         map.put(&quot;remark&quot;,&quot;${remark}&quot;);
       // map.put(&quot;id&quot;,&quot;8019&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_check&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3059181">code</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1227153899">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="-202680880">${code_check}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体审核" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaAudit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体审核json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
 map.put(&quot;remark&quot;,&quot;${remark}&quot;);
       // map.put(&quot;id&quot;,&quot;8019&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_check&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3059181">code</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1171443104">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="1371298324">${status}</stringProp>
                  <stringProp name="-202680880">${code_check}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体审核" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaAudit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体审核json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
 map.put(&quot;remark&quot;,&quot;${remark}&quot;);
       // map.put(&quot;id&quot;,&quot;8019&quot;);
        map.put(&quot;status&quot;,&quot;${status}&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_check&quot;,encode);

//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【媒体删除接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体删除接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-996691908">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体删除" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaDelete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体删除json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体删除接口]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-459383579">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体删除" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaDelete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体删除json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体删除接口]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1939213424">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="79240766">${timestamp}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体删除" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaDelete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体删除json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;id&quot;,&quot;${id}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【媒体管理列表接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体管理列表接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="378132989">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="-154877">${page_size}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体管理列表【利用媒体管理列表输出{meida_id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体管理列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
        map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
        map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-58980244">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="-154877">${page_size}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体管理列表【利用媒体管理列表输出{meida_id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体管理列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
       map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1283082817">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="-154877">${page_size}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="媒体管理列表【利用媒体管理列表输出{meida_id}】" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取媒体管理列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
         map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
         map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
         map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【待审核媒体列表接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[待审核媒体列表接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-58980244">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="-154877">${page_size}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待审核媒体管理列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaAuditList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取待审核媒体列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
       map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
        map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1647900817">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-58980244">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="-154877">${page_size}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待审核媒体管理列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaAuditList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取待审核媒体列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[待审核媒体列表接口-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-58980244">
                  <stringProp name="1789206715">${timstamp}</stringProp>
                  <stringProp name="1020038656">${media_name}</stringProp>
                  <stringProp name="-154877">${page_size}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待审核媒体管理列表" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${IP}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">${model}/speaker/mediaAuditList</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">http://223.244.227.156:9303/api/device/dataListV2  /dict/iot/ict/login</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="beanshell-获取待审核媒体列表json加密为code" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
//import sun.misc.BASE64Encoder;
//import javax.crypto.Cipher;
//import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;
/*封装json字符串加密导入jar包*/
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


//public class SignUtil {
  //  public static final String DESEDE = &quot;DESede&quot;;

    /**
     * base643des加密函数
     * @param key
     * @param text
     */
  
private static String encryptDes(String ivs, String key, String src) {
	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
     // private static final String code = &quot;gb2312&quot;;
      private static final String code = &quot;utf-8&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new BASE64Encoder().encode(cipher.doFinal(src.getBytes(code)));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    
/**
     * 3DES解密
     */
    private static String decryptDes(String ivs, String key, String src) {
    	
    	 private static final String m = &quot;DESede&quot;;
      private static final String mod = m + &quot;/CBC/pkcs7padding&quot;;
      private static final String code = &quot;gb2312&quot;;
      Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        try {
            // 创建一个DESedeKeySpec对象
            DESedeKeySpec desKey = new DESedeKeySpec(key.getBytes(code));
            // 创建一个密匙工厂
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(m);
            // 将DESKeySpec对象转换成SecretKey对象
            SecretKey secretKey = keyFactory.generateSecret(desKey);
            // Cipher对象实际完成解密操作
            Cipher cipher = Cipher.getInstance(mod);
            // 用密匙初始化Cipher对象
            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(ivs.getBytes(code)));
            // 现在，获取数据并加密
            // 正式执行加密操作
            return new String(cipher.doFinal(new BASE64Decoder().decodeBuffer(src)), code);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

/*将参数封装成为json，便于后续3des加密*/
public static String jmeterMapJson(Map map){
        int i=1;
       String jmeterJson=&quot;{&quot;;
       Set entrySet = map.entrySet();
        Iterator it= entrySet .iterator();
       while(it.hasNext()){

           Map.Entry entry=(Map.Entry)it.next();
           String key=(String) entry.getKey();
           String value=(String)entry.getValue();
           System.out.println(key+&quot;=&quot;+value);
           System.out.println(&quot;length =&quot;+map.size());
           if(i&gt;=map.size()){
               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;;
           }
           else {

               jmeterJson= jmeterJson+&quot;\&quot;&quot;+key+&quot;\&quot;&quot;+&quot;:&quot;+&quot;\&quot;&quot;+value+&quot;\&quot;&quot;+&quot;,&quot;;
               i++;
           }
       }
        jmeterJson=jmeterJson+&quot;}&quot;;
       return jmeterJson;
    }


/*
 * 以下的方式都可以获取10位时间戳，第二个除外。
String timestamp=new java.util.Date().getTime() / 1000;
String timestamp=org.apache.commons.lang.time.DateFormatUtils.format(new java.util.Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;);
String timestamp=System.currentTimeMillis() / 1000;
*/
//从自定义变量中获取时间戳
/*
String timestamp=vars.get(&quot;timestamp&quot;);
log.info(&quot;时间戳为：&quot;+timestamp);
*/
//从自定义变量中，获取各个变量的初始值。
/*
String appId=vars.get(&quot;appId&quot;);
String code=vars.get(&quot;code&quot;);
String username=vars.get(&quot;username&quot;);
String password=vars.get(&quot;password&quot;);
String appsecret=vars.get(&quot;appsecret&quot;);
*/
//
        Map map=new HashMap();
      map.put(&quot;media_name&quot;,&quot;${media_name}&quot;);
       map.put(&quot;page_size&quot;,&quot;${page_size}&quot;);
      map.put(&quot;page&quot;,&quot;${page}&quot;);
     //map.put(&quot;id&quot;,&quot;8018&quot;);

        map.put(&quot;timestamp&quot;,&quot;${timestamp}&quot;);
/*

//生成签名字符串
sign_string = appsecret + timestamp;
log.info(&quot;生成的签名字符串为：&quot;+sign_string);
//将签名字符串进行MD5加密
String sign = org.apache.commons.codec.digest.DigestUtils.md5Hex(sign_string.getBytes(&quot;UTF-8&quot;));
log.info(&quot;签名加密后的字符串为：&quot;+sign);
//将sign的值设置到变量sign中
//sampler.addArgument(&quot;sign&quot;,md5Str);
vars.put(&quot;sign&quot;,sign);

//拼接密码加密的字符串
String string_password=password+sign;
log.info(&quot;String_password：&quot;+string_password);
//对拼接的密码字符串进行base64加密：
String base64_res = new sun.misc.BASE64Encoder().encode(string_password.getBytes());

log.info(&quot;密码加密后为：&quot;+base64_res);
//将加密后的字符串付给变量—_password.
vars.put(&quot;_password&quot;,base64_res);

//param存入json字符串,json字符串key和value都必须使用双引号。，如果是String类型的话。
//String json_param =&quot;{\&apos;username\&apos;: &quot;+username+&quot;,&quot;+&quot;\&apos;password\&apos;: &quot;+base64_res+&quot;,&quot;+&quot;\&apos;sign\&apos;: &quot;+sign+&quot;,&quot;+&quot;\&apos;timestamp\&apos;: &quot;+timestamp+&quot;}&quot;;

String json_param =&quot;{\&quot;username\&quot;: \&quot;&quot;+username+&quot;\&quot;,&quot;+&quot;\&quot;password\&quot;: \&quot;&quot;+base64_res+&quot;\&quot;,&quot;+&quot;\&quot;sign\&quot;: \&quot;&quot;+sign+&quot;\&quot;,&quot;+&quot;\&quot;timestamp\&quot;: \&quot;&quot;+timestamp+&quot;\&quot;}&quot;;
*/
String json_param=jmeterMapJson(map);
log.info(&quot;json：&quot;+json_param);
//将字符进行base643des加密
 String key = vars.get(&quot;appsecret&quot;);
 String iv=&quot;10000005&quot;;
 //加密
 String encode = encryptDes(iv, key, json_param);  
 //String encode=encode(key, json_param);
log.info(&quot;json加密后的字符串为：&quot;+encode);
//vars.put(&quot;code_delete&quot;,encode);
//将code参数添加到Sampler中
sampler.addArgument(&quot;code&quot;,encode);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">appId</stringProp>
                    <stringProp name="Header.value">${appId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">accessToken</stringProp>
                    <stringProp name="Header.value">${accessToken}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">&quot;app_key:{app_key}&quot;  
&quot;Authorization:Bearer {accessToken}&quot;
Content-Type:application/json 
</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------应用管理模块-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【创建应用】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[创建应用]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-912976751">packageType-废弃</stringProp>
                <stringProp name="459361400">buildName-废弃</stringProp>
                <stringProp name="540545547">healthCheckType-废弃</stringProp>
                <stringProp name="-483695195">healthCheck-废弃</stringProp>
                <stringProp name="-1752503215">initialDelaySeconds-废弃</stringProp>
                <stringProp name="-1058236669">rollingUpdate-废弃</stringProp>
                <stringProp name="-1870558629">loadBalance-废弃</stringProp>
                <stringProp name="-179015188">script4RollingUpdate-废弃</stringProp>
                <stringProp name="-2105802259">maxAge4Script-废弃</stringProp>
                <stringProp name="-1550938632">volumes-废弃</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-690447033">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-341087692">${packageType}</stringProp>
                  <stringProp name="-2116347493">${buildName}</stringProp>
                  <stringProp name="33585838">${healthCheckType}</stringProp>
                  <stringProp name="1594552392">${healthCheck}</stringProp>
                  <stringProp name="1960569588">${initialDelaySeconds}</stringProp>
                  <stringProp name="-61888666">${rollingUpdate}</stringProp>
                  <stringProp name="904841854">${loadBalance}</stringProp>
                  <stringProp name="534650753">${script4RollingUpdate}</stringProp>
                  <stringProp name="-1850686256">${maxAge4Script}</stringProp>
                  <stringProp name="667079899">${volumes}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="-854556917">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="813837542">构建类型</stringProp>
                  <stringProp name="-872328806">war使用的编译包名称</stringProp>
                  <stringProp name="-1745707449">健康检查类型</stringProp>
                  <stringProp name="637287831">健康检查</stringProp>
                  <stringProp name="1496928830">健康检查延迟时间</stringProp>
                  <stringProp name="866437070">滚动升级</stringProp>
                  <stringProp name="1112287416">负载均衡</stringProp>
                  <stringProp name="39486938">shell健康检查相关项1</stringProp>
                  <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                  <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                  <stringProp name="733441968">维护者id</stringProp>
                </collectionProp>
                <collectionProp name="332048806">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                  <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1633675141">true,false</stringProp>
                  <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                  <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                  <stringProp name="27081643">默认：30</stringProp>
                  <stringProp name="27082928">默认：[]</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-912976751">packageType-废弃</stringProp>
                <stringProp name="459361400">buildName-废弃</stringProp>
                <stringProp name="540545547">healthCheckType-废弃</stringProp>
                <stringProp name="-483695195">healthCheck-废弃</stringProp>
                <stringProp name="-1752503215">initialDelaySeconds-废弃</stringProp>
                <stringProp name="-1058236669">rollingUpdate-废弃</stringProp>
                <stringProp name="-1870558629">loadBalance-废弃</stringProp>
                <stringProp name="-179015188">script4RollingUpdate-废弃</stringProp>
                <stringProp name="-2105802259">maxAge4Script-废弃</stringProp>
                <stringProp name="-1550938632">volumes-废弃</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1271687628">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-341087692">${packageType}</stringProp>
                  <stringProp name="-2116347493">${buildName}</stringProp>
                  <stringProp name="33585838">${healthCheckType}</stringProp>
                  <stringProp name="1594552392">${healthCheck}</stringProp>
                  <stringProp name="1960569588">${initialDelaySeconds}</stringProp>
                  <stringProp name="-61888666">${rollingUpdate}</stringProp>
                  <stringProp name="904841854">${loadBalance}</stringProp>
                  <stringProp name="534650753">${script4RollingUpdate}</stringProp>
                  <stringProp name="-1850686256">${maxAge4Script}</stringProp>
                  <stringProp name="667079899">${volumes}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="-1345095185">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="813837542">构建类型</stringProp>
                  <stringProp name="-872328806">war使用的编译包名称</stringProp>
                  <stringProp name="-1745707449">健康检查类型</stringProp>
                  <stringProp name="637287831">健康检查</stringProp>
                  <stringProp name="1496928830">健康检查延迟时间</stringProp>
                  <stringProp name="866437070">滚动升级</stringProp>
                  <stringProp name="1112287416">负载均衡</stringProp>
                  <stringProp name="39486938">shell健康检查相关项1</stringProp>
                  <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                  <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-1043528345">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                  <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1633675141">true,false</stringProp>
                  <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                  <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                  <stringProp name="27081643">默认：30</stringProp>
                  <stringProp name="27082928">默认：[]</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
                <stringProp name="-912976751">packageType-废弃</stringProp>
                <stringProp name="459361400">buildName-废弃</stringProp>
                <stringProp name="540545547">healthCheckType-废弃</stringProp>
                <stringProp name="-483695195">healthCheck-废弃</stringProp>
                <stringProp name="-1752503215">initialDelaySeconds-废弃</stringProp>
                <stringProp name="-1058236669">rollingUpdate-废弃</stringProp>
                <stringProp name="-1870558629">loadBalance-废弃</stringProp>
                <stringProp name="-179015188">script4RollingUpdate-废弃</stringProp>
                <stringProp name="-2105802259">maxAge4Script-废弃</stringProp>
                <stringProp name="-1550938632">volumes-废弃</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="703997281">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                  <stringProp name="-341087692">${packageType}</stringProp>
                  <stringProp name="-2116347493">${buildName}</stringProp>
                  <stringProp name="33585838">${healthCheckType}</stringProp>
                  <stringProp name="1594552392">${healthCheck}</stringProp>
                  <stringProp name="1960569588">${initialDelaySeconds}</stringProp>
                  <stringProp name="-61888666">${rollingUpdate}</stringProp>
                  <stringProp name="904841854">${loadBalance}</stringProp>
                  <stringProp name="534650753">${script4RollingUpdate}</stringProp>
                  <stringProp name="-1850686256">${maxAge4Script}</stringProp>
                  <stringProp name="667079899">${volumes}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="1617918985">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1772477488">预期错误码</stringProp>
                  <stringProp name="813837542">构建类型</stringProp>
                  <stringProp name="-872328806">war使用的编译包名称</stringProp>
                  <stringProp name="-1745707449">健康检查类型</stringProp>
                  <stringProp name="637287831">健康检查</stringProp>
                  <stringProp name="1496928830">健康检查延迟时间</stringProp>
                  <stringProp name="866437070">滚动升级</stringProp>
                  <stringProp name="1112287416">负载均衡</stringProp>
                  <stringProp name="39486938">shell健康检查相关项1</stringProp>
                  <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                  <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-1043528345">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                  <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1633675141">true,false</stringProp>
                  <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                  <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                  <stringProp name="27081643">默认：30</stringProp>
                  <stringProp name="27082928">默认：[]</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
                <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;${code_err}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【查询应用列表】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询应用列表]-通用模块：正确入参(serviceName=null)，检查返回成功（核对应用数）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-621794139">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                </collectionProp>
                <collectionProp name="-386004277">
                  <stringProp name="0"></stringProp>
                  <stringProp name="658758912">前端未用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;groupId&quot;: ${groupId},&#xd;
    &quot;serviceName&quot;: ${serviceName}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.data[*].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="true">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据(检查条数)" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-29280072">
                    <stringProp name="-1251778150">${groupId}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select * from t_application 
where group_id = ${groupId} and delete_status = 0</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_id</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${JSON_id_matchNr}&quot;};
String[] str_sql = {&quot;${SQL_id_#}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="false">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_groupList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_tag_&quot; + i);
	String str_sql = vars.get(&quot;SQL_tag_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_creatorId_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_creatorId_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询应用列表]-通用模块：正确入参(serviceName有值)，检查返回成功（核对应用数）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1032675036">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;groupId&quot;: ${groupId},&#xd;
    &quot;serviceName&quot;: ${serviceName}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.data[*].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据(检查条数)" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-29280072">
                    <stringProp name="-1251778150">${groupId}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select * from t_application 
where group_id = ${groupId} and delete_status = 0 and service_name = ${serviceName}</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_id</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${JSON_id_matchNr}&quot;};
String[] str_sql = {&quot;${SQL_id_#}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="false">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_groupList_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_tag_&quot; + i);
	String str_sql = vars.get(&quot;SQL_tag_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_groupList_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_creatorId_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_creatorId_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}
//
//for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
//	String str_json = vars.get(&quot;Json_groupList_description_&quot; + i);
//	String str_sql = vars.get(&quot;SQL_description_&quot; + j);
//	
//	if(!str_json.equals(str_sql)){
//		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
//		IsSuccess = false;
//	}
//	
//}

	








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询应用列表]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1973517755">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;groupId&quot;: ${groupId},&#xd;
    &quot;serviceName&quot;: ${serviceName}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【删除应用】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[删除应用]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1723112245">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                </collectionProp>
                <collectionProp name="421032648">
                  <stringProp name="-1285355292">被删除的应用id</stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="110541305">token</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">注意看post请求体中的参数</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: ${id},&#xd;
	&quot;groupId&quot;: ${groupId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="664123859">删除成功</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">2000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[删除应用]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2044800756">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-2090860591">
                  <stringProp name="-1285355292">被删除的应用id</stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="1666859694">错误返回信息</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">注意看post请求体中的参数</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: ${id},&#xd;
	&quot;groupId&quot;: ${groupId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[删除应用]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="353796247">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="-2090860591">
                  <stringProp name="-1285355292">被删除的应用id</stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="1666859694">错误返回信息</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">注意看post请求体中的参数</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: ${id},&#xd;
	&quot;groupId&quot;: ${groupId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
                <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;${code_err}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
	
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【修改应用】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改应用]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1301610496">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="-829795055">
                  <stringProp name="0"></stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="547634389">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;id&quot;:${id},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/update</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改应用]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1003241049">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="46182120">
                  <stringProp name="0"></stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-203178076">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;id&quot;:${id},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/update</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改应用]-通用模块：错误入参，检查返回失败，出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="338822012">
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="46182120">
                  <stringProp name="0"></stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-203178076">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;id&quot;:${id},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/update</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
                <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;${code_err}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
	
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【用例演示接口】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[用例演示接口]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1052831029">namexx</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1531690384">
                  <stringProp name="1216364763">${name}</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
              <stringProp name="BeanShellSampler.query">ResponseCode=200;
IsSuccess=true;
log.info(&quot;###### namexx=${namexx}&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[用例演示]-通用模块：错误入参，检查返回失败，检查出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-912976751">packageType-废弃</stringProp>
                <stringProp name="459361400">buildName-废弃</stringProp>
                <stringProp name="540545547">healthCheckType-废弃</stringProp>
                <stringProp name="-483695195">healthCheck-废弃</stringProp>
                <stringProp name="-1752503215">initialDelaySeconds-废弃</stringProp>
                <stringProp name="-1058236669">rollingUpdate-废弃</stringProp>
                <stringProp name="-1870558629">loadBalance-废弃</stringProp>
                <stringProp name="-179015188">script4RollingUpdate-废弃</stringProp>
                <stringProp name="-2105802259">maxAge4Script-废弃</stringProp>
                <stringProp name="-1550938632">volumes-废弃</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1271687628">
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2140221439">${scrumId}</stringProp>
                  <stringProp name="-992082278">${lobId}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="1147794810">${tag}</stringProp>
                  <stringProp name="-1443736274">${language}</stringProp>
                  <stringProp name="-457173772">${languageVersion}</stringProp>
                  <stringProp name="-1142924720">${spaceList}</stringProp>
                  <stringProp name="1889698804">${serviceName}</stringProp>
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="-341087692">${packageType}</stringProp>
                  <stringProp name="-2116347493">${buildName}</stringProp>
                  <stringProp name="33585838">${healthCheckType}</stringProp>
                  <stringProp name="1594552392">${healthCheck}</stringProp>
                  <stringProp name="1960569588">${initialDelaySeconds}</stringProp>
                  <stringProp name="-61888666">${rollingUpdate}</stringProp>
                  <stringProp name="904841854">${loadBalance}</stringProp>
                  <stringProp name="534650753">${script4RollingUpdate}</stringProp>
                  <stringProp name="-1850686256">${maxAge4Script}</stringProp>
                  <stringProp name="667079899">${volumes}</stringProp>
                  <stringProp name="-1457778509">${maintainerId}</stringProp>
                </collectionProp>
                <collectionProp name="-1345095185">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="813837542">构建类型</stringProp>
                  <stringProp name="-872328806">war使用的编译包名称</stringProp>
                  <stringProp name="-1745707449">健康检查类型</stringProp>
                  <stringProp name="637287831">健康检查</stringProp>
                  <stringProp name="1496928830">健康检查延迟时间</stringProp>
                  <stringProp name="866437070">滚动升级</stringProp>
                  <stringProp name="1112287416">负载均衡</stringProp>
                  <stringProp name="39486938">shell健康检查相关项1</stringProp>
                  <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                  <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-1043528345">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                  <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1633675141">true,false</stringProp>
                  <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                  <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                  <stringProp name="27081643">默认：30</stringProp>
                  <stringProp name="27082928">默认：[]</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;groupId&quot;:${groupId},&#xd;
&quot;scrumId&quot;:${scrumId},&#xd;
&quot;lobId&quot;:${lobId},&#xd;
&quot;appName&quot;:${appName},&#xd;
&quot;tag&quot;:${tag},&#xd;
&quot;serviceName&quot;:${serviceName},&#xd;
&quot;language&quot;:${language},&#xd;
&quot;languageVersion&quot;:${languageVersion},&#xd;
&quot;spaceList&quot;:${spaceList},&#xd;
&quot;maintainerId&quot;:${maintainerId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[用例演示接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1052831029">namexx</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1285314148">
                  <stringProp name="1216364763">${name}</stringProp>
                  <stringProp name="205445075">${code_err}</stringProp>
                </collectionProp>
                <collectionProp name="1172989775">
                  <stringProp name="690410">名字</stringProp>
                  <stringProp name="-1772477488">预期错误码</stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
              <stringProp name="BeanShellSampler.query">ResponseCode=404;
IsSuccess=false;
log.info(&quot;###### namexx=${namexx}&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="断言检查：BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
                <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;${code_err}&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
	
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------废弃接口留存-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【修改服务的滚动升级】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改服务的滚动升级]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-1095727250">rollingUpdate</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-196666057">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-61888666">${rollingUpdate}</stringProp>
                </collectionProp>
                <collectionProp name="-627094182">
                  <stringProp name="0"></stringProp>
                  <stringProp name="2086291724">应用的appid</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="806247759">服务id</stringProp>
                  <stringProp name="1964986168">true-需要，false-不需要</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot; : ${appId},&#xd;
  &quot;id&quot; : ${id},&#xd;
  &quot;spaceId&quot; : ${spaceId},&#xd;
  &quot;rollingUpdate&quot; : ${rollingUpdate}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/service/updateRollingUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-898051679">更新RollingUpdate成功</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="false">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改服务的滚动升级]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-1095727250">rollingUpdate</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1428385974">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-61888666">${rollingUpdate}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="1747746170">
                  <stringProp name="0"></stringProp>
                  <stringProp name="2086291724">应用的appid</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="806247759">服务id</stringProp>
                  <stringProp name="1964986168">true-需要，false-不需要</stringProp>
                  <stringProp name="1172177188">错误信息</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot; : ${appId},&#xd;
  &quot;id&quot; : ${id},&#xd;
  &quot;spaceId&quot; : ${spaceId},&#xd;
  &quot;rollingUpdate&quot; : ${rollingUpdate}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/service/updateRollingUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="false">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【修改构建类型】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改构建类型]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="-1401172455">buildName</stringProp>
                <stringProp name="908960928">packageType</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-814673565">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="-2116347493">${buildName}</stringProp>
                  <stringProp name="-341087692">${packageType}</stringProp>
                </collectionProp>
                <collectionProp name="-1679816082">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-751720180">应用的appid；eg：5514</stringProp>
                  <stringProp name="-2005152673">服务id；eg:17540</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="-2036335778">构件包名;eg:&quot;ROOT1&quot;</stringProp>
                  <stringProp name="117846801">构建类型：JAR、WAR、ZIP;eg:&quot;WAR&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot; : ${appId},&#xd;
  &quot;id&quot; : ${id},&#xd;
  &quot;buildName&quot; : ${buildName},&#xd;
  &quot;spaceId&quot; : ${spaceId},&#xd;
  &quot;packageType&quot; : ${packageType}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/service/updatePackage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="false">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改构建类型]-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="-1401172455">buildName</stringProp>
                <stringProp name="908960928">packageType</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="888217758">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="-2116347493">${buildName}</stringProp>
                  <stringProp name="-341087692">${packageType}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-219890731">
                  <stringProp name="0"></stringProp>
                  <stringProp name="2086291724">应用的appid</stringProp>
                  <stringProp name="806247759">服务id</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="809567514">构件包名</stringProp>
                  <stringProp name="-1164662130">构建类型：JAR、WAR、ZIP</stringProp>
                  <stringProp name="1172177188">错误信息</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot; : ${appId},&#xd;
  &quot;id&quot; : ${id},&#xd;
  &quot;buildName&quot; : ${buildName},&#xd;
  &quot;spaceId&quot; : ${spaceId},&#xd;
  &quot;packageType&quot; : ${packageType}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/service/updatePackage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                  <stringProp name="184708874">&quot;success&quot;:false</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="false">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【修改CPU/内存】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改CPU/内存]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="94879971">cpuId</stringProp>
                <stringProp name="-637040132">memoryId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1235967340">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="-1248255087">${cpuId}</stringProp>
                  <stringProp name="-1235471606">${memoryId}</stringProp>
                </collectionProp>
                <collectionProp name="-1011818915">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-751720180">应用的appid；eg：5514</stringProp>
                  <stringProp name="-2005152673">服务id；eg:17540</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="-99148818">cpu的id，eg：1</stringProp>
                  <stringProp name="875289018">内存的id，eg：2</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot; : ${appId},&#xd;
  &quot;id&quot; : ${id},&#xd;
  &quot;cpuId&quot; : ${cpuId},&#xd;
  &quot;spaceId&quot; : ${spaceId},&#xd;
  &quot;memoryId&quot; : ${memoryId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/service/updateCpuAndMemory</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-32790565">更新CpuAndMemory成功</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="false">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[修改CPU/内存-通用模块：错误入参，检查返回失败，出现预期失败信息" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="93028124">appId</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="94879971">cpuId</stringProp>
                <stringProp name="-637040132">memoryId</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="33576373">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1305662344">${appId}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="-1248255087">${cpuId}</stringProp>
                  <stringProp name="-1235471606">${memoryId}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-1301763224">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-751720180">应用的appid；eg：5514</stringProp>
                  <stringProp name="-2005152673">服务id；eg:17540</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="-99148813">cpu的id，eg：6</stringProp>
                  <stringProp name="875289018">内存的id，eg：2</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;appId&quot; : ${appId},&#xd;
  &quot;id&quot; : ${id},&#xd;
  &quot;cpuId&quot; : ${cpuId},&#xd;
  &quot;spaceId&quot; : ${spaceId},&#xd;
  &quot;memoryId&quot; : ${memoryId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/service/updateCpuAndMemory</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------外网域名模块-------------" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【申请外网二级域名】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[申请外网二级域名]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="-1326563933">internetDomainList</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1434358612">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="2099117315">${internetDomainList}</stringProp>
                </collectionProp>
                <collectionProp name="-1183428250">
                  <stringProp name="0"></stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="-982415867">批量域名传，eg：{&quot;1&quot;:[&quot;dev001.dev.iqianzhan.com&quot;],&quot;2&quot;:[&quot;test001.test.iqianzhan.com&quot;]}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;groupId&quot; : ${groupId},&#xd;
  &quot;internetDomainList&quot; : ${internetDomainList}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/domain/record/apply</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                  <stringProp name="1248891735">申请成功,请联系安全组审核</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="false">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器--处理一下internetDomainList，获取其中某个域名并输出{OUT_yuming}" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;处理前面获取的取样器结果{OUT_data}&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">OUT_yuming</stringProp>
                <stringProp name="RegexExtractor.regex">\&quot;.\&quot;:\[\&quot;(.+?)\&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NULL</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">internetDomainList</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查结果" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="-1106363674">length</stringProp>
                  <stringProp name="109757538">start</stringProp>
                  <stringProp name="-194185552">serviceId</stringProp>
                  <stringProp name="-814408215">keyword</stringProp>
                  <stringProp name="-1011352949">applicationId</stringProp>
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="-2012163903">spaceId</stringProp>
                  <stringProp name="954925063">message</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1582897415">
                    <stringProp name="-762753733">${token}</stringProp>
                    <stringProp name="48625">100</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="-1251778150">${groupId}</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="1298895844">${OUT_yuming}</stringProp>
                  </collectionProp>
                  <collectionProp name="1847654371">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2098495749">返回记录的个数</stringProp>
                    <stringProp name="1223160290">从哪条记录开始返回，序号从0开始</stringProp>
                    <stringProp name="232638660">某版本对应的服务id</stringProp>
                    <stringProp name="-1126237610">搜索关键字</stringProp>
                    <stringProp name="750125359">应用id</stringProp>
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                    <stringProp name="-185094979">预期校验字符串</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--[查询外网域名列表]" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1167411107">##接口【查询外网域名列表】相关##</stringProp>
                  <stringProp name="-1359152248">辅助验证模块-[查询外网域名列表]：检查查询接口是否返回某个内网域名{}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器--校验OUT_data" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;处理前面获取的取样器结果{OUT_data}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2074754861">${message}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">OUT_data</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="##接口【查询外网域名列表】相关##" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[查询外网域名列表]-通用模块：正确入参，检查返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-1106363674">length</stringProp>
                <stringProp name="109757538">start</stringProp>
                <stringProp name="-194185552">serviceId</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-1011352949">applicationId</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="138855380">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-964080224">${length}</stringProp>
                  <stringProp name="-787050510">${start}</stringProp>
                  <stringProp name="940508132">${serviceId}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="-1741252631">${applicationId}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                </collectionProp>
                <collectionProp name="737373112">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2098495749">返回记录的个数</stringProp>
                  <stringProp name="1223160290">从哪条记录开始返回，序号从0开始</stringProp>
                  <stringProp name="232638660">某版本对应的服务id</stringProp>
                  <stringProp name="-1126237610">搜索关键字</stringProp>
                  <stringProp name="750125359">应用id</stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;length&quot; : ${length},&#xd;
  &quot;start&quot; : ${start},&#xd;
  &quot;serviceId&quot; : ${serviceId},&#xd;
  &quot;keyword&quot; : ${keyword},&#xd;
  &quot;applicationId&quot; : ${applicationId},&#xd;
  &quot;groupId&quot; : ${groupId},&#xd;
  &quot;spaceId&quot; : ${spaceId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/domain/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-1326563933">internetDomainList</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="true">
              <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="辅助验证模块-[查询外网域名列表]：检查查询接口是否返回某个内网域名{}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-1106363674">length</stringProp>
                <stringProp name="109757538">start</stringProp>
                <stringProp name="-194185552">serviceId</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-1011352949">applicationId</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="-2012163903">spaceId</stringProp>
                <stringProp name="954925063">message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-954671334">
                  <stringProp name="-762753733">${token}</stringProp>
                  <stringProp name="-964080224">${length}</stringProp>
                  <stringProp name="-787050510">${start}</stringProp>
                  <stringProp name="940508132">${serviceId}</stringProp>
                  <stringProp name="-1234969205">${keyword}</stringProp>
                  <stringProp name="-1741252631">${applicationId}</stringProp>
                  <stringProp name="-1251778150">${groupId}</stringProp>
                  <stringProp name="289310131">${spaceId}</stringProp>
                  <stringProp name="2074754861">${message}</stringProp>
                </collectionProp>
                <collectionProp name="1646435426">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2098495749">返回记录的个数</stringProp>
                  <stringProp name="1223160290">从哪条记录开始返回，序号从0开始</stringProp>
                  <stringProp name="232638660">某版本对应的服务id</stringProp>
                  <stringProp name="-1126237610">搜索关键字</stringProp>
                  <stringProp name="750125359">应用id</stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="-289569084">空间id（1-fpdev，2-test，4-beta，5-production，6-performance，8-production-ff）</stringProp>
                  <stringProp name="642629114">预期的字符串</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;length&quot; : ${length},&#xd;
  &quot;start&quot; : ${start},&#xd;
  &quot;serviceId&quot; : ${serviceId},&#xd;
  &quot;keyword&quot; : ${keyword},&#xd;
  &quot;applicationId&quot; : ${applicationId},&#xd;
  &quot;groupId&quot; : ${groupId},&#xd;
  &quot;spaceId&quot; : ${spaceId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/domain/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  <stringProp name="-1326563933">internetDomainList</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment【历史常用组件/模块设计参考】" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------变量初始定义及自动赋值-------------" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="变量赋值：【用户参数赋值/转换等操作】" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;------用户参数赋值/转换等操作-------&quot;);

vars.put(&quot;groupId&quot;,&quot;${Rnd_group_id}&quot;);
vars.put(&quot;serviceName&quot;,&quot;null&quot;);
vars.put(&quot;token&quot;,&quot;${OUT_token1}&quot;);

log.info(&quot;------END-------&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="常用函数：用户参数（常用函数形式）" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1719467628">loginName</stringProp>
              <stringProp name="1216985755">password</stringProp>
              <stringProp name="-1147692044">address</stringProp>
              <stringProp name="-1944891667">receiverEmail</stringProp>
              <stringProp name="-1816835561">随机返回变量二选一</stringProp>
              <stringProp name="-531575377">随机返回其中一个变量值</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-945309003">
                <stringProp name="1685720944">${username}</stringProp>
                <stringProp name="1740550479">${__MD5(abc123,)}</stringProp>
                <stringProp name="1914981655">金刚详细地址${__time(yyyyMMdd-HHmmss-SSS,)}</stringProp>
                <stringProp name="-4585386">jingang_${__Random(1,100,a)}@126.com</stringProp>
                <stringProp name="274155111">${__V(getspuId${__Random(0,1,)})}</stringProp>
                <stringProp name="-1748151949">${__RandomFromMultipleVars(spaceList1|spaceList2|spaceList3|spaceList4,)</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
            <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="预设全局变量：全局自定义变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ip" elementType="Argument">
                <stringProp name="Argument.name">ip</stringProp>
                <stringProp name="Argument.value">192.168.0.46</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">访问地址或域名</stringProp>
              </elementProp>
              <elementProp name="port" elementType="Argument">
                <stringProp name="Argument.name">port</stringProp>
                <stringProp name="Argument.value">8120</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">端口</stringProp>
              </elementProp>
              <elementProp name="ip_port" elementType="Argument">
                <stringProp name="Argument.name">ip_port</stringProp>
                <stringProp name="Argument.value">192.168.0.46:8120</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">域名:端口</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Argument">
                <stringProp name="Argument.name">cookie</stringProp>
                <stringProp name="Argument.value">JSESSIONID=82EC5EB6755AD2A4353B01642847D061; HALLID=400e86ba-f56c-48b1-96ac-2d2b10c2481e; UM_distinctid    =15c0a9d3dc2a-0a7236d25a41668-41544131-100200-15c0a9d3dc343d; CNZZDATA1261338628=1950855493-1494824671-    %7C1494835558; Hm_lvt_b9a7f53cb6de815ffb650e5390661a50=1494826696; Hm_lpvt_b9a7f53cb6de815ffb650e5390661a50=1494836712</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">默认的一个cookie</stringProp>
              </elementProp>
              <elementProp name="file_url" elementType="Argument">
                <stringProp name="Argument.name">file_url</stringProp>
                <stringProp name="Argument.value">C:\user-1000-前500.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">登录用户数据文件</stringProp>
              </elementProp>
              <elementProp name="xiancheng" elementType="Argument">
                <stringProp name="Argument.name">xiancheng</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">模拟的用户并发量</stringProp>
              </elementProp>
              <elementProp name="yanchi_time" elementType="Argument">
                <stringProp name="Argument.name">yanchi_time</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">每个线程组延迟启动时间（单位：s）</stringProp>
              </elementProp>
              <elementProp name="chixu_time" elementType="Argument">
                <stringProp name="Argument.name">chixu_time</stringProp>
                <stringProp name="Argument.value">300</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">每个线程组持续运行时间（单位：s）</stringProp>
              </elementProp>
              <elementProp name="http_type" elementType="Argument">
                <stringProp name="Argument.name">http_type</stringProp>
                <stringProp name="Argument.value">http</stringProp>
                <stringProp name="Argument.desc">协议类型，可选http或https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="xunhuan" elementType="Argument">
                <stringProp name="Argument.name">xunhuan</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.desc">设置线程循环次数</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="xiancheng_time" elementType="Argument">
                <stringProp name="Argument.name">xiancheng_time</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.desc">设置线程启动区间时间（单位：s）</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">liugang_auto</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">测试用的账号</stringProp>
              </elementProp>
              <elementProp name="desk_warn" elementType="Argument">
                <stringProp name="Argument.name">desk_warn</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.desc">是否显示手工检查提醒（0：不显示，1：显示）</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="check_content" elementType="Argument">
                <stringProp name="Argument.name">check_content</stringProp>
                <stringProp name="Argument.value">①与数据库/pc系统上对应页面进行核对检查，接口实现功能是否正确没有造成其他影响；②检查返回字段名称和接口文档中响应参数列表对应一致； ③检查返回接口返回数据是否正确；</stringProp>
                <stringProp name="Argument.desc">手工检查的具体内容</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局自定义变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ip" elementType="Argument">
                <stringProp name="Argument.name">ip</stringProp>
                <stringProp name="Argument.value">192.168.0.46</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">访问地址或域名</stringProp>
              </elementProp>
              <elementProp name="port" elementType="Argument">
                <stringProp name="Argument.name">port</stringProp>
                <stringProp name="Argument.value">8120</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">端口</stringProp>
              </elementProp>
              <elementProp name="ip_port" elementType="Argument">
                <stringProp name="Argument.name">ip_port</stringProp>
                <stringProp name="Argument.value">192.168.0.46:8120</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">域名:端口</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Argument">
                <stringProp name="Argument.name">cookie</stringProp>
                <stringProp name="Argument.value">JSESSIONID=82EC5EB6755AD2A4353B01642847D061; HALLID=400e86ba-f56c-48b1-96ac-2d2b10c2481e; UM_distinctid    =15c0a9d3dc2a-0a7236d25a41668-41544131-100200-15c0a9d3dc343d; CNZZDATA1261338628=1950855493-1494824671-    %7C1494835558; Hm_lvt_b9a7f53cb6de815ffb650e5390661a50=1494826696; Hm_lpvt_b9a7f53cb6de815ffb650e5390661a50=1494836712</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">默认的一个cookie</stringProp>
              </elementProp>
              <elementProp name="file_url" elementType="Argument">
                <stringProp name="Argument.name">file_url</stringProp>
                <stringProp name="Argument.value">C:\user-1000-前500.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">登录用户数据文件</stringProp>
              </elementProp>
              <elementProp name="xiancheng" elementType="Argument">
                <stringProp name="Argument.name">xiancheng</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">模拟的用户并发量</stringProp>
              </elementProp>
              <elementProp name="yanchi_time" elementType="Argument">
                <stringProp name="Argument.name">yanchi_time</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">每个线程组延迟启动时间（单位：s）</stringProp>
              </elementProp>
              <elementProp name="chixu_time" elementType="Argument">
                <stringProp name="Argument.name">chixu_time</stringProp>
                <stringProp name="Argument.value">300</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">每个线程组持续运行时间（单位：s）</stringProp>
              </elementProp>
              <elementProp name="http_type" elementType="Argument">
                <stringProp name="Argument.name">http_type</stringProp>
                <stringProp name="Argument.value">http</stringProp>
                <stringProp name="Argument.desc">协议类型，可选http或https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="xunhuan" elementType="Argument">
                <stringProp name="Argument.name">xunhuan</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.desc">设置线程循环次数</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="xiancheng_time" elementType="Argument">
                <stringProp name="Argument.name">xiancheng_time</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.desc">设置线程启动区间时间（单位：s）</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">liugang_auto</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">测试用的账号</stringProp>
              </elementProp>
              <elementProp name="desk_warn" elementType="Argument">
                <stringProp name="Argument.name">desk_warn</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.desc">是否显示手工检查提醒（0：不显示，1：显示）</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="rmd_crm（数据库请求配置）" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">mysql</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://192.168.0.45:3306/rmd_crm?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</stringProp>
            <stringProp name="driver">org.gjt.mm.mysql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">rmdintl</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">rmdintl</stringProp>
            <boolProp name="preinit">false</boolProp>
            <stringProp name="initQuery"></stringProp>
            <stringProp name="connectionProperties"></stringProp>
          </JDBCDataSource>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------获取数据并存储-------------" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取运行参数：------------------------Sampler(获取线程组的名称)" enabled="true">
            <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取运行参数：显示进程数和临时输出变量值调试" enabled="true">
            <stringProp name="BeanShellSampler.query">
ResponseCode = 200;

//log.info(&quot;${__CSVRead(C:\user.csv,0)}&quot;);
log.info(&quot;------调试开始-------&quot;);
log.info(&quot;线程数：&quot;+&quot;${__threadNum}&quot;);
log.info(&quot;{getaddressId1}&quot;);
log.info(&quot;------调试结束-------&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取运行参数：获取前面取样器的结果" enabled="true">
            <stringProp name="BeanShellSampler.query">str =  prev.isSuccessful();
vars.put(&quot;result&quot;,str.toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取数据：正则表达式提取器(提取addressId)" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">getaddressId2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;addressId&quot;:&quot;(.+?)&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NULL</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
            <stringProp name="Scope.variable">headers</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取数据：JSON Extractor（随机获取json字段值）" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">getaddressId1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.receiveAddressList[*].addressId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取数据：JSON Extractor（依据某个字段值获取同组中的另外一个字段值）" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">OUT_app_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[?(@.appName==${appName})].appId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取数据：JSON Extractor（获取数组中某个字段的所有值）" enabled="true">
            <stringProp name="TestPlan.comments">JSON_spaceName_9=性能测试环境
JSON_spaceName_matchNr=16</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">JSON_spaceName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[*].spaceName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：获取前一个取样器响应信息，输出{OUT_data}" enabled="true">
            <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_data&quot;,str);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：BeanShell Sampler（获取前一个取样器响应信息）" enabled="true">
            <stringProp name="BeanShellSampler.query">String str = prev.getResponseDataAsString();
vars.put(&quot;OUT_Data&quot;,str);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">OUT_skuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.list[?(@.orderNumber==${OUT_orderNumber})].orderGoodsList[*].skuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">OUT_Data</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取数据：BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.permission.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_permission_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_permission_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_permission_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].permissionType&quot;);
    		vars.put(&quot;Json_permission_permissionType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].path&quot;);
    		vars.put(&quot;Json_permission_path_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].parentId&quot;);
    		vars.put(&quot;Json_permission_parentId_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_permission_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].updateTime&quot;);
    		vars.put(&quot;Json_permission_updateTime_&quot;+i,str);
    		
    	}
	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
    	vars.put(&quot;Json_user_id&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
    	vars.put(&quot;Json_user_username&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.password&quot;);
    	vars.put(&quot;Json_user_password&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.mobile&quot;);
    	vars.put(&quot;Json_user_mobile&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.email&quot;);
    	vars.put(&quot;Json_user_email&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.createTime&quot;);
    	vars.put(&quot;Json_user_createTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.updateTime&quot;);
    	vars.put(&quot;Json_user_updateTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.enable&quot;);
    	vars.put(&quot;Json_user_enable&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.realName&quot;);
    	vars.put(&quot;Json_user_realName&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.avatar&quot;);
    	vars.put(&quot;Json_user_avatar&quot;,str);    	

    	    
}
// 调用函数执行
fun();









</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------核对检查-------------" enabled="true"/>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="断言检查：BeanShell断言（检查状态码，设置取样器状态）" enabled="true">
            <stringProp name="BeanShellAssertion.query">String code = prev.getResponseCode();
//log.info(code);

if(code.equals(&quot;404&quot;))
{
	prev.setSuccessful(true);
	Failure=false;  // 断言判断成功
	
}
else
{
	//ResponseCode = 400;
	Failure=true;
     FailureMessage=&quot;接口返回的状态码与预期不一致！&quot;;    
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="断言检查：手工检查提醒" enabled="true">
            <stringProp name="BeanShellAssertion.query"> 
if (${desk_warn} == 1){
	Failure=true;   //设置断言失败
	FailureMessage=&quot;请手工检查！！常规检查内容：【${check_list}】;补充：【暂无】&quot;;    
}else
	Failure=false;   //设置断言成功 </stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="断言检查：手工检查-解密商品id检查加密没有问题" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.lygp.api.*;

str = Sign.decryptProductId(&quot;${getspuId}&quot;);
log.info(&quot;##商品id解密后的明文为：&quot;+str);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="断言检查：到数据库查询获取各个字段，进行详细的检查" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1719467628">loginName</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1769670314">
                  <stringProp name="1685720944">${username}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
              <stringProp name="dataSource">${my_DB}</stringProp>
              <stringProp name="query">select a.id,a.username,a.password,a.mobile,a.email,unix_timestamp(a.create_time)*1000,unix_timestamp(a.update_time)*1000,case a.`enable` when 1 then &apos;true&apos; else &apos;false&apos; end ,a.real_name,ifnull(a.avatar,&apos;null&apos;),
d.id,d.name,d.`type`,d.path,d.parent_id,unix_timestamp(d.create_time)*1000,unix_timestamp(d.update_time)*1000
from t_user a left join t_user_role b on a.id = b.user_id left join t_role_permission c on b.role_id = c.role_id right join t_permission_new d on c.permission_id = d.id
where a.username = &apos;${loginName}&apos;



</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">SQL_user_id,SQL_user_username,SQL_user_password,SQL_user_mobile,SQL_user_email ,SQL_user_createTime,SQL_user_updateTime,SQL_user_enable,SQL_user_realName,SQL_user_avatar,SQL_id,SQL_name,SQL_permissionType,SQL_path,SQL_parentId,SQL_createTime,SQL_updateTime</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_password}&quot;,&quot;${Json_user_mobile}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;,&quot;${Json_user_avatar}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;${SQL_user_password_1}&quot;,&quot;${SQL_user_mobile_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;,&quot;${SQL_user_avatar_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_permission_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_permissionType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permissionType_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_path_&quot; + i);
	String str_sql = vars.get(&quot;SQL_path_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_parentId_&quot; + i);
	String str_sql = vars.get(&quot;SQL_parentId_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_updateTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_updateTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}







</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="断言检查：到数据库查询相关数据，做个简单模糊匹配检查" enabled="true">
            <stringProp name="dataSource">mysql_rmd</stringProp>
            <stringProp name="query"> select c.orderStatus, ifnull(o.orderCount, 0) as orderCount
    from (
      select statuscode as orderStatus from t_order_status_control
      where flowid=1 and statuscode in (${orderStatus})
    ) c left join (
      select orderstatus as orderStatus, count(*) as orderCount from t_order_base
      where userid = ${id_uesr} and ordertype=1
      and orderstatus in (${orderStatus})
      group by orderstatus
    ) o on o.orderStatus=c.orderStatus</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">5</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">orderStatus_sql,orderCount_sql</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2107281147">${orderCount}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="断言检查：BeanShell代码方式校验获取的数据是否成功）" enabled="true">
            <stringProp name="BeanShellSampler.query">String str1 = &quot;${getskuId1}&quot;;
String str2 = &quot;${getspuId1}&quot;;
//log.info(code);


if(str1.equals(&quot;NULL&quot;) || str2.equals(&quot;NULL&quot;))
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="断言检查：【方式一】获取json串变量值，定制化变量名，与数据库查询结果进行比对" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求（示例）" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;start&quot;: ${start},&#xd;
	&quot;length&quot;: ${length},&#xd;
	&quot;endTime&quot;: ${endTime},&#xd;
	&quot;appOrder&quot;: ${appOrder},&#xd;
	&quot;instanceOrder&quot;: ${instanceOrder}	&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/backstage/queryAppCount</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--spaceName" enabled="true">
                <stringProp name="TestPlan.comments">JSON_spaceName_9=性能测试环境
JSON_spaceName_matchNr=16</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[*].spaceName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--lobName" enabled="true">
                <stringProp name="TestPlan.comments">JSON_spaceName_9=性能测试环境
JSON_spaceName_matchNr=16</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[*].lobName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--scrumName" enabled="true">
                <stringProp name="TestPlan.comments">JSON_spaceName_9=性能测试环境
JSON_spaceName_matchNr=16</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var3</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[*].scrumName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--appCount" enabled="true">
                <stringProp name="TestPlan.comments">JSON_spaceName_9=性能测试环境
JSON_spaceName_matchNr=16</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var4</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[*].appCount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--instanceCount" enabled="true">
                <stringProp name="TestPlan.comments">JSON_spaceName_9=性能测试环境
JSON_spaceName_matchNr=16</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var5</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.appList[*].instanceCount</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器" enabled="true">
              <stringProp name="IfController.condition">&quot;${start}&quot;==&quot;0&quot; &amp;&amp; ${appOrder}==&quot;desc&quot; &amp;&amp; ${instanceOrder} = &quot;desc&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="断言检查：到数据库查询获取各个字段，进行详细的检查" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                  <stringProp name="dataSource">${my_DB}</stringProp>
                  <stringProp name="query">SELECT t1.space_name,t1.lob_name,t1.scrum_name,count(t1.id) as &quot;应用数&quot;,sum(t1.instance_count) as &quot;实例数&quot; 
FROM t_application_statistic t1 

where deal_time=${endTime}
group by t1.space_id,t1.lob_id,t1.scrum_id
order by 应用数 desc
order by 实例数 desc
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout">5</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">SQL_var1,SQL_var2,SQL_var3,SQL_var4,SQL_var5</stringProp>
                  <stringProp name="resultSetMaxRows"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="false">
                  <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${JSON_var1}&quot;,&quot;${JSON_var2}&quot;,&quot;${JSON_var3}&quot;,&quot;${JSON_var4}&quot;};
String[] str_sql = {&quot;${SQL_var1}&quot;,&quot;${SQL_var2}&quot;,&quot;${SQL_var3}&quot;,&quot;${SQL_var4}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0,j = 1;i &lt; str_json.length; i++,j++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;第&quot; + j + &quot;项匹配不成功！JSON变量值:&quot; + str_json[i] + &quot;  SQL变量值:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                  <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;JSON_var1_matchNr&quot;);
String str_sql_num = vars.get(&quot;SQL_var1_#&quot;);
int num = 5;  // 取了几个变量值

//if(!str_json_num.equals(str_sql_num)){
//	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
//	IsSuccess = false;
//}

for(int n = 1;n &lt;= num ; n++ ){
	for(int i = 1,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
		String str_json = vars.get(&quot;JSON_var&quot; + n + &quot;_&quot; +  i);
		String str_sql = vars.get(&quot;SQL_var&quot; + n + &quot;_&quot; + j);
		if(!str_json.equals(str_sql)){
			ResponseMessage = &quot;第&quot; + n + &quot;项的第&quot; + i + &quot;行匹配不成功！JSON变量值:&quot; + str_json + &quot;  SQL变量值:&quot; + str_sql;
			IsSuccess = false;
		}
	
	}	
	
}








</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="断言检查：【方式二-优】获取json串变量值，定制化变量名，与数据库查询结果进行比对" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3612138">var1</stringProp>
                <stringProp name="3612139">var2</stringProp>
                <stringProp name="3612140">var3</stringProp>
                <stringProp name="3612141">var4</stringProp>
                <stringProp name="3612142">var5</stringProp>
                <stringProp name="-1436300975">applicationSpaceId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1396017665">
                  <stringProp name="754218777">gitLabAddress</stringProp>
                  <stringProp name="-211299875">gitLabBranch</stringProp>
                  <stringProp name="-1436300975">applicationSpaceId</stringProp>
                  <stringProp name="-1928572192">serviceName</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1302730987">${applicationSpaceId}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">填写json串中需要取值的字段名称</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前面取样器的响应信息）" enabled="true">
              <stringProp name="BeanShellSampler.query">String ResponseData = prev.getResponseDataAsString();
vars.put(&quot;ResponseData&quot;,ResponseData);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--${var1}" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${var1}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">ResponseData</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--${var2}" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${var2}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">ResponseData</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--${var3}" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var3</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${var3}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">ResponseData</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--${var4}" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var4</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${var4}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">ResponseData</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor--${var5}" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON_var5</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.${var5}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">ResponseData</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="断言检查：到数据库查询获取各个字段，进行详细的检查" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">SELECT ifnull(d.gitlab_address,&apos;null&apos;),ifnull(d.gitlab_branch,&apos;null&apos;),ifnull(d.application_space_id,&apos;null&apos;),ifnull(d.service_name,&apos;null&apos;) 
FROM t_application_configuration d 
WHERE d.application_space_id = ${applicationSpaceId}</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_var1,SQL_var2,SQL_var3,SQL_var4,SQL_var5</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="false">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${JSON_var1}&quot;,&quot;${JSON_var2}&quot;,&quot;${JSON_var3}&quot;,&quot;${JSON_var4}&quot;};
String[] str_sql = {&quot;${SQL_var1}&quot;,&quot;${SQL_var2}&quot;,&quot;${SQL_var3}&quot;,&quot;${SQL_var4}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0,j = 1;i &lt; str_json.length; i++,j++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;第&quot; + j + &quot;项匹配不成功！JSON变量值:&quot; + str_json[i] + &quot;  SQL变量值:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;JSON_var1_matchNr&quot;);
String str_sql_num = vars.get(&quot;SQL_var1_#&quot;);
int num = 5;  // 取了几个变量值

//if(!str_json_num.equals(str_sql_num)){
//	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
//	IsSuccess = false;
//}

for(int n = 1;n &lt;= num ; n++ ){
	for(int i = 1,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
		String str_json = vars.get(&quot;JSON_var&quot; + n + &quot;_&quot; +  i);
		String str_sql = vars.get(&quot;SQL_var&quot; + n + &quot;_&quot; + j);
		if(!str_json.equals(str_sql)){
			ResponseMessage = &quot;第&quot; + n + &quot;项的第&quot; + i + &quot;行匹配不成功！JSON变量值:&quot; + str_json + &quot;  SQL变量值:&quot; + str_sql;
			IsSuccess = false;
		}
	
	}	
	
}








</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------数据加工处理-------------" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="数据中间处理：对商品id进行加密解密" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.lygp.api.*;

//striddec = Sign.decryptProductId(&quot;${getspuId}&quot;);  //解密
//log.info(&quot;##商品id解密后的明文为：&quot;+striddec);
stridenc = Sign.encryptProductId(&quot;${skuId}&quot;);   //加密
log.info(&quot;##商品id加密后的明文为：&quot;+stridenc);
vars.put(&quot;skuId&quot;,stridenc);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（生成三天后的时间）" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;

Date date=new Date();//取时间 
Calendar calendar = new GregorianCalendar();
calendar.setTime(date);
calendar.add(calendar.DATE,3);//把日期往后增加一天.整数往后推,负数往前移动
date=calendar.getTime();   //这个时间就是日期往后推一天的结果

DateFormat df = (DateFormat)DateFormat.getDateInstance();   //建立日期格式化器,这里是获取的默认语言环境、默认格式的格式器   
df.applyPattern(&quot;yyyy-MM-dd&quot;);  // 设置日期样式
log.info(df.format(date).toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（生成一天前的时间）" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;

Date date=new Date();//取时间 
Calendar calendar = new GregorianCalendar();
calendar.setTime(date);
calendar.add(calendar.DATE,-1);//把日期往后增加一天.整数往后推,负数往前移动
date=calendar.getTime();   //这个时间就是日期往后推一天的结果

DateFormat df = (DateFormat)DateFormat.getDateInstance();   //建立日期格式化器,这里是获取的默认语言环境、默认格式的格式器   
df.applyPattern(&quot;yyyyMMdd&quot;);  // 设置日期样式
log.info(df.format(date).toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（生成100天后的时间的long值）" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;

Date date=new Date();//取时间 
Calendar calendar = new GregorianCalendar();
calendar.setTime(date);
calendar.add(calendar.DATE,100);//把日期往后增加100天.整数往后推,负数往前移动
date=calendar.getTime();   //这个时间就是日期往后推一天的结果
long t = date.getTime(); 
log.info(t.toString());

vars.put(&quot;validityTime&quot;,t.toString());

//DateFormat df = (DateFormat)DateFormat.getDateInstance();   //建立日期格式化器,这里是获取的默认语言环境、默认格式的格式器   
//df.applyPattern(&quot;yyyy-MM-dd&quot;);  // 设置日期样式
//log.info(df.format(date).toString());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（生成自定义请求体数据）【处理知道循环次数情况】,输出{getbody}" enabled="true">
            <stringProp name="BeanShellSampler.query">
log.info(&quot;*****请求体开始生成*****&quot;);
String body = &quot;cartData=[&quot;;   //前缀
int max = ${skuid-sql_#};  //循环次数 
String[] bodygroup = new String[5];
String str1 = &quot;&quot;;
String str2 = &quot;&quot;;
String str3 = &quot;&quot;;
String str4 = &quot;&quot;;

String out1 = &quot;&quot;;
String out2 = &quot;&quot;;
String out3 = &quot;&quot;;
String out4 = &quot;&quot;;

for(int i = 1;i &lt;= max;i++)
{
	str1 = &quot;skuid-sql_&quot; + i;
	out1 = vars.get(str1);
	str2 = &quot;price-sql_&quot; + i;
	out2 = vars.get(str2);
	str3 = &quot;weightval-sql_&quot; + i;
	out3 = vars.get(str3);
	str4 = &quot;codeNum&quot; + i;
	out4 = vars.get(str4);
	bodygroup[i-1] = &quot;{number:&quot;+ out4 +&quot;,price=&quot;+ out2 +&quot;,saleinfoid=&quot;+ out1 +&quot;,weightval=&quot;+ out3 +&quot;}&quot;;
	
}
 for(int i = 0;i &lt; max; i++)
{
    log.info(bodygroup[i]); //输出结果
    body = body + bodygroup[i];
    if(i &lt; max-1)
    {	
		body = body + &quot;,&quot;;
    	
    	}
}
body = body + &quot;]&quot;;
log.info(body);
vars.put(&quot;getbody&quot;,body);
log.info(&quot;*****请求体生成完成*****&quot;);

//String body_1 = &quot;{number:${code1-num},price=${price-sql_1},saleinfoid=${skuid-sql_1},weightval=${weightval-sql_1}}&quot;;
//log.info(&quot;##请求体加密前&quot;);
//log.info(body_0);
//String str2 = Sign.encrypt(body_0);
//body = body + str2 + &quot;\&quot;}&quot;;
//log.info(&quot;##加密请求体如下&quot;);
//log.info(out1);
//vars.put(&quot;body&quot;,body);
//</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（生成自定义请求体数据）【处理不知道循环次数情况】,输出{getbody4}" enabled="true">
            <stringProp name="BeanShellSampler.query">
log.info(&quot;*****请求体开始生成*****&quot;);
String body = &quot;{\&quot;bindOutInfos\&quot;:[&quot;;   //前缀
int max = 4;  //循环次数 
String[] bodygroup = new String[5];
String str1 = &quot;&quot;;
String str2 = &quot;&quot;;

String out1 = &quot;&quot;;
String out2 = &quot;&quot;;

/////////////
// {getID0~x}、{getlockedNum0~x}
// [{&quot;id&quot;:${id},&quot;pickedNum&quot;:${pickedNum}}]

for(int i = 0;i &lt;= max;i++)
{
	str1 = &quot;getID&quot; + i;
	out1 = vars.get(str1);
	str2 = &quot;getlockedNum&quot; + i;
	out2 = vars.get(str2);
	if(out1.equals(&quot;NULL&quot;))
	{  
		max = i-1;
		break;
	}
	bodygroup[i] = &quot;{\&quot;id\&quot;:&quot;+ out1 +&quot;,\&quot;pickedNum\&quot;:&quot;+ out2 +&quot;}&quot;;
	
}
 for(int i = 0;i &lt;= max; i++)
{
    //log.info(bodygroup[i]); //输出结果
    body = body + bodygroup[i];
    if(i &lt; max)
    {	
		body = body + &quot;,&quot;;
    	
    	}
}
body = body + &quot;],\&quot;orderNo\&quot;:\&quot;${orderNo}\&quot;,\&quot;pickingStatus\&quot;:${pickingStatus}}&quot;;
log.info(body);
vars.put(&quot;getbody4&quot;,body);
log.info(&quot;*****请求体生成完成*****&quot;);

//String body_1 = &quot;{number:${code1-num},price=${price-sql_1},saleinfoid=${skuid-sql_1},weightval=${weightval-sql_1}}&quot;;
//log.info(&quot;##请求体加密前&quot;);
//log.info(body_0);
//String str2 = Sign.encrypt(body_0);
//body = body + str2 + &quot;\&quot;}&quot;;
//log.info(&quot;##加密请求体如下&quot;);
//log.info(out1);
//vars.put(&quot;body&quot;,body);
//</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler(对获取的多个采购编号进行拆分)" enabled="true">
            <stringProp name="BeanShellSampler.query">//String str = &quot;${getresult}&quot;;
String str = &quot;CG0011709140215,CG0011709140216&quot;;

String[] ss=str.split(&quot;,&quot;);
System.out.println(ss.length);

for(int i=0;i&lt;ss.length;i++)
{
	log.info(ss[i]);
	String aa = &quot;getresult-D&quot;;
	aa = aa + i;
	vars.put(aa,ss[i]); 
		
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------数据库操作-------------" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库配置：rmd_crm（数据库请求配置）" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">mysql</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://192.168.*.*:3306/rmd_crm?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</stringProp>
            <stringProp name="driver">org.gjt.mm.mysql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">rmdintl</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">rmdintl</stringProp>
            <boolProp name="preinit">false</boolProp>
            <stringProp name="initQuery"></stringProp>
            <stringProp name="connectionProperties"></stringProp>
          </JDBCDataSource>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：从数据库获取skucode（0-外采,1-自营），分别输出{getskucode0}和{getskucode1}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="显示进程数" enabled="false">
              <stringProp name="BeanShellSampler.query">print(&quot;${__CSVRead(C:\user.csv,0)}&quot;);
ResponseCode = 200;</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.SynthesisReportGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Synthesis Report (filtered)" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
                <longProp name="interval_grouping">500</longProp>
                <boolProp name="graph_aggregated">false</boolProp>
                <stringProp name="include_sample_labels"></stringProp>
                <stringProp name="exclude_sample_labels"></stringProp>
                <stringProp name="start_offset"></stringProp>
                <stringProp name="end_offset"></stringProp>
                <boolProp name="include_checkbox_state">false</boolProp>
                <boolProp name="exclude_checkbox_state">false</boolProp>
              </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skucode1" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select code from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 1
) and status = 1
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skucode1</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskucode1&quot;,&quot;${skucode1_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skucode0" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select code from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 0
) and status = 1
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skucode0</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskucode0&quot;,&quot;${skucode0_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Sampler（校验获取的数据是否成功）" enabled="true">
              <stringProp name="BeanShellSampler.query">String str1 = &quot;${getskucode0}&quot;;
String str2 = &quot;${getskucode1}&quot;;
String num1 = &quot;${skucode0_#}&quot;;
String num2 = &quot;${skucode1_#}&quot;;
//log.info(code);


if(str1.equals(&quot;NULL&quot;) || str2.equals(&quot;NULL&quot;) || str1.equals(&quot;&quot;) || str2.equals(&quot;&quot;) || num1.equals(&quot;0&quot;) || num2.equals(&quot;0&quot;))
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：从数据库获取skuid（0-外采,1-自营），分别输出{getskuId0}和{getskuId1}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="显示进程数" enabled="false">
              <stringProp name="BeanShellSampler.query">print(&quot;${__CSVRead(C:\user.csv,0)}&quot;);
ResponseCode = 200;</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.SynthesisReportGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Synthesis Report (filtered)" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <threadCounts>true</threadCounts>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
                <longProp name="interval_grouping">500</longProp>
                <boolProp name="graph_aggregated">false</boolProp>
                <stringProp name="include_sample_labels"></stringProp>
                <stringProp name="exclude_sample_labels"></stringProp>
                <stringProp name="start_offset"></stringProp>
                <stringProp name="end_offset"></stringProp>
                <boolProp name="include_checkbox_state">false</boolProp>
                <boolProp name="exclude_checkbox_state">false</boolProp>
              </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skuid1" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 1
) and status = 1
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skuid1</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskuId1&quot;,&quot;${skuid1_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skuid0" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 0
) and status = 1
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skuid0</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskuId0&quot;,&quot;${skuid0_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Sampler（校验获取的数据是否成功）" enabled="true">
              <stringProp name="BeanShellSampler.query">String str1 = &quot;${getskuId0}&quot;;
String str2 = &quot;${getskuId1}&quot;;
String num1 = &quot;${skuid0_#}&quot;;
String num2 = &quot;${skuid1_#}&quot;;
//log.info(code);


if(str1.equals(&quot;NULL&quot;) || str2.equals(&quot;NULL&quot;) || str1.equals(&quot;&quot;) || str2.equals(&quot;&quot;) || num1.equals(&quot;0&quot;) || num2.equals(&quot;0&quot;))
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：从数据库获取spuid（0-外采,1-自营），分别输出{getspuId0}和{getspuId1}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取spuid1" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from t_goods_base where goodsflag = 1 and status = 1
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">spuid1</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getspuId1&quot;,&quot;${spuid1_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取spuid0" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from t_goods_base where goodsflag = 0 and status = 1
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">spuid0</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getspuId0&quot;,&quot;${spuid0_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Sampler（校验获取的数据是否成功）" enabled="true">
              <stringProp name="BeanShellSampler.query">String str1 = &quot;${getspuId0}&quot;;
String str2 = &quot;${getspuId1}&quot;;
String num1 = &quot;${spuid0_#}&quot;;
String num2 = &quot;${spuid1_#}&quot;;
//log.info(code);


if(str1.equals(&quot;NULL&quot;) || str2.equals(&quot;NULL&quot;) || str1.equals(&quot;&quot;) || str2.equals(&quot;&quot;) || num1.equals(&quot;0&quot;) || num2.equals(&quot;0&quot;))
{
	IsSuccess = false; // 判断失败
     ResponseMessage = &quot;数据准备出错，获取的字段值存在空的情况！&quot;;   
	
}
else
{
	IsSuccess = true; // 判断成功
}

</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：从数据库获取skuid（0-外采,1-自营）（0:下架），分别输出{getskuId0_0}和{getskuId1_0}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skuid1" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 1
) and status = 0
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skuid1_0</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskuId1_0&quot;,&quot;${skuid1_0_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skuid0" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 0
) and status = 0
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skuid0_0</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskuId0_0&quot;,&quot;${skuid0_0_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：从数据库获取skuid（0-外采,1-自营）（2:删除），分别输出{getskuId0_2}和{getskuId1_2}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skuid1" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 1
) and status = 2
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skuid1</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskuId1_2&quot;,&quot;${skuid1_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="从数据库获取skuid0" enabled="true">
              <stringProp name="dataSource">mysql_rmd</stringProp>
              <stringProp name="query">select id from  t_goods_saleinfo
where baseid in
(
	select id from t_goods_base where goodsflag = 0
) and status = 2
order by rand() limit 1 </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">5</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">skuid0</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;getskuId0_2&quot;,&quot;${skuid0_1}&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------写文件操作-------------" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="输出生成的测试数据" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

 
public class RandomData {
 
    public static void writeDataToFile(String filename, boolean bb, String ll) {
        FileWriter fw;
        BufferedWriter bw = null;
        try {
            fw = new FileWriter(filename, bb);
            bw = new BufferedWriter(fw);
            //char c[] = ll.toCharArray();
            bw.write(ll);
            bw.flush(); // 一定要刷新缓冲区
            bw.newLine(); // 换行
            bw.close(); // 一定要关闭数据流
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bw != null) {
                    bw.close();
                }
            } catch (Exception e2) {
                // TODO: handle exception
            }
        }
 
    }
}

log.info(&quot;=======写入数据开始=========&quot;);
String filepath = &quot;${filePath}&quot;;

String data=&quot;中文前台用户：${username}   密码：${password}&quot;;
RandomData.writeDataToFile(filepath,true,data);//写入文件
log.info(&quot;写入的数据：&quot;+data);

data=&quot;##生成时间：${__time(YMDHMS,)}&quot;;
RandomData.writeDataToFile(filepath,true,data);//写入文件
log.info(&quot;写入的数据：&quot;+data);

data = &quot;  订单状态：数据库状态【101待支付】，pc端状态【待付款】；  测试数据： 外采商品订单号：${getordernumber0}；自营商品订单号：${getordernumber1}&quot;;
RandomData.writeDataToFile(filepath,true,data);//写入文件
log.info(&quot;写入的数据：&quot;+data);

log.info(&quot;=======写入数据完成=========&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------调试使用-------------" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="显示进程数和临时输出变量值调试" enabled="true">
            <stringProp name="BeanShellSampler.query">
ResponseCode = 200;

//print(&quot;${__CSVRead(C:\user.csv,0)}&quot;);
log.info(&quot;------调试开始-------&quot;);
log.info(&quot;线程数：&quot;+&quot;${__threadNum}&quot;);
log.info(&quot;{getaddressId1}&quot;);
log.info(&quot;------调试结束-------&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-----------用例模板-------------" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="用例模板：[${xc}]-正例${No}：体现数据驱动测试（DDT）思想的用例（正值多角度（检查freeLogin各种合法值：false，null，&quot;&quot;））" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="239760591">freeLogin_1</stringProp>
                <stringProp name="239760592">freeLogin_2</stringProp>
                <stringProp name="239760593">freeLogin_3</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-881531007">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="51">3</stringProp>
                </collectionProp>
                <collectionProp name="216612162">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="996291361">用于循环调用的变量名称前缀</stringProp>
                  <stringProp name="-455038423">循环调用的次数</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">${prefix_var}</stringProp>
              <stringProp name="ForeachController.returnVal">${prefix_var}</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${prefix_num}</stringProp>
            </ForeachController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器--进行接口访问" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;获取token模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取Token接口（租户管理员）" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str);
log.info(&quot;获取线程组的名称chenyulan:&quot;+str.toString());

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1612097">
                  <stringProp name="84103">29000029038</stringProp>
                  <stringProp name="625994203">Ffcs123$%^</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="343135846">##接口【获取token接口-有用】相关##</stringProp>
                <stringProp name="610153522">[获取token]-通用模块：正常值入参，检验接口返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${xc}]-反例${No}：异常多角度（username传入错误的值），验证接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-249503964">
                  <stringProp name="80826791">29000029038ww</stringProp>
                  <stringProp name="625994203">Ffcs123$%^</stringProp>
                  <stringProp name="1074914199">解密失败</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="343135846">##接口【获取token接口-有用】相关##</stringProp>
                <stringProp name="-1976475199">[获取token]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（username=空&quot;&quot;,null），验证接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
              <stringProp name="filename">D:\E盘\jmeter资料\jmeter脚本滁州接口测试\getTokenMessage_err.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">message_err1</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1947551992">username_1</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1947551991">username_2</stringProp>
                <stringProp name="1216985755">password</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-579423759">
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="954925063">message</stringProp>
                  <stringProp name="2407815">NULL</stringProp>
                  <stringProp name="625994203">Ffcs123$%^</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">username</stringProp>
              <stringProp name="ForeachController.returnVal">username</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="343135846">##接口【获取token接口-有用】相关##</stringProp>
                  <stringProp name="-1976475199">[获取token]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;用户管理模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：当前登录用户信息接口（租户管理员）" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称:${xc})" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1827298422">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1602564119">##接口【当前登录用户信息】相关##</stringProp>
                <stringProp name="-866051000">[当前登录用户信息]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：用户新增接口（租户管理员）" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2132345367">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="-1954851067">[创建用户]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查is_admin各种合法值：0，1）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="239760591">freeLogin_1</stringProp>
                <stringProp name="239760592">freeLogin_2</stringProp>
                <stringProp name="239760593">freeLogin_3</stringProp>
                <stringProp name="239760594">freeLogin_4</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1577192428">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="52">4</stringProp>
                </collectionProp>
                <collectionProp name="-1503421239">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="996291361">用于循环调用的变量名称前缀</stringProp>
                  <stringProp name="-455038423">循环调用的次数</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="360669484">is_admin_1</stringProp>
                <stringProp name="360669485">is_admin_2</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1172693663">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="107637754">is_admin</stringProp>
                  <stringProp name="51">3</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">is_admin</stringProp>
              <stringProp name="ForeachController.returnVal">is_admin</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                  <stringProp name="-1954851067">[创建用户]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（username为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="360669484">is_admin_1</stringProp>
                <stringProp name="360669485">is_admin_2</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1617932365">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="107637754">is_admin</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-952310407">用户名和密码不能为空</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（password为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="360669484">is_admin_1</stringProp>
                <stringProp name="360669485">is_admin_2</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1971172142">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="107637754">is_admin</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-952310407">用户名和密码不能为空</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（手机号为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1239956359">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="115819920">手机号不正确，请重新输入</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-825261643">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="806479">手机</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="-1954851067">[创建用户]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（is_mobile_power传入不存在值2），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1897381450">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="765813019">是否具有移动端权限,数据非法</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（record_auth传入不存在值2），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1573932820">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-387140431">是否允许文本音频免审核应急任务下发,数据非法</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（one_click_shout传入不存在值2），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1903405323">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="973216">是否使用一键喊话,数据非法</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（is_admin传入不存在值2），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="352817692">username2</stringProp>
                <stringProp name="-1068855134">mobile</stringProp>
                <stringProp name="96619420">email</stringProp>
                <stringProp name="-928147210">password1</stringProp>
                <stringProp name="1485474845">is_mobile_power</stringProp>
                <stringProp name="1316893910">record_auth</stringProp>
                <stringProp name="1551698697">one_click_shout</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="107637754">is_admin</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1503083984">
                  <stringProp name="-1047800430">天翼大喇叭接口自动化测试i${__time(MMdd-HHmm-SSS,tt)}</stringProp>
                  <stringProp name="1851757456">189${__Random(11111111,99999999,)}</stringProp>
                  <stringProp name="1801675928">chenyulan@ffcs.cn</stringProp>
                  <stringProp name="-2022395906">Ffcs12e3$%^</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-2101363578">是否是管理员,数据非法</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1701686467">##接口【用户新增】相关##</stringProp>
                <stringProp name="1343189573">[创建用户]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：用户删除接口（租户管理员）" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取要删除用户userCode】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="-1050951333">数据准备[接口]：【获取新增用户userCode】利用新增用户接口，输出{OUT_userCode}）</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1895782805">
                  <stringProp name="-439273507">${OUT_userCode}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-645053494">[用户删除]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（userCode为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1847074020">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-210512484">userCode参数错误，请重新输入</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-858021829">[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（userCode传入错误的值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1213696321">
                  <stringProp name="-1179965519">111111111</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-210512484">userCode参数错误，请重新输入</stringProp>
                </collectionProp>
                <collectionProp name="-1740119754">
                  <stringProp name="-2048516698">错误的userCode</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="9">	</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-858021829">[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（userCode传入已被删除的值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1573786436">
                  <stringProp name="-439273507">${OUT_userCode}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="2061413474">用户删除成功</stringProp>
                </collectionProp>
                <collectionProp name="-550854462">
                  <stringProp name="1414267346">重复删除已被删除的用户</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-858021829">[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="true"/>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;媒体（media)模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：新增媒体接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-295680069">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="1380367748">[新增媒体接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查kind各种合法值：1~6）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1131302330">kind_1</stringProp>
                <stringProp name="-1131302329">kind_2</stringProp>
                <stringProp name="-1131302328">kind_3</stringProp>
                <stringProp name="-1131302327">kind_4</stringProp>
                <stringProp name="-1131302326">kind_5</stringProp>
                <stringProp name="-1131302325">kind_6</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1098267613">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1638840905">媒体类型参数错误(请填写village或text</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="52">4</stringProp>
                  <stringProp name="53">5</stringProp>
                  <stringProp name="54">6</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">kind</stringProp>
              <stringProp name="ForeachController.returnVal">kind</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">6</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                  <stringProp name="1380367748">[新增媒体接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查voice各种合法值：0~1）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="629106788">voice_1</stringProp>
                <stringProp name="629106789">voice_2</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1562403400">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1638840905">媒体类型参数错误(请填写village或text</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">voice</stringProp>
              <stringProp name="ForeachController.returnVal">voice</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                  <stringProp name="1380367748">[新增媒体接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查speed各种合法值：0~1）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-2008410567">speed_1</stringProp>
                <stringProp name="-2008410566">speed_2</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1562403400">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1638840905">媒体类型参数错误(请填写village或text</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">speed</stringProp>
              <stringProp name="ForeachController.returnVal">speed</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                  <stringProp name="1380367748">[新增媒体接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（isText为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1647190522">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-735539456">媒体类型参数错误(请填写village或text)</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（media_name为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-458898448">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-460935490">请输入任务名</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（kind为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-285660553">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1049464132">媒体分类为空或参数错误</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1132998493">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1049464132">媒体分类为空或参数错误</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="1380367748">[新增媒体接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（kind传入不存在值7），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1085142817">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="55">7</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="927600894">媒体分组不存在</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（voice传入不存在值3），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1476520625">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="799375">成功</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（speed传入不存在值3），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="844839611">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="55">7</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-940739140">语速类型参数错误&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="287854689">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-509099073">正常值:0/1</stringProp>
                  <stringProp name="-509099073">正常值:0/1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（text超过1000字），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="3292052">kind</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="591743176">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="237607046">超过1000文本</stringProp>
                  <stringProp name="1252013429">test天翼大喇叭自动化多媒体测试</stringProp>
                  <stringProp name="55">7</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-940739140">语速类型参数错误&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="287854689">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-509099073">正常值:0/1</stringProp>
                  <stringProp name="-509099073">正常值:0/1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（应用名称media_name不合法检查：中文，英文，数字，下划线，中划线，2-30字符）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1180098185">isText</stringProp>
                <stringProp name="-1017682643">speakerRecFile</stringProp>
                <stringProp name="3556653">text</stringProp>
                <stringProp name="112386354">voice</stringProp>
                <stringProp name="109641799">speed</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="10531896">media_name_1</stringProp>
                <stringProp name="10531897">media_name_2</stringProp>
                <stringProp name="10531898">media_name_3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1928404810">
                  <stringProp name="3556653">text</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1235975240">cyltest</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-206072495">code参数异常</stringProp>
                  <stringProp name="35715">&quot;a&quot;</stringProp>
                  <stringProp name="1064351120">&quot;a-&amp;*&quot;</stringProp>
                  <stringProp name="-1106942634">&quot;a1234567891234567890123456789001234567890123456789b&quot;</stringProp>
                  <stringProp name="-1294148189">应用名称只能包含字母、数字、下划线、中划线、中文。长度2-50个字符</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">media_name</stringProp>
              <stringProp name="ForeachController.returnVal">media_name</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-995716243">##接口【新增媒体接口】相关##</stringProp>
                  <stringProp name="-2056694170">[新增媒体接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：媒体审核接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取媒体{OUT_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="-1330422213">数据准备[接口]：【获取新增媒体id】利用新增媒体接口，输出{OUT_id}）</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-323095470">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查status各种合法值：1~2）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="1318692644">status_1</stringProp>
                <stringProp name="1318692645">status_2</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1058358348">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">status</stringProp>
              <stringProp name="ForeachController.returnVal">status</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">6</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                  <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（id为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="1318692644">status_1</stringProp>
                <stringProp name="1318692645">status_2</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1427529604">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1187290510">
                  <stringProp name="-487541163">${OUT_id}id为空</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（status为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1858742193">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1263580153">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2049902710">status值为空</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="-892481550">status</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-899522802">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（status传入不存在值3），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1858742193">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1263580153">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2049902710">status值为空</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（审核意见remark不合法检查：中文，英文，数字，下划线，中划线，2-30字符）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-525865166">remark_1</stringProp>
                <stringProp name="-525865165">remark_2</stringProp>
                <stringProp name="-525865164">remark_3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="721708227">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                  <stringProp name="86072929">\&quot;a\&quot;</stringProp>
                  <stringProp name="59909052">\&quot;a-&amp;*\&quot;</stringProp>
                  <stringProp name="-1962902668">a1234567891234567890123456789001234567890123456789b\&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-1970588477">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2049902710">status值为空</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2029785101">{&quot;code&quot;:100010200,&quot;message&quot;:&quot;解密失败&quot;}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name_1	&quot;a&quot;
media_name_2	&quot;a-&amp;*&quot;
media_name_3	&quot;a1234567891234567890123456789001234567890123456789b&quot;</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">remark</stringProp>
              <stringProp name="ForeachController.returnVal">remark</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                  <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：媒体删除接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取新增媒体{OUT_id}】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="-1330422213">数据准备[接口]：【获取新增媒体id】利用新增媒体接口，输出{OUT_id}）</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="897386100">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-2027849705">##接口【媒体删除接口】相关##</stringProp>
                <stringProp name="1793473818">[媒体删除接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（ID为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1209071650">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-1051293103">
                  <stringProp name="1003128883"> id 为空,目前测试没有收到应答包</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-2027849705">##接口【媒体删除接口】相关##</stringProp>
                <stringProp name="75374827">[媒体删除接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（id传入不存在值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="345480431">
                  <stringProp name="1449589344">111111</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-1843588150">{&quot;code&quot;:400,&quot;message&quot;:&quot;媒体资源不存在或已删除&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1051293103">
                  <stringProp name="1003128883"> id 为空,目前测试没有收到应答包</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-2027849705">##接口【媒体删除接口】相关##</stringProp>
                <stringProp name="75374827">[媒体删除接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：媒体管理列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1638313341">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="-232584884">[媒体管理列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：异常多角度（media_name输入不存在的值）可以返回成功0条记录" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1879309218">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49623860">44444</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-167180939">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:{&quot;count&quot;:&quot;0&quot;,&quot;page_size&quot;:10,&quot;page&quot;:1,&quot;items&quot;:[],&quot;code&quot;:&quot;200&quot;}}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page_size传入错误数据类型），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-517340493">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page传入错误数据类型），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-232598301">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数缺少异常检查（无token参数），接口返回失败（token设置为空无法生效）" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="false">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1676293720">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-1564260163">登录状态过期</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：待审核媒体列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1638313341">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-223112211">[待审核媒体列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：异常多角度（media_name输入不存在的值）可以返回成功0条记录" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1496337058">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49623860">44444</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1039751822">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page_size传入错误数据类型），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-517340493">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page传入错误数据类型），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-232598301">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数缺少异常检查（无token参数），接口返回失败（token设置为空无法生效）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1859672740">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="799375">成功</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="1975299702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="2144186376">${accessToken} token设置为空</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;告警（alarm)模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取告警统计信息接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1827298422">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="2035747151">##接口【获取告警统计信息】相关##</stringProp>
                <stringProp name="1150214516">[获取告警统计]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-626843527">
                  <stringProp name="47715250">22222</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="2035747151">##接口【获取告警统计信息】相关##</stringProp>
                <stringProp name="1447582838">[获取告警统计]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="634963531">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="2035747151">##接口【获取告警统计信息】相关##</stringProp>
                <stringProp name="1447582838">[获取告警统计]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：告警列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1827298422">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1952040429">##接口【告警列表】相关##</stringProp>
                <stringProp name="172538180">[告警列表]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-626843527">
                  <stringProp name="47715250">22222</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1952040429">##接口【告警列表】相关##</stringProp>
                <stringProp name="976466945">[告警列表]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="634963531">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1952040429">##接口【告警列表】相关##</stringProp>
                <stringProp name="976466945">[告警列表]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;设备（device)模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：设备列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1188493749">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1448635138">100036</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-111672628">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-982428398">由statistics列表的设备类型id 100036  100037</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="737118465">##接口【获取设备列表】相关##</stringProp>
                <stringProp name="-701728656">[获取设备列表]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：正常多角度（device_type=100036），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-607038954">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1226916004">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="737118465">##接口【获取设备列表】相关##</stringProp>
                <stringProp name="-701728656">[获取设备列表]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：正常多角度（device_type=100037），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1188492571">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1448635139">100037</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1226916004">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="737118465">##接口【获取设备列表】相关##</stringProp>
                <stringProp name="-701728656">[获取设备列表]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1212017127">
                  <stringProp name="47715250">22222</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
                <collectionProp name="-620284491">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="737118465">##接口【获取设备列表】相关##</stringProp>
                <stringProp name="978309114">[获取设备列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1542869117">device_type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1406192939">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
                <collectionProp name="-620284491">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="-1788565982"> 搜索设备名 </stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="737118465">##接口【获取设备列表】相关##</stringProp>
                <stringProp name="978309114">[获取设备列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取设备详情接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取device_id,输出OUT_device_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="-1338322748">数据准备[接口]：【获取device_id】利用获取设备列表消息体中的device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1554637562">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-1080097887">${OUT_device_id}</stringProp>
                  <stringProp name="930228790">设备id不合法</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1840861835">##接口【获取设备详情接口】相关##</stringProp>
                <stringProp name="-1493671415">[获取设备详情接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1389131326">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1569984">3333</stringProp>
                  <stringProp name="930228790">设备id不合法</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)} ${OUT_device_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1840861835">##接口【获取设备详情接口】相关##</stringProp>
                <stringProp name="-1493671415">[获取设备详情接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id=&quot;&quot;），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1029951217">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1216829964">设备id不能为空</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)} ${OUT_device_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1840861835">##接口【获取设备详情接口】相关##</stringProp>
                <stringProp name="-1493671415">[获取设备详情接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：设备类型统计列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取device_id,输出OUT_device_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="-1338322748">数据准备[接口]：【获取device_id】利用获取设备列表消息体中的device_id,输出到OUT_device_id,作为设备详情接口的输入。</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-74004232">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="930228790">设备id不合法</stringProp>
                </collectionProp>
                <collectionProp name="675772751">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1116142249">搜索类型名</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1526493136">##接口【设备类型统计列表接口】相关##</stringProp>
                <stringProp name="-918730463">[设备类型统计列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：正常多角度（keyword=错误不存在的值），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1162807838">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1569984">3333</stringProp>
                  <stringProp name="654594347">请求地址不对或数据不正确</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)} ${OUT_device_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1526493136">##接口【设备类型统计列表接口】相关##</stringProp>
                <stringProp name="-145314620">[设备类型统计列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：正常多角度（keyword=“”），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-74004232">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="930228790">设备id不合法</stringProp>
                </collectionProp>
                <collectionProp name="911776280">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1957170867">由statistics列表的设备类型id</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)} ${OUT_device_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1526493136">##接口【设备类型统计列表接口】相关##</stringProp>
                <stringProp name="-145314620">[设备类型统计列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;音箱（speaker)模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：在播列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1827298422">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-948026648">##接口【在播列表接口接口】相关##</stringProp>
                <stringProp name="569556905">[在播列表接口接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数错误（timestamp=111），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1503003084">
                  <stringProp name="1539200">2222</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-948026648">##接口【在播列表接口接口】相关##</stringProp>
                <stringProp name="-231408863">[在播列表接口接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="634963531">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${accessToken}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-948026648">##接口【在播列表接口接口】相关##</stringProp>
                <stringProp name="-231408863">[在播列表接口接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：任务详情接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2002090832">
                  <stringProp name="-288387516">201202163147533310</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="257740109">code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="460349331">
                  <stringProp name="686294">可以</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="2085919211">${status} 0-播放中，1-播放成功 2-播放失败</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                  <stringProp name="-69961602">用户登录过期登录状态过期</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="954688826">[任务详情接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查status各种合法值：0~2）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1318692644">status_1</stringProp>
                <stringProp name="1318692645">status_2</stringProp>
                <stringProp name="1318692646">status_3</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1825168649">
                  <stringProp name="-288387516">201202163147533310</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="257740109">code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                </collectionProp>
                <collectionProp name="1619644615">
                  <stringProp name="686294">可以</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                  <stringProp name="-69961602">用户登录过期登录状态过期</stringProp>
                  <stringProp name="-2052434714">${status} 0-播放中，1-播放成功 2-</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">status</stringProp>
              <stringProp name="ForeachController.returnVal">status</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">6</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                  <stringProp name="954688826">[任务详情接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查isTree各种合法值：1）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="462135095">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="114066">son</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="954688826">[任务详情接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数缺少异常检查（无token参数），接口返回失败（token设置为空无法生效）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2002090832">
                  <stringProp name="-288387516">201202163147533310</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="257740109">code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="460349331">
                  <stringProp name="686294">可以</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="2085919211">${status} 0-播放中，1-播放成功 2-播放失败</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                  <stringProp name="-69961602">用户登录过期登录状态过期</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="-1779048208">[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数缺少异常检查（timestamp为空），接口返回失败（token设置为空无法生效）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-621795975">
                  <stringProp name="-288387516">201202163147533310</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
                <collectionProp name="-529100661">
                  <stringProp name="686294">可以</stringProp>
                  <stringProp name="-932931070">测试timestamp ${__time(/1000,)}  </stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="2085919211">${status} 0-播放中，1-播放成功 2-播放失败</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="-1779048208">[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（timestamp值不正确），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2116700154">
                  <stringProp name="-288387516">201202163147533310</stringProp>
                  <stringProp name="96384805">eeeee</stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
                <collectionProp name="-1827719547">
                  <stringProp name="686294">可以</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="2085919211">${status} 0-播放中，1-播放成功 2-播放失败</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="1024">  </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="-1779048208">[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（id随便4444），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="616381498">
                  <stringProp name="48700339">34444</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1560521015">任务不存在或已删除</stringProp>
                </collectionProp>
                <collectionProp name="-589256286">
                  <stringProp name="-2120777266">可以 201202163147533310</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="2085919211">${status} 0-播放中，1-播放成功 2-播放失败</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="-1779048208">[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（status设置为3），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1573145462">start_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1800861053">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="132564252">2020-12-01</stringProp>
                  <stringProp name="132564257">2020-12-06</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1039751822">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                  <stringProp name="-288387516">201202163147533310</stringProp>
                </collectionProp>
                <collectionProp name="-1055903340">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-503170052">${start_time}</stringProp>
                  <stringProp name="-1009573899">${end_time}</stringProp>
                  <stringProp name="2085919211">${status} 0-播放中，1-播放成功 2-播放失败</stringProp>
                  <stringProp name="1218206039">${page}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
start_time
end_time
status
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-238969865">##接口【任务详情接口】相关##</stringProp>
                <stringProp name="-1779048208">[任务详情接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取分组列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查isTree=0）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1644163977">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="34935794">&quot;son&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1698503956">##接口【获取分组列表】相关##</stringProp>
                <stringProp name="-940977051">[获取分组列表]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查isTree=1）" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1584781500">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="454682259">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1698503956">##接口【获取分组列表】相关##</stringProp>
                <stringProp name="1128192229">[获取分组列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（isTree传入不存在值3），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1584807943">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="454682259">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1698503956">##接口【获取分组列表】相关##</stringProp>
                <stringProp name="1128192229">[获取分组列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1582920694">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="454682259">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1698503956">##接口【获取分组列表】相关##</stringProp>
                <stringProp name="1128192229">[获取分组列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：播放任务列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1153863026">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
                <collectionProp name="-1828532371">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="-1743652803">[播放任务列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查type=1~0）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-858803092">type_1</stringProp>
                <stringProp name="-858803091">type_2</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="27895104">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <collectionProp name="-1492313959">
                  <stringProp name="0"></stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">page</stringProp>
              <stringProp name="ForeachController.returnVal">page</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                  <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（type传入不存在值3），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1800026296">
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-849903604">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="295067149">[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（播放任务名称keyword设置为数据库中没有的值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1838857449">
                  <stringProp name="51">3</stringProp>
                  <stringProp name="1600768">4444</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="1338853553">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="1248622481">任务名称 0067000885广播任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="295067149">[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2048795903">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-792218618">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="-1743652803">[播放任务列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：删除任务接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取任务id,利用创建任务接口输出OUT_policy_id】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3355">id</stringProp>
                  <stringProp name="55126294">timestamp</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1421376150">
                    <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                    <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  </collectionProp>
                  <collectionProp name="1418091185">
                    <stringProp name="691625"> 使用</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="891239504">##接口【删除任务】相关##</stringProp>
                  <stringProp name="89652161">[删除任务]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取任务id,利用创建任务接口输出OUT_policy_id】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3355">id</stringProp>
                  <stringProp name="55126294">timestamp</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="259545112">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                    <stringProp name="-1854986192">{&quot;code&quot;:400,&quot;message&quot;:&quot;请求异常,请重试&quot;}</stringProp>
                  </collectionProp>
                  <collectionProp name="1799814813">
                    <stringProp name="-128592364"> 使用 ${OUT_policy_id}</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="891239504">##接口【删除任务】相关##</stringProp>
                  <stringProp name="-921059319">[删除任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id不存在），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取任务id,利用创建任务接口输出OUT_policy_id】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="3355">id</stringProp>
                  <stringProp name="55126294">timestamp</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1127816461">
                    <stringProp name="-473196269">3333333</stringProp>
                    <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                    <stringProp name="-1886814306">找不到任务信息,请确认是否存在或已删除!&quot;</stringProp>
                  </collectionProp>
                  <collectionProp name="1799814813">
                    <stringProp name="-128592364"> 使用 ${OUT_policy_id}</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="891239504">##接口【删除任务】相关##</stringProp>
                  <stringProp name="-921059319">[删除任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id重复删除），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取任务id,利用创建任务接口输出OUT_policy_id】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">2</stringProp>
            </LoopController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id重复删除），接口返回失败" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                  <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="3355">id</stringProp>
                    <stringProp name="55126294">timestamp</stringProp>
                    <stringProp name="-872784595">message_err</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="-1592480147">
                      <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                      <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                      <stringProp name="-1886814306">找不到任务信息,请确认是否存在或已删除!&quot;</stringProp>
                    </collectionProp>
                    <collectionProp name="1011178824">
                      <stringProp name="691625"> 使用</stringProp>
                      <stringProp name="0"></stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">true</boolProp>
                  <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
                </UserParameters>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                    <stringProp name="891239504">##接口【删除任务】相关##</stringProp>
                    <stringProp name="-921059319">[删除任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取媒体文件列表接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1827298422">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1199137958">##接口【获取媒体文件列表】相关##</stringProp>
                <stringProp name="-268619657">[获取媒体文件列表]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（timestamp传入的），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="634963531">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
                <collectionProp name="811701283">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1199137958">##接口【获取媒体文件列表】相关##</stringProp>
                <stringProp name="-1019765357">[获取媒体文件列表]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（type传入不存在值3），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1800026296">
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-849903604">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="295067149">[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（播放任务名称keyword设置为数据库中没有的值），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1838857449">
                  <stringProp name="51">3</stringProp>
                  <stringProp name="1600768">4444</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="1338853553">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="1248622481">任务名称 0067000885广播任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="295067149">[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2048795903">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-792218618">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="-1743652803">[播放任务列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（type传入不存在值3），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1584807943">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="454682259">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-1180086296">isTree</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1582920694">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="454682259">&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（id为空），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="1318692644">status_1</stringProp>
                <stringProp name="1318692645">status_2</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1427529604">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1187290510">
                  <stringProp name="-487541163">${OUT_id}id为空</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（status为空），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1858742193">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1263580153">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2049902710">status值为空</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="-892481550">status</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-899522802">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（status传入不存在值3），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-934624384">remark</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1858742193">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="691843">同意</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1263580153">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2049902710">status值为空</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（审核意见remark不合法检查：中文，英文，数字，下划线，中划线，2-30字符）" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-525865166">remark_1</stringProp>
                <stringProp name="-525865165">remark_2</stringProp>
                <stringProp name="-525865164">remark_3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="721708227">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1174742731">{&quot;code&quot;:400,&quot;message&quot;:&quot;保存失败&quot;}</stringProp>
                  <stringProp name="86072929">\&quot;a\&quot;</stringProp>
                  <stringProp name="59909052">\&quot;a-&amp;*\&quot;</stringProp>
                  <stringProp name="-1962902668">a1234567891234567890123456789001234567890123456789b\&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-1970588477">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2049902710">status值为空</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2029785101">{&quot;code&quot;:100010200,&quot;message&quot;:&quot;解密失败&quot;}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name_1	&quot;a&quot;
media_name_2	&quot;a-&amp;*&quot;
media_name_3	&quot;a1234567891234567890123456789001234567890123456789b&quot;</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">remark</stringProp>
              <stringProp name="ForeachController.returnVal">remark</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                  <stringProp name="-1739505320">[媒体审核接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：新增应急或日常任务接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取group_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="1020178624">数据准备[接口]：【获取分组列表group_id】利用获取分组列表接口，输出{group_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取media_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="1957491360">数据准备[接口]：【获取媒体管理列表media_id】利用获取媒体管理列表接口，输出{media_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="733416603">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47693152">21:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                </collectionProp>
                <collectionProp name="535946194">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（name重复时），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1443118967">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                </collectionProp>
                <collectionProp name="535946194">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（level=1~4)," enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="69785142">level_1</stringProp>
                <stringProp name="69785143">level_2</stringProp>
                <stringProp name="69785144">level_3</stringProp>
                <stringProp name="69785145">level_4</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-463777923">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="52">4</stringProp>
                </collectionProp>
                <collectionProp name="417568687">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">level</stringProp>
              <stringProp name="ForeachController.returnVal">level</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">4</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                  <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（type=0~1)," enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-858803092">type_1</stringProp>
                <stringProp name="-858803091">type_2</stringProp>
                <stringProp name="102865796">level</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="683315028">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <collectionProp name="-2112891853">
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">type</stringProp>
              <stringProp name="ForeachController.returnVal">type</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                  <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（cycle=0~1)," enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="3575610">type</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="1227424536">cycle_1</stringProp>
                <stringProp name="1227424537">cycle_2</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="130391694">
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <collectionProp name="1883285335">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="-1190936922">播放形式,0:周期,1:</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">cycle</stringProp>
              <stringProp name="ForeachController.returnVal">cycle</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                  <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（weekday=各自比值如:1;2;3)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="3575610">type</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="1227424536">cycle_1</stringProp>
                <stringProp name="1227424537">cycle_2</stringProp>
                <stringProp name="-2101260070">weekday_1</stringProp>
                <stringProp name="-2101260069">weekday_2</stringProp>
                <stringProp name="-2101260068">weekday_3</stringProp>
                <stringProp name="-2101260067">weekday_4</stringProp>
                <stringProp name="-2101260066">weekday_5</stringProp>
                <stringProp name="-2101260065">weekday_6</stringProp>
                <stringProp name="-2101260064">weekday_7</stringProp>
                <stringProp name="-2101260063">weekday_8</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-685695601">
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48968">1;2</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="-2019855367">1;2;3;4</stringProp>
                  <stringProp name="244211987">1;2;3;4;5</stringProp>
                  <stringProp name="-1535479890">1;2;3;4;5;6</stringProp>
                  <stringProp name="1872577418">1;2;3;4;5;6;7</stringProp>
                  <stringProp name="47063976">1;6;7</stringProp>
                </collectionProp>
                <collectionProp name="1787240706">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="-1190936922">播放形式,0:周期,1:</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">weekday</stringProp>
              <stringProp name="ForeachController.returnVal">weekday</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">8</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                  <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（volume=1~10)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="3575610">type</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="1227424536">cycle_1</stringProp>
                <stringProp name="1227424537">cycle_2</stringProp>
                <stringProp name="-1869769652">volume_1</stringProp>
                <stringProp name="-1869769651">volume_2</stringProp>
                <stringProp name="-1869769650">volume_3</stringProp>
                <stringProp name="-1869769649">volume_4</stringProp>
                <stringProp name="-1869769648">volume_5</stringProp>
                <stringProp name="-1869769647">volume_6</stringProp>
                <stringProp name="-1869769646">volume_7</stringProp>
                <stringProp name="-1869769645">volume_8</stringProp>
                <stringProp name="-1869769644">volume_9</stringProp>
                <stringProp name="-2128284316">volume_10</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1750325094">
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="51">3</stringProp>
                  <stringProp name="52">4</stringProp>
                  <stringProp name="53">5</stringProp>
                  <stringProp name="54">6</stringProp>
                  <stringProp name="55">7</stringProp>
                  <stringProp name="56">8</stringProp>
                  <stringProp name="57">9</stringProp>
                  <stringProp name="1567">10</stringProp>
                </collectionProp>
                <collectionProp name="-422786321">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="-1190936922">播放形式,0:周期,1:</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">volume</stringProp>
              <stringProp name="ForeachController.returnVal">volume</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">10</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                  <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="455721125">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="1449589344">111111</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（type=错误不存在的值2），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1260516511">
                  <stringProp name="50">2</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（level=错误不存在的值5），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1918859345">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="53">5</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（mid=错误不存在的值233），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1084935844">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49682">233</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="988218157">任务中媒体文件异常</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
${media_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（group=错误不存在的值6666），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1688452141">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="1662336">6666</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="1711397233">请确认您是否具备当前所选分组权限!</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${group_id}
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（type=错误不存在的值2），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1260516511">
                  <stringProp name="50">2</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（cycle=错误不存在的值2），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1492912289">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（assgin=错误不存在的值2），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1718499617">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（volume=错误不存在的值11），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-428208132">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-184646567">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="711000734">[新增日常任务]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（name为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1389978013">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-1872730290">请填写任务名称</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
cyl_测试日常任务</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（level为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1539081734">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-218349088">请选择优先级</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（mid为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-519345225">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="1907978183">请选择媒体文件</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${media_id}
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（group为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-755758900">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-145557003">请选择分组</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${group_id}
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（tiimestampl为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="553430620">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">
${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（type为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="3373707">name</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-151975320">
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="1671367628">cyl_测试日常任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="675432726"> ${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-74068376">请填写合法的任务类型</stringProp>
                </collectionProp>
                <collectionProp name="-565512121">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="89">Y</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（name不合法检查：中文，英文，数字，下划线，中划线，2-30字符）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="95131878">cycle</stringProp>
                <stringProp name="1112183971">begin_time</stringProp>
                <stringProp name="1725551537">end_time</stringProp>
                <stringProp name="99228">day</stringProp>
                <stringProp name="-1408204561">assign</stringProp>
                <stringProp name="-810883302">volume</stringProp>
                <stringProp name="102865796">level</stringProp>
                <stringProp name="108104">mid</stringProp>
                <stringProp name="98629247">group</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="1226862376">weekday</stringProp>
                <stringProp name="1018214091">describe</stringProp>
                <stringProp name="-338200277">showinfo</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1052831875">name_1</stringProp>
                <stringProp name="-1052831874">name_2</stringProp>
                <stringProp name="-1052831873">name_3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1573817815">
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="47663361">20:27</stringProp>
                  <stringProp name="1020067966">2021-12-13</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-821288720">${media_id}</stringProp>
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="675432726"> ${__time(/1000,)}</stringProp>
                  <stringProp name="47060128">1;2;3</stringProp>
                  <stringProp name="1005079562">这是一个测试</stringProp>
                  <stringProp name="103609040">led展示</stringProp>
                  <stringProp name="-51288502">type不能为空</stringProp>
                  <stringProp name="86072929">\&quot;a\&quot;</stringProp>
                  <stringProp name="59909052">\&quot;a-&amp;*\&quot;</stringProp>
                  <stringProp name="-587862034">\&quot;a1234567891234567890123456789001234567890123456789b\&quot;</stringProp>
                  <stringProp name="170615572">任务名称只能包含字母、数字、下划线、中划线、中文。长度2-50个字符	</stringProp>
                </collectionProp>
                <collectionProp name="763476358">
                  <stringProp name="-45156382">任务类型0:应急,1:日常  Y</stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746631959">播放形式,0:周期,1:指定时间</stringProp>
                  <stringProp name="1362927496">音量1~10</stringProp>
                  <stringProp name="659329481">优先级1~4    Y</stringProp>
                  <stringProp name="488577530">Y 由媒体列表接口获取id并根据选择顺序分号拼接,例:369;356</stringProp>
                  <stringProp name="1275858015">Y 由分组列表接口获取id拼接,例:73;78</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1832933020">日常任务类型:周期性值1~7例:1;2;3</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1393040909">Y cyl_测试日常任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">appName_1	&quot;a&quot;		
appName_2	&quot;a-&amp;*&quot;		
appName_3	&quot;a1234567891234567890123456789001234567890123456789b&quot;		
message_err	应用名称只能包含字母、数字、下划线、中划线、中文。长度2-50个字符		</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">name</stringProp>
              <stringProp name="ForeachController.returnVal">name</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1048572909">##接口【新增日常任务】相关##</stringProp>
                  <stringProp name="581745932">[新增日常任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="true"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：播放中的任务进行停播口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取OUT_play_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="1048659654">数据准备[接口]：【获取在播任务play_id】利用在播任务接口，输出{OUT_play_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1484036851">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1076240010">##接口【播放中的任务进行停播】相关##</stringProp>
                <stringProp name="1126849799">[播放中的任务进行停播]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1346289041">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1076240010">##接口【播放中的任务进行停播】相关##</stringProp>
                <stringProp name="2118383363">[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id=错误不存在的值1111），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="917802002">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1508416">1111</stringProp>
                  <stringProp name="144287525">未查找到要停播的任务</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1076240010">##接口【播放中的任务进行停播】相关##</stringProp>
                <stringProp name="2118383363">[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id=已经停播的任务ID），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1465720425">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="1508416">1111</stringProp>
                  <stringProp name="2135923636">任务已经停播</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1076240010">##接口【播放中的任务进行停播】相关##</stringProp>
                <stringProp name="2118383363">[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（id为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1913949851">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="97047642">必要参数不能为空</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1076240010">##接口【播放中的任务进行停播】相关##</stringProp>
                <stringProp name="2118383363">[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1789340968">
                  <stringProp name="0"></stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">  ${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1076240010">##接口【播放中的任务进行停播】相关##</stringProp>
                <stringProp name="2118383363">[播放中的任务进行停播]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：启用禁用任务接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取OUT_policy_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(status=1新建任务先启用）检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="531513842">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1462148014">&quot;任务启用成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-1157274702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                <stringProp name="1500623645">[启用禁用任务]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(status=2新建任务先启用，再禁用）检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="252297064">res_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1995017299">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-1951106916">任务禁用成功</stringProp>
                </collectionProp>
                <collectionProp name="-1157274702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                <stringProp name="1500623645">[启用禁用任务]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（status=2新建任务直接禁用），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="55126294">timestamp</stringProp>
                  <stringProp name="3355">id</stringProp>
                  <stringProp name="-892481550">status</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="914431102">
                    <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                    <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                    <stringProp name="50">2</stringProp>
                    <stringProp name="956249469">禁用异常</stringProp>
                  </collectionProp>
                  <collectionProp name="-1157274702">
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                  <stringProp name="-596699347">[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-780735624">
                  <stringProp name="1539200">2222</stringProp>
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
                <collectionProp name="-1157274702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                <stringProp name="-596699347">[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（id=错误不存在的值1111），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2121721184">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="46760945">11111</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-1951162335">任务禁用失败</stringProp>
                </collectionProp>
                <collectionProp name="-1157274702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                <stringProp name="-596699347">[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（id为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2119414124">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="519179825">任务ID不能为空</stringProp>
                </collectionProp>
                <collectionProp name="-1157274702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                <stringProp name="-596699347">[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="3355">id</stringProp>
                <stringProp name="-892481550">status</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1478044916">
                  <stringProp name="0"></stringProp>
                  <stringProp name="37015179">${id}</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
                <collectionProp name="-1157274702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-823700068">任务状态status 1:启用,2:禁用</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy_id  ${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1832876340">##接口【启用禁用任务】相关##</stringProp>
                <stringProp name="-596699347">[启用禁用任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取一键喊话地址接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取group_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="1020178624">数据准备[接口]：【获取分组列表group_id】利用获取分组列表接口，输出{group_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-332375987">
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1668971894">##接口【获取一键喊话地址】相关##</stringProp>
                <stringProp name="1933801287">[获取一键喊话地址]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1022394155">
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="1539200">2222</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1668971894">##接口【获取一键喊话地址】相关##</stringProp>
                <stringProp name="1807742147">[获取一键喊话地址]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（group_id=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="341250891">
                  <stringProp name="47715250">22222</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="783035843">未找到音箱设备</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${group_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1668971894">##接口【获取一键喊话地址】相关##</stringProp>
                <stringProp name="1807742147">[获取一键喊话地址]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（id为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="835802202">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${group_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1668971894">##接口【获取一键喊话地址】相关##</stringProp>
                <stringProp name="1807742147">[获取一键喊话地址]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="506361563">group_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1890433708">
                  <stringProp name="-149757429">${group_id}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1668971894">##接口【获取一键喊话地址】相关##</stringProp>
                <stringProp name="1807742147">[获取一键喊话地址]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：停止一键喊话任务接口" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取accessToken】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取OUT_policy_id】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="1546095634">数据准备[接口]：【获取新增日常任务policy_id】利用获取新增应急任务接口，输出{OUT_policy_id}）</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1421376150">
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  timestamp  timestamp</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-596695699">##接口【停止一键喊话任务】相关##</stringProp>
                <stringProp name="-1220879036">[停止一键喊话任务]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（timestamp=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1009664459">
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="48657">111</stringProp>
                  <stringProp name="-885655859">无效时间戳</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">id
status  ${OUT_policy-id}  timestamp  timestamp</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-596695699">##接口【停止一键喊话任务】相关##</stringProp>
                <stringProp name="-2009604442">[停止一键喊话任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（notice_id=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1485185100">
                  <stringProp name="1539200">2222</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="319970320">notice_id值错误</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-596695699">##接口【停止一键喊话任务】相关##</stringProp>
                <stringProp name="-2009604442">[停止一键喊话任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（notice_id为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1396831626">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="2004920234">notice_id值不能为空</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${OUT_policy_id}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-596695699">##接口【停止一键喊话任务】相关##</stringProp>
                <stringProp name="-2009604442">[停止一键喊话任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（timestamp为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1898728418">notice_id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1289700393">
                  <stringProp name="-267731843">${OUT_policy_id}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1587399237">timestamp参数缺失</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__time(/1000,)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-596695699">##接口【停止一键喊话任务】相关##</stringProp>
                <stringProp name="-2009604442">[停止一键喊话任务]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;备用模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：播放任务列表接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1153863026">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
                <collectionProp name="-1828532371">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="-1743652803">[播放任务列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查type=1~0）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-858803092">type_1</stringProp>
                <stringProp name="-858803091">type_2</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="27895104">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <collectionProp name="-1492313959">
                  <stringProp name="0"></stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">page</stringProp>
              <stringProp name="ForeachController.returnVal">page</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1421912132">##接口【媒体审核接口】相关##</stringProp>
                  <stringProp name="1097956877">[媒体审核接口]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（type传入不存在值3），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1800026296">
                  <stringProp name="51">3</stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-849903604">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="295067149">[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（播放任务名称keyword设置为数据库中没有的值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1838857449">
                  <stringProp name="51">3</stringProp>
                  <stringProp name="1600768">4444</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="1338853553">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="1248622481">任务名称 0067000885广播任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="295067149">[播放任务列表接口]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3575610">type</stringProp>
                <stringProp name="-814408215">keyword</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2048795903">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-454794342">0067000885广播任务</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="-792218618">
                  <stringProp name="-284279764">type类型 0：应急、1：日常</stringProp>
                  <stringProp name="623370505">任务名称</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">type
keyword
page</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1884640812">##接口【播放任务列表接口】相关##</stringProp>
                <stringProp name="-1743652803">[播放任务列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：媒体删除接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取新增媒体{OUT_id}】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
              <stringProp name="-1330422213">数据准备[接口]：【获取新增媒体id】利用新增媒体接口，输出{OUT_id}）</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="897386100">
                  <stringProp name="-1414210182">${OUT_id}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-2027849705">##接口【媒体删除接口】相关##</stringProp>
                <stringProp name="1793473818">[媒体删除接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（ID为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1209071650">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="259375943">${message_err}</stringProp>
                </collectionProp>
                <collectionProp name="-1051293103">
                  <stringProp name="1003128883"> id 为空,目前测试没有收到应答包</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-2027849705">##接口【媒体删除接口】相关##</stringProp>
                <stringProp name="75374827">[媒体删除接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（id传入不存在值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3355">id</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="345480431">
                  <stringProp name="1449589344">111111</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-1843588150">{&quot;code&quot;:400,&quot;message&quot;:&quot;媒体资源不存在或已删除&quot;}</stringProp>
                </collectionProp>
                <collectionProp name="-1051293103">
                  <stringProp name="1003128883"> id 为空,目前测试没有收到应答包</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-2027849705">##接口【媒体删除接口】相关##</stringProp>
                <stringProp name="75374827">[媒体删除接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：媒体管理列表接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1638313341">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="-232584884">[媒体管理列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：异常多角度（media_name输入不存在的值）可以返回成功0条记录" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1879309218">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49623860">44444</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-167180939">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:{&quot;count&quot;:&quot;0&quot;,&quot;page_size&quot;:10,&quot;page&quot;:1,&quot;items&quot;:[],&quot;code&quot;:&quot;200&quot;}}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page_size传入错误数据类型），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-517340493">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page传入错误数据类型），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-232598301">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数缺少异常检查（无token参数），接口返回失败（token设置为空无法生效）" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="false">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1676293720">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-1564260163">登录状态过期</stringProp>
                  <stringProp name="-712702337">${accessToken}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：待审核媒体列表接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查正常入参）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1638313341">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-223112211">[待审核媒体列表接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：异常多角度（media_name输入不存在的值）可以返回成功0条记录" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1496337058">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49623860">44444</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1039751822">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page_size传入错误数据类型），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-517340493">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（page传入错误数据类型），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-232598301">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必参数缺少异常检查（无token参数），接口返回失败（token设置为空无法生效）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="-1042689291">accessToken</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="886630405">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="798459">我们</stringProp>
                  <stringProp name="-1564260163">登录状态过期</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2127431852">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;</stringProp>
                </collectionProp>
                <collectionProp name="1975299702">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="2144186376">${accessToken} token设置为空</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="886185714">##接口【待审核媒体列表接口】相关##</stringProp>
                <stringProp name="-136722568">[待审核媒体列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：异常多角度（media_name输入不存在的值）可以返回成功0条记录" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取token】" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1361602769">##数据准备【单/多接口组合-有用】相关##</stringProp>
                <stringProp name="2113424786">数据准备[接口]：【获取token】利用获取token接口获取响应体中的accessToken值，输出{accessToken}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2063490517">timstamp</stringProp>
                <stringProp name="1939673606">media_name</stringProp>
                <stringProp name="883849137">page_size</stringProp>
                <stringProp name="3433103">page</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1879309218">
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="49623860">44444</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-167180939">{&quot;code&quot;:200,&quot;message&quot;:&quot;成功&quot;,&quot;data&quot;:{&quot;count&quot;:&quot;0&quot;,&quot;page_size&quot;:10,&quot;page&quot;:1,&quot;items&quot;:[],&quot;code&quot;:&quot;200&quot;}}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">media_name
page_size
page
</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1518865509">##接口【媒体管理列表接口】相关##</stringProp>
                <stringProp name="490663161">[媒体管理列表接口]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（userCode为空），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1847074020">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-210512484">userCode参数错误，请重新输入</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-858021829">[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（userCode传入错误的值），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1213696321">
                  <stringProp name="-1179965519">111111111</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="-210512484">userCode参数错误，请重新输入</stringProp>
                </collectionProp>
                <collectionProp name="-1740119754">
                  <stringProp name="-2048516698">错误的userCode</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="9">	</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-858021829">[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（userCode传入已被删除的值），接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266981288">userCode</stringProp>
                <stringProp name="55126294">timestamp</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1573786436">
                  <stringProp name="-439273507">${OUT_userCode}</stringProp>
                  <stringProp name="-1777990346">${__time(/1000,)}</stringProp>
                  <stringProp name="2061413474">用户删除成功</stringProp>
                </collectionProp>
                <collectionProp name="-550854462">
                  <stringProp name="1414267346">重复删除已被删除的用户</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="740858279">##接口【用户删除】相关##</stringProp>
                <stringProp name="-858021829">[用户删除]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：用户新增接口（租户管理员）" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="false">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="false">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="false">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1612097">
                  <stringProp name="84103">29000029038</stringProp>
                  <stringProp name="625994203">Ffcs123$%^</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1602564119">##接口【当前登录用户信息】相关##</stringProp>
                <stringProp name="-866051000">[当前登录用户信息]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：用户接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-844109973">##接口【修改服务的滚动升级】相关##</stringProp>
                <stringProp name="1884231700">[修改服务的滚动升级]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：验证码接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：登录接口（传统方式）" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="false">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <intProp name="groupSize">0</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取验证码code】利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__time(,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NULL</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（正确的用户名密码）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="329349772">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
                <collectionProp name="-398081287">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言--正则匹配" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-963499297">\{&quot;code&quot;:0,&quot;t&quot;:[0-9]+,&quot;content&quot;:\{&quot;menuList&quot;:\[\{&quot;createTime&quot;:[0-9]+,&quot;id&quot;:88,&quot;name&quot;:&quot;应用管理&quot;.*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（username为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1198678039">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-609490706">用户名不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（password为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="133631169">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1532732299">密码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：登录接口（抽离通用模块）" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="false">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取验证码的校验code】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="-575991547">数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（数据准备-准备已经删除的用户）" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="450151435">数据准备[SQL]：【获取删除用户】数据库随机抽取已经删除的用户，输出{OUT_username_del}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（正确的用户名密码）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="329349772">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
                <collectionProp name="-398081287">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器-正常值" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查freeLogin各种合法值：false，null，&quot;&quot;）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="239760591">freeLogin_1</stringProp>
                <stringProp name="239760592">freeLogin_2</stringProp>
                <stringProp name="239760593">freeLogin_3</stringProp>
                <stringProp name="239760594">freeLogin_4</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1577192428">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="52">4</stringProp>
                </collectionProp>
                <collectionProp name="-1503421239">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="996291361">用于循环调用的变量名称前缀</stringProp>
                  <stringProp name="-455038423">循环调用的次数</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">${prefix_var}</stringProp>
              <stringProp name="ForeachController.returnVal">${prefix_var}</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${prefix_num}</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（验证平台管理员、团队管理员等角色用户可正常登录）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器01" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="329349772">
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                  <collectionProp name="-398081287">
                    <stringProp name="29623262">用户名</stringProp>
                    <stringProp name="759035">密码</stringProp>
                    <stringProp name="39160812">验证码</stringProp>
                    <stringProp name="660050404">验证码校验code</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【正常值】" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器02" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-188797616">
                    <stringProp name="-2095290459">${USER_name_admin}</stringProp>
                    <stringProp name="-724509857">${USER_pass_admin}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                  <collectionProp name="-398081287">
                    <stringProp name="29623262">用户名</stringProp>
                    <stringProp name="759035">密码</stringProp>
                    <stringProp name="39160812">验证码</stringProp>
                    <stringProp name="660050404">验证码校验code</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【正常值】" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（随机抽取10个有效用户进行登录测试）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1117056097">
                    <stringProp name="-399970529">${OUT_username}</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                  <collectionProp name="-543851142">
                    <stringProp name="29623262">用户名</stringProp>
                    <stringProp name="759035">密码</stringProp>
                    <stringProp name="39160812">验证码</stringProp>
                    <stringProp name="660050404">验证码校验code</stringProp>
                    <stringProp name="610723088">是否保持登录15天</stringProp>
                  </collectionProp>
                  <collectionProp name="329349772">
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（数据准备-随机抽取正常状态的用户）" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                  <stringProp name="-494103065">数据准备[SQL]：【获取正常用户】数据库随机抽取正常状态的用户，输出{OUT_username}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【正常值】" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">100</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">100</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（username为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1198678039">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-609490706">用户名不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（password为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="133631169">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1532732299">密码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（验证码randomCode为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-749438221">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1459701252">验证码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（verificationCode为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-97508999">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-747521050">校验码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="753388459">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
                <collectionProp name="-543851142">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                </collectionProp>
                <collectionProp name="329349772">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（传入已经删除的username），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-277830807">
                  <stringProp name="-1135180717">${OUT_username_del}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1545864663">用户名或密码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（username传入不存在值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-335766131">
                  <stringProp name="-1394882115">${USER_name}eer</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1545864663">用户名或密码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（password传入错误密码），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-114586065">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="-2019524138">${USER_pass}err</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1545864663">用户名或密码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（verificationCode传入错误的验证码校验code），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2079334238">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1566820122">${OUT_verification-code}11</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1020016131">验证码超时</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（传入正确的verificationCode，不匹配的randomCode），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1141274068">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1626587">5000</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1019946270">验证码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}【手工】：正值多角度（freeLogin=true），验证15天免登陆" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤-数据准备：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                  <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1：登录接口，freeLogin=true，输出{OUT_token}" enabled="false">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1633832987">
                    <stringProp name="3569038">true</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_token</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（打印token）" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;token为：${OUT_token}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2：调用查询用户所在团队接口，验证在有效时间内（需求设计为15天免登陆）可正常查询" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1126217128">OUT_token</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="2096350098">
                    <stringProp name="-1370208083">78f689b3-5a9e-4587-a0e8-623a49b6c181 </stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/group/queryByUser</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${OUT_token}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}【手工】：正值多角度（手工录入验证码），验证接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                  <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;验证码token为：${OUT_verification-code}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2：手工修改验证码，进行登录操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1262280921">
                    <stringProp name="97196323">false</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1717175">8186</stringProp>
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="-1794302652">77f45cd9-7930-4e77-8d28-0a6a39e641be</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}【手工】：错误值检查（验证码已经用过，再次登录用原来的验证码），验证接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                  <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;验证码token为：${OUT_verification-code}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数（后面两步共用）" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1426596127">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1572928">3652</stringProp>
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="470979425">c110de09-ef03-4df2-8101-72791e36391a </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2：手工修改验证码，进行登录操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤3：【5分钟后再试验】手工修改验证码，再次进行登录操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(检查返回各参数是否正确)，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1611823820">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor（获取json字段值）" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON-permission-id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.permission[*].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.permission.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_permission_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_permission_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_permission_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].permissionType&quot;);
    		vars.put(&quot;Json_permission_permissionType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].path&quot;);
    		vars.put(&quot;Json_permission_path_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].parentId&quot;);
    		vars.put(&quot;Json_permission_parentId_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_permission_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].updateTime&quot;);
    		vars.put(&quot;Json_permission_updateTime_&quot;+i,str);
    		
    	}
	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
    	vars.put(&quot;Json_user_id&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
    	vars.put(&quot;Json_user_username&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.email&quot;);
    	vars.put(&quot;Json_user_email&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.createTime&quot;);
    	vars.put(&quot;Json_user_createTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.updateTime&quot;);
    	vars.put(&quot;Json_user_updateTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.enable&quot;);
    	vars.put(&quot;Json_user_enable&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.realName&quot;);
    	vars.put(&quot;Json_user_realName&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.role&quot;);
    	vars.put(&quot;Json_user_role&quot;,str);    	
//	str = Test.readjson(response_data,&quot;$.content.user.roleId&quot;);
//    	vars.put(&quot;Json_user_roleId&quot;,str);        	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1719467628">loginName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1769670314">
                    <stringProp name="1685720944">${username}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select a.id,a.username,a.email,unix_timestamp(a.create_time)*1000,unix_timestamp(a.update_time)*1000,case a.`enable` when 1 then &apos;true&apos; else &apos;false&apos; end ,a.real_name,
d.id,d.name,d.`type`,d.path,d.parent_id,unix_timestamp(d.create_time)*1000,unix_timestamp(d.update_time)*1000
from t_user a left join t_user_role b on a.id = b.user_id left join t_role_permission c on b.role_id = c.role_id right join t_permission_new d on c.permission_id = d.id
where a.username = &apos;${loginName}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_user_id,SQL_user_username,SQL_user_email,SQL_user_createTime,SQL_user_updateTime,SQL_user_enable,SQL_user_realName,SQL_permission_id,SQL_permission_name,SQL_permission_permissionType,SQL_permission_path,SQL_permission_parentId,SQL_permission_createTime,SQL_permission_updateTime</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_permission_#&quot;);
String str_sql_num = vars.get(&quot;SQL_permission_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_permissionType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_permissionType_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_path_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_path_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_parentId_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_parentId_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_updateTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_updateTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}







</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(检查返回各参数是否正确，多检查了多几个字段)，检查返回数据是否正确" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1611823820">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.permission.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_permission_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_permission_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_permission_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].permissionType&quot;);
    		vars.put(&quot;Json_permission_permissionType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].path&quot;);
    		vars.put(&quot;Json_permission_path_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].parentId&quot;);
    		vars.put(&quot;Json_permission_parentId_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_permission_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].updateTime&quot;);
    		vars.put(&quot;Json_permission_updateTime_&quot;+i,str);
    		
    	}
	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
    	vars.put(&quot;Json_user_id&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
    	vars.put(&quot;Json_user_username&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.password&quot;);
    	vars.put(&quot;Json_user_password&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.mobile&quot;);
    	vars.put(&quot;Json_user_mobile&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.email&quot;);
    	vars.put(&quot;Json_user_email&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.createTime&quot;);
    	vars.put(&quot;Json_user_createTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.updateTime&quot;);
    	vars.put(&quot;Json_user_updateTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.enable&quot;);
    	vars.put(&quot;Json_user_enable&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.realName&quot;);
    	vars.put(&quot;Json_user_realName&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.avatar&quot;);
    	vars.put(&quot;Json_user_avatar&quot;,str);    	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1719467628">loginName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1769670314">
                    <stringProp name="1685720944">${username}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select a.id,a.username,a.password,a.mobile,a.email,unix_timestamp(a.create_time)*1000,unix_timestamp(a.update_time)*1000,case a.`enable` when 1 then &apos;true&apos; else &apos;false&apos; end ,a.real_name,ifnull(a.avatar,&apos;null&apos;),
d.id,d.name,d.`type`,d.path,d.parent_id,unix_timestamp(d.create_time)*1000,unix_timestamp(d.update_time)*1000
from t_user a left join t_user_role b on a.id = b.user_id left join t_role_permission c on b.role_id = c.role_id right join t_permission_new d on c.permission_id = d.id
where a.username = &apos;${loginName}&apos;



</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_user_id,SQL_user_username,SQL_user_password,SQL_user_mobile,SQL_user_email ,SQL_user_createTime,SQL_user_updateTime,SQL_user_enable,SQL_user_realName,SQL_user_avatar,SQL_id,SQL_name,SQL_permissionType,SQL_path,SQL_parentId,SQL_createTime,SQL_updateTime</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_password}&quot;,&quot;${Json_user_mobile}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;,&quot;${Json_user_avatar}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;null&quot;,&quot;${SQL_user_mobile_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;,&quot;${SQL_user_avatar_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_permission_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_permissionType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permissionType_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_path_&quot; + i);
	String str_sql = vars.get(&quot;SQL_path_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_parentId_&quot; + i);
	String str_sql = vars.get(&quot;SQL_parentId_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_updateTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_updateTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}







</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <intProp name="LoopController.loops">-1</intProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV 数据文件设置【设置用例的csv数据】" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:\Users\JinGang\Test-Documents\api-auto-test\data\接口：登录接口.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="variableNames">case_name,controller_name,username,password,randomCode,freeLogin,err_message,verificationCode</stringProp>
            </CSVDataSet>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${__BeanShell(ctx.getThreadGroup().getName(),)}]-${No}：${case_name}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
                <stringProp name="SwitchController.value">${controller_name}</stringProp>
              </SwitchController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="通用模块：正常值入参，检查接口返回成功" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="1843337888">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="463377577">${__V(${verificationCode})}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-265713450">username</stringProp>
                        <stringProp name="-860337847">realName</stringProp>
                        <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="通用模块：异常值入参，检验接口返回预期失败信息" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                      <stringProp name="1390607149">err_message</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-2122151400">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="463377577">${__V(${verificationCode})}</stringProp>
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="通用模块：异常值入参（username取），检验接口返回预期失败信息" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                      <stringProp name="1390607149">err_message</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-2122151400">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="463377577">${__V(${verificationCode})}</stringProp>
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="专用模块：异常值入参（verificationCode取自定义值），检验接口返回预期失败信息" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                      <stringProp name="1390607149">err_message</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-736064165">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="11814622">${verificationCode}</stringProp>
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：根据团队查询空间" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(数据准备2-输出{OUT_token_admin})" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="-494103065">数据准备[SQL]：【获取正常用户】数据库随机抽取正常状态的用户，输出{OUT_username}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查（正确入参）" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-223242148">
                  <stringProp name="551305533">${USER_groupId_jingang}</stringProp>
                  <stringProp name="1581949673">${OUT_token_jingang}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                <stringProp name="-1166594592">[根据团队查询空间]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查（随机抽取5个团队数据检查）" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（随机获取一个团队id)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                  <stringProp name="-575991547">数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【用户参数赋值/转换等操作】" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;------用户参数赋值/转换等操作-------&quot;);

vars.put(&quot;Id&quot;,&quot;${Rnd_group_id}&quot;);
vars.put(&quot;token&quot;,&quot;${OUT_token_admin}&quot;);

log.info(&quot;------END-------&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（执行）" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                  <stringProp name="-1166594592">[根据团队查询空间]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（id为空），接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="2273837">Id_1</stringProp>
                <stringProp name="2273838">Id_2</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-693668448">
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="-2037590680">团队id不能为空</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">Id</stringProp>
              <stringProp name="ForeachController.returnVal">Id</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--出现预期失败信息" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                  <stringProp name="29929189">[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（输入的团队id不真实存在），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="294420010">
                  <stringProp name="501205835">4646131</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="-1430013400">团队不存在在</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--出现预期失败信息" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                <stringProp name="29929189">[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（token传入不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1154004766">
                  <stringProp name="551305533">${USER_groupId_jingang}</stringProp>
                  <stringProp name="187832203">${__UUID}</stringProp>
                  <stringProp name="-1160377390">您没有登录，请重新登录</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--出现预期失败信息" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                <stringProp name="29929189">[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：【bug】错误值检查（输入的团队id不在用户所在团队内），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-557633235">
                  <stringProp name="1730">68</stringProp>
                  <stringProp name="982601980">${OUT_token2}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;id&quot;:${Id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/space/querySpaceByGroupId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-577616007">该团队不属于该用户</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="练习：demo" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="http请求默认值元件演示" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP请求" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器-演示Generate parent sample的作用" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;取样器执行中&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2986048">aaaa</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Demo模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：获取Token接口（租户管理员）" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                <stringProp name="1332379264">数据准备[SQL]：【获取用户id】通过用户名{username}，查询该用户的id，输出{OUT_userId}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：验证码接口" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查，验证正确入参，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                <stringProp name="-2025584081">数据准备[SQL]：【获取可删除的应用id和团队id】到数据库查询可进行删除的应用id和和团队groupId，输出{OUT_app_id},{OUT_groupId}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：登录接口（传统方式）" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="false">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <intProp name="groupSize">0</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="数据准备[接口]：【获取验证码code】利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__time(,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NULL</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（正确的用户名密码）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="329349772">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
                <collectionProp name="-398081287">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言--正则匹配" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-963499297">\{&quot;code&quot;:0,&quot;t&quot;:[0-9]+,&quot;content&quot;:\{&quot;menuList&quot;:\[\{&quot;createTime&quot;:[0-9]+,&quot;id&quot;:88,&quot;name&quot;:&quot;应用管理&quot;.*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（username为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1198678039">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-609490706">用户名不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（password为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="133631169">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1532732299">密码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/paas-login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1705043271">${err_message}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：登录接口（抽离通用模块）" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="false">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【数据准备：获取验证码的校验code】" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="-575991547">数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（数据准备-准备已经删除的用户）" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="450151435">数据准备[SQL]：【获取删除用户】数据库随机抽取已经删除的用户，输出{OUT_username_del}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（正确的用户名密码）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="329349772">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
                <collectionProp name="-398081287">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器-正常值" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（检查freeLogin各种合法值：false，null，&quot;&quot;）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="239760591">freeLogin_1</stringProp>
                <stringProp name="239760592">freeLogin_2</stringProp>
                <stringProp name="239760593">freeLogin_3</stringProp>
                <stringProp name="239760594">freeLogin_4</stringProp>
                <stringProp name="-1339944966">prefix_var</stringProp>
                <stringProp name="-1339952039">prefix_num</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1577192428">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="52">4</stringProp>
                </collectionProp>
                <collectionProp name="-1503421239">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="996291361">用于循环调用的变量名称前缀</stringProp>
                  <stringProp name="-455038423">循环调用的次数</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">${prefix_var}</stringProp>
              <stringProp name="ForeachController.returnVal">${prefix_var}</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">${prefix_num}</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（验证平台管理员、团队管理员等角色用户可正常登录）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器01" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="329349772">
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                  <collectionProp name="-398081287">
                    <stringProp name="29623262">用户名</stringProp>
                    <stringProp name="759035">密码</stringProp>
                    <stringProp name="39160812">验证码</stringProp>
                    <stringProp name="660050404">验证码校验code</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【正常值】" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器02" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-188797616">
                    <stringProp name="-2095290459">${USER_name_admin}</stringProp>
                    <stringProp name="-724509857">${USER_pass_admin}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                  <collectionProp name="-398081287">
                    <stringProp name="29623262">用户名</stringProp>
                    <stringProp name="759035">密码</stringProp>
                    <stringProp name="39160812">验证码</stringProp>
                    <stringProp name="660050404">验证码校验code</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【正常值】" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度（随机抽取10个有效用户进行登录测试）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                  <stringProp name="-451146659">freeLogin</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1117056097">
                    <stringProp name="-399970529">${OUT_username}</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                  <collectionProp name="-543851142">
                    <stringProp name="29623262">用户名</stringProp>
                    <stringProp name="759035">密码</stringProp>
                    <stringProp name="39160812">验证码</stringProp>
                    <stringProp name="660050404">验证码校验code</stringProp>
                    <stringProp name="610723088">是否保持登录15天</stringProp>
                  </collectionProp>
                  <collectionProp name="329349772">
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                    <stringProp name="97196323">false</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（数据准备-随机抽取正常状态的用户）" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                  <stringProp name="-494103065">数据准备[SQL]：【获取正常用户】数据库随机抽取正常状态的用户，输出{OUT_username}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器【正常值】" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">100</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">100</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（username为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1198678039">
                  <stringProp name="0"></stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-609490706">用户名不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（password为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="133631169">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1532732299">密码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（验证码randomCode为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-749438221">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1459701252">验证码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输项检查（verificationCode为空），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-97508999">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-747521050">校验码不能为空</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：必输项检查（所有必输项填入值，其他非必输为空），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="753388459">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
                <collectionProp name="-543851142">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                </collectionProp>
                <collectionProp name="329349772">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（传入已经删除的username），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-277830807">
                  <stringProp name="-1135180717">${OUT_username_del}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1545864663">用户名或密码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（username传入不存在值），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-335766131">
                  <stringProp name="-1394882115">${USER_name}eer</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1545864663">用户名或密码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（password传入错误密码），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-114586065">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="-2019524138">${USER_pass}err</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1545864663">用户名或密码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（verificationCode传入错误的验证码校验code），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2079334238">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1566820122">${OUT_verification-code}11</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1020016131">验证码超时</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（传入正确的verificationCode，不匹配的randomCode），接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1390607149">err_message</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1141274068">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1626587">5000</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-1019946270">验证码错误</stringProp>
                </collectionProp>
                <collectionProp name="812492408">
                  <stringProp name="29623262">用户名</stringProp>
                  <stringProp name="759035">密码</stringProp>
                  <stringProp name="39160812">验证码</stringProp>
                  <stringProp name="660050404">验证码校验code</stringProp>
                  <stringProp name="610723088">是否保持登录15天</stringProp>
                  <stringProp name="-921609633">接口返回的错误信息校验内容</stringProp>
                </collectionProp>
                <collectionProp name="1619933389">
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--异常值入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                <stringProp name="1294846539">[登录]-通用模块：异常值入参，检验接口返回预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}【手工】：正值多角度（freeLogin=true），验证15天免登陆" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤-数据准备：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                  <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1：登录接口，freeLogin=true，输出{OUT_token}" enabled="false">
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1633832987">
                    <stringProp name="3569038">true</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1599742">4321</stringProp>
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_token</stringProp>
                  <stringProp name="RegexExtractor.regex">token: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（打印token）" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;token为：${OUT_token}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2：调用查询用户所在团队接口，验证在有效时间内（需求设计为15天免登陆）可正常查询" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1126217128">OUT_token</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="2096350098">
                    <stringProp name="-1370208083">78f689b3-5a9e-4587-a0e8-623a49b6c181 </stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/group/queryByUser</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value">${OUT_token}</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}【手工】：正值多角度（手工录入验证码），验证接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                  <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;验证码token为：${OUT_verification-code}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2：手工修改验证码，进行登录操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-451146659">freeLogin</stringProp>
                  <stringProp name="1216985755">password</stringProp>
                  <stringProp name="115141968">randomCode</stringProp>
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="642216616">verificationCode</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1262280921">
                    <stringProp name="97196323">false</stringProp>
                    <stringProp name="1733575983">${USER_pass}</stringProp>
                    <stringProp name="1717175">8186</stringProp>
                    <stringProp name="1731722741">${USER_name}</stringProp>
                    <stringProp name="-1794302652">77f45cd9-7930-4e77-8d28-0a6a39e641be</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}【手工】：错误值检查（验证码已经用过，再次登录用原来的验证码），验证接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤1：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names"/>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1"/>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
              </UserParameters>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                  <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NULL</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;验证码token为：${OUT_verification-code}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数（后面两步共用）" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1426596127">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1572928">3652</stringProp>
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="470979425">c110de09-ef03-4df2-8101-72791e36391a </stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤2：手工修改验证码，进行登录操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="步骤3：【5分钟后再试验】手工修改验证码，再次进行登录操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">token</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">secure</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-265713450">username</stringProp>
                    <stringProp name="-860337847">realName</stringProp>
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(检查返回各参数是否正确)，接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1611823820">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor（获取json字段值）" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">JSON-permission-id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.permission[*].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.permission.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_permission_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_permission_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_permission_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].permissionType&quot;);
    		vars.put(&quot;Json_permission_permissionType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].path&quot;);
    		vars.put(&quot;Json_permission_path_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].parentId&quot;);
    		vars.put(&quot;Json_permission_parentId_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_permission_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].updateTime&quot;);
    		vars.put(&quot;Json_permission_updateTime_&quot;+i,str);
    		
    	}
	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
    	vars.put(&quot;Json_user_id&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
    	vars.put(&quot;Json_user_username&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.email&quot;);
    	vars.put(&quot;Json_user_email&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.createTime&quot;);
    	vars.put(&quot;Json_user_createTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.updateTime&quot;);
    	vars.put(&quot;Json_user_updateTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.enable&quot;);
    	vars.put(&quot;Json_user_enable&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.realName&quot;);
    	vars.put(&quot;Json_user_realName&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.role&quot;);
    	vars.put(&quot;Json_user_role&quot;,str);    	
//	str = Test.readjson(response_data,&quot;$.content.user.roleId&quot;);
//    	vars.put(&quot;Json_user_roleId&quot;,str);        	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1719467628">loginName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1769670314">
                    <stringProp name="1685720944">${username}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select a.id,a.username,a.email,unix_timestamp(a.create_time)*1000,unix_timestamp(a.update_time)*1000,case a.`enable` when 1 then &apos;true&apos; else &apos;false&apos; end ,a.real_name,
d.id,d.name,d.`type`,d.path,d.parent_id,unix_timestamp(d.create_time)*1000,unix_timestamp(d.update_time)*1000
from t_user a left join t_user_role b on a.id = b.user_id left join t_role_permission c on b.role_id = c.role_id right join t_permission_new d on c.permission_id = d.id
where a.username = &apos;${loginName}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_user_id,SQL_user_username,SQL_user_email,SQL_user_createTime,SQL_user_updateTime,SQL_user_enable,SQL_user_realName,SQL_permission_id,SQL_permission_name,SQL_permission_permissionType,SQL_permission_path,SQL_permission_parentId,SQL_permission_createTime,SQL_permission_updateTime</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_permission_#&quot;);
String str_sql_num = vars.get(&quot;SQL_permission_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_permissionType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_permissionType_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_path_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_path_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_parentId_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_parentId_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_updateTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permission_updateTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}







</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(检查返回各参数是否正确，多检查了多几个字段)，检查返回数据是否正确" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1611823820">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="1733575983">${USER_pass}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="1731722741">${USER_name}</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">secure</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（获取前一个取样器响应信息进行处理，拆分json字段）" enabled="true">
              <stringProp name="BeanShellSampler.query">import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Predicate;
import net.minidev.json.JSONArray;
public class Test {    
    public static String readjson(String json, String jsonPath) {        
        try
        {
            Object value = JsonPath.read(json, jsonPath, new Predicate[0]);            
            if (value instanceof Integer)
              {
                return value.toString();
              }else if (value instanceof String)
              {
                    return value.toString();
              }else if (value instanceof Boolean)
              {
                    return value.toString();
              }else if (value instanceof JSONArray)
              {
                  JSONArray arr = (JSONArray)value;
                  if(!arr.isEmpty()){return arr.toJSONString();}                  
                  return &quot;&quot;;
              }else if (value instanceof LinkedHashMap)
              {
                    return value.toString();
              }else if (value instanceof float)
              {
                    return value.toString();
              }else{
                  return  value.toString();
              }
        }
        catch(Exception e){
            return &quot;null&quot;;  // 找不到情况默认值
        }        
    }    
}
//------------------------------------------------------------------------------------------------------------------
public static void fun(){
    String response_data=prev.getResponseDataAsString();//prev为JMeter预定义变量，获取前一个响应器的响应信息
    String JsonPath=&quot;$.content.permission.length()&quot;; // 获取
    String result=Test.readjson(response_data,JsonPath);
    vars.put(&quot;Json_permission_#&quot;,result);
    int resultToNum=Integer.parseInt(result);
    log.info(&quot;------------------------详情长度：&quot;+result+&quot;----------------------&quot;);

    for(i = 0;i &lt; resultToNum;i++){
    		String str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].id&quot;);
    		vars.put(&quot;Json_permission_id_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].name&quot;);
    		vars.put(&quot;Json_permission_name_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].permissionType&quot;);
    		vars.put(&quot;Json_permission_permissionType_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].path&quot;);
    		vars.put(&quot;Json_permission_path_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].parentId&quot;);
    		vars.put(&quot;Json_permission_parentId_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].createTime&quot;);
    		vars.put(&quot;Json_permission_createTime_&quot;+i,str);
    		str = Test.readjson(response_data,&quot;$.content.permission[&quot;+ i +&quot;].updateTime&quot;);
    		vars.put(&quot;Json_permission_updateTime_&quot;+i,str);
    		
    	}
	String str = Test.readjson(response_data,&quot;$.content.user.id&quot;);
    	vars.put(&quot;Json_user_id&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.username&quot;);
    	vars.put(&quot;Json_user_username&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.password&quot;);
    	vars.put(&quot;Json_user_password&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.mobile&quot;);
    	vars.put(&quot;Json_user_mobile&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.email&quot;);
    	vars.put(&quot;Json_user_email&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.createTime&quot;);
    	vars.put(&quot;Json_user_createTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.updateTime&quot;);
    	vars.put(&quot;Json_user_updateTime&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.enable&quot;);
    	vars.put(&quot;Json_user_enable&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.realName&quot;);
    	vars.put(&quot;Json_user_realName&quot;,str);
	str = Test.readjson(response_data,&quot;$.content.user.avatar&quot;);
    	vars.put(&quot;Json_user_avatar&quot;,str);    	

    	    
}
// 调用函数执行
fun();









</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1719467628">loginName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1769670314">
                    <stringProp name="1685720944">${username}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">${my_DB}</stringProp>
                <stringProp name="query">select a.id,a.username,a.password,a.mobile,a.email,unix_timestamp(a.create_time)*1000,unix_timestamp(a.update_time)*1000,case a.`enable` when 1 then &apos;true&apos; else &apos;false&apos; end ,a.real_name,ifnull(a.avatar,&apos;null&apos;),
d.id,d.name,d.`type`,d.path,d.parent_id,unix_timestamp(d.create_time)*1000,unix_timestamp(d.update_time)*1000
from t_user a left join t_user_role b on a.id = b.user_id left join t_role_permission c on b.role_id = c.role_id right join t_permission_new d on c.permission_id = d.id
where a.username = &apos;${loginName}&apos;



</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_user_id,SQL_user_username,SQL_user_password,SQL_user_mobile,SQL_user_email ,SQL_user_createTime,SQL_user_updateTime,SQL_user_enable,SQL_user_realName,SQL_user_avatar,SQL_id,SQL_name,SQL_permissionType,SQL_path,SQL_parentId,SQL_createTime,SQL_updateTime</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对单行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 单行字段比较

String[] str_json = {&quot;${Json_user_id}&quot;,&quot;${Json_user_username}&quot;,&quot;${Json_user_password}&quot;,&quot;${Json_user_mobile}&quot;,&quot;${Json_user_email}&quot;,&quot;${Json_user_createTime}&quot;,&quot;${Json_user_updateTime}&quot;,&quot;${Json_user_enable}&quot;,&quot;${Json_user_realName}&quot;,&quot;${Json_user_avatar}&quot;};
String[] str_sql = {&quot;${SQL_user_id_1}&quot;,&quot;${SQL_user_username_1}&quot;,&quot;null&quot;,&quot;${SQL_user_mobile_1}&quot;,&quot;${SQL_user_email_1}&quot;,&quot;${SQL_user_createTime_1}&quot;,&quot;${SQL_user_updateTime_1}&quot;,&quot;${SQL_user_enable_1}&quot;,&quot;${SQL_user_realName_1}&quot;,&quot;${SQL_user_avatar_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str_json.length; i++){
	if(!str_json[i].equals(str_sql[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str_json:&quot; + str_json[i] + &quot;  str_sql:&quot; + str_sql[i];
		IsSuccess = false;
		break;
	}

}


</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对，比对多行字段）" enabled="true">
                <stringProp name="BeanShellSampler.query">
// ##### 多行字段比较
String str_json_num = vars.get(&quot;Json_permission_#&quot;);
String str_sql_num = vars.get(&quot;SQL_id_#&quot;);

if(!str_json_num.equals(str_sql_num)){
	ResponseMessage = &quot;数目匹配不成功！str_json_num:&quot; + str_json_num + &quot;  str_sql_num:&quot; + str_sql_num;
	IsSuccess = false;
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_id_&quot; + i);
	String str_sql = vars.get(&quot;SQL_id_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_name_&quot; + i);
	String str_sql = vars.get(&quot;SQL_name_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_permissionType_&quot; + i);
	String str_sql = vars.get(&quot;SQL_permissionType_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0,j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_path_&quot; + i);
	String str_sql = vars.get(&quot;SQL_path_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_parentId_&quot; + i);
	String str_sql = vars.get(&quot;SQL_parentId_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_createTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_createTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}

for(int i = 0, j = 1;i &lt; Integer.parseInt(str_json_num); i++,j++){
	String str_json = vars.get(&quot;Json_permission_updateTime_&quot; + i);
	String str_sql = vars.get(&quot;SQL_updateTime_&quot; + j);
	
	if(!str_json.equals(str_sql)){
		ResponseMessage = &quot;某项匹配不成功！str_json:&quot; + str_json + &quot;  str_sql:&quot; + str_sql;
		IsSuccess = false;
	}
	
}







</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <intProp name="LoopController.loops">-1</intProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV 数据文件设置【设置用例的csv数据】" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:\Users\JinGang\Test-Documents\api-auto-test\data\接口：登录接口.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="variableNames">case_name,controller_name,username,password,randomCode,freeLogin,err_message,verificationCode</stringProp>
            </CSVDataSet>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${__BeanShell(ctx.getThreadGroup().getName(),)}]-${No}：${case_name}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
                <stringProp name="SwitchController.value">${controller_name}</stringProp>
              </SwitchController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="通用模块：正常值入参，检查接口返回成功" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="1843337888">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="463377577">${__V(${verificationCode})}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-265713450">username</stringProp>
                        <stringProp name="-860337847">realName</stringProp>
                        <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="通用模块：异常值入参，检验接口返回预期失败信息" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                      <stringProp name="1390607149">err_message</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-2122151400">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="463377577">${__V(${verificationCode})}</stringProp>
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="通用模块：异常值入参（username取），检验接口返回预期失败信息" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                      <stringProp name="1390607149">err_message</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-2122151400">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="463377577">${__V(${verificationCode})}</stringProp>
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="专用模块：异常值入参（verificationCode取自定义值），检验接口返回预期失败信息" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-451146659">freeLogin</stringProp>
                      <stringProp name="1216985755">password</stringProp>
                      <stringProp name="115141968">randomCode</stringProp>
                      <stringProp name="-265713450">username</stringProp>
                      <stringProp name="642216616">verificationCode</stringProp>
                      <stringProp name="1390607149">err_message</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="-736064165">
                        <stringProp name="1564648407">${freeLogin}</stringProp>
                        <stringProp name="404756043">${password}</stringProp>
                        <stringProp name="294132726">${randomCode}</stringProp>
                        <stringProp name="1685720944">${username}</stringProp>
                        <stringProp name="11814622">${verificationCode}</stringProp>
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">true</boolProp>
                    <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
                  </UserParameters>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${verificationCode}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ip}</stringProp>
                    <stringProp name="HTTPSampler.port">${port}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">token</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">secure</stringProp>
                          <stringProp name="Header.value"></stringProp>
                        </elementProp>
                      </collectionProp>
                      <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1705043271">${err_message}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
                <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script"></stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：根据团队查询空间" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(数据准备2-输出{OUT_token_admin})" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="-575991547">数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查（正确入参）" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-223242148">
                  <stringProp name="551305533">${USER_groupId_jingang}</stringProp>
                  <stringProp name="1581949673">${OUT_token_jingang}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                <stringProp name="-1166594592">[根据团队查询空间]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查（随机抽取5个团队数据检查）" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">5</stringProp>
            </LoopController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（随机获取一个团队id)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                  <stringProp name="-575991547">数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【用户参数赋值/转换等操作】" enabled="true">
                <stringProp name="BeanShellSampler.query">log.info(&quot;------用户参数赋值/转换等操作-------&quot;);

vars.put(&quot;Id&quot;,&quot;${Rnd_group_id}&quot;);
vars.put(&quot;token&quot;,&quot;${OUT_token_admin}&quot;);

log.info(&quot;------END-------&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（执行）" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                  <stringProp name="-1166594592">[根据团队查询空间]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（id为空），接口返回成功" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="2273837">Id_1</stringProp>
                <stringProp name="2273838">Id_2</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-693668448">
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="-2037590680">团队id不能为空</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">Id</stringProp>
              <stringProp name="ForeachController.returnVal">Id</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--出现预期失败信息" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                  <stringProp name="29929189">[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（输入的团队id不真实存在），验证接口返回成功" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="294420010">
                  <stringProp name="501205835">4646131</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="-1430013400">团队不存在在</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--出现预期失败信息" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                <stringProp name="29929189">[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误值检查（token传入不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1154004766">
                  <stringProp name="551305533">${USER_groupId_jingang}</stringProp>
                  <stringProp name="187832203">${__UUID}</stringProp>
                  <stringProp name="-1160377390">您没有登录，请重新登录</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--出现预期失败信息" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="1089472337">##接口【根据团队查询空间】相关##</stringProp>
                <stringProp name="29929189">[根据团队查询空间]-通用模块：错误入参，检查返回失败，出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：【bug】错误值检查（输入的团队id不在用户所在团队内），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2363">Id</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-557633235">
                  <stringProp name="1730">68</stringProp>
                  <stringProp name="982601980">${OUT_token2}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;id&quot;:${Id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/space/querySpaceByGroupId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-577616007">该团队不属于该用户</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="练习：demo" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="http请求默认值元件演示" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP请求" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器-演示Generate parent sample的作用" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;取样器执行中&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2986048">aaaa</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;应用管理模块&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：创建应用" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(数据准备2-输出{OUT_token_admin})" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="869052411">测试计划</stringProp>
              <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
              <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
              <stringProp name="-575991547">数据准备[SQL]：【获取2.x团队id】到数据库随机查询返回一个2.x的团队id，输出{Rnd_group_id}</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="242274204">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（创建nodejs-8.91语言应用）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-541367408">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="1663667173">&quot;node-${tt}&quot;</stringProp>
                  <stringProp name="583066206">&quot;NODE_JS&quot;</stringProp>
                  <stringProp name="1026535026">&quot;8.91&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1663667173">&quot;node-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（创建nodejs-7.10.1语言应用）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1419429629">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="1663667173">&quot;node-${tt}&quot;</stringProp>
                  <stringProp name="583066206">&quot;NODE_JS&quot;</stringProp>
                  <stringProp name="2057740647">&quot;7.10.1&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1663667173">&quot;node-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（创建nodejs-6.12.2语言应用）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="531563270">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="1663667173">&quot;node-${tt}&quot;</stringProp>
                  <stringProp name="583066206">&quot;NODE_JS&quot;</stringProp>
                  <stringProp name="1170296579">&quot;6.12.2&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1663667173">&quot;node-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（创建python-3.7语言应用）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1117008984">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="-260346780">&quot;PYTHON&quot;</stringProp>
                  <stringProp name="32965000">&quot;3.7&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（创建python-3.6语言应用）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="349107978">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="-260346780">&quot;PYTHON&quot;</stringProp>
                  <stringProp name="32964969">&quot;3.6&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查（创建python-2.7语言应用）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1757425905">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="-260346780">&quot;PYTHON&quot;</stringProp>
                  <stringProp name="32935209">&quot;2.7&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="310036328">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1687465772">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正常多角度检查（项目名称tag重复时可以创建成功）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器(先创建一个应用)" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1928572192">serviceName</stringProp>
                  <stringProp name="110541305">token</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-232314580">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="-235711367">${scrumId_def}</stringProp>
                    <stringProp name="-2123537004">${lobId_def}</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  </collectionProp>
                  <collectionProp name="1256926353">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                    <stringProp name="747852388">外网二级域名</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="1439906893">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(正确入参)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器（重用项目名称）" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1928572192">serviceName</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="1870763699">maintainerId</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-76536048">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="-235711367">${scrumId_def}</stringProp>
                    <stringProp name="-2123537004">${lobId_def}</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="1147794810">${tag}</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                    <stringProp name="1411616725">${USER_id_admin}</stringProp>
                  </collectionProp>
                  <collectionProp name="310036328">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                    <stringProp name="747852388">外网二级域名</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="1687465772">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(成功)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（检查至少含有生产环境），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="698606843">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-555458543">&quot;金刚自动化-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="-260346780">&quot;PYTHON&quot;</stringProp>
                  <stringProp name="32935209">&quot;2.7&quot;</stringProp>
                  <stringProp name="-873564987">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;]</stringProp>
                  <stringProp name="780521547">&quot;python-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="2046682735">选择的空间中，至少要有一个生产空间</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1021216625">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="771856429">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器1" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（应用名称appName重复时），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器(先创建一个应用)" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1928572192">serviceName</stringProp>
                  <stringProp name="110541305">token</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-232314580">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="-235711367">${scrumId_def}</stringProp>
                    <stringProp name="-2123537004">${lobId_def}</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  </collectionProp>
                  <collectionProp name="1256926353">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                    <stringProp name="747852388">外网二级域名</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="1439906893">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(正确入参)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器（重用项目名称）" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1928572192">serviceName</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                  <stringProp name="1870763699">maintainerId</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1719243017">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="-235711367">${scrumId_def}</stringProp>
                    <stringProp name="-2123537004">${lobId_def}</stringProp>
                    <stringProp name="-606546040">${appName}</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                    <stringProp name="-1019702319">应用名称已经被你重用了,请填写不同应用名称</stringProp>
                    <stringProp name="1411616725">${USER_id_admin}</stringProp>
                  </collectionProp>
                  <collectionProp name="1021216625">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                    <stringProp name="747852388">外网二级域名</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="771856429">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（language=错误不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期错误码)" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="-345224199">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="955494055">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-606546040">${appName}</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="-1121550398">&quot;JAVAdff&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="51508">400</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1021216625">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="771856429">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：异常多角度（token传入不存在的值），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1624145199">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="187832203">${__UUID}</stringProp>
                  <stringProp name="1294017882">您还没有登录，请重新登录</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1021216625">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="771856429">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器（预期失败信息）" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（languageVersion=空&quot;&quot;,null），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="1429545490">languageVersion_1</stringProp>
                <stringProp name="1429545491">languageVersion_2</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="2032401760">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="686661362">必须为你的应用选择他的开发语言版本</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1539338988">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-1579001126">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">languageVersion</stringProp>
              <stringProp name="ForeachController.returnVal">languageVersion</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（tag=空&quot;&quot;,null），验证接口返回失败" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="110120140">tag_1</stringProp>
                <stringProp name="110120141">tag_2</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="313186997">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="1088">&quot;&quot;</stringProp>
                  <stringProp name="3392903">null</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="1651235816">项目名称不能为空</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1862874628">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-784861600">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">tag</stringProp>
              <stringProp name="ForeachController.returnVal">tag</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">2</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（应用名称appName不合法检查：中文，英文，数字，下划线，中划线，2-30字符）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1928572192">serviceName</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="1339005182">appName_1</stringProp>
                <stringProp name="1339005183">appName_2</stringProp>
                <stringProp name="1339005184">appName_3</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-716374081">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="-1433717888">&quot;jingang-demo-jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="-1433717888">&quot;jingang-demo-jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="35715">&quot;a&quot;</stringProp>
                  <stringProp name="1064351120">&quot;a-&amp;*&quot;</stringProp>
                  <stringProp name="-1106942634">&quot;a1234567891234567890123456789001234567890123456789b&quot;</stringProp>
                  <stringProp name="-1294148189">应用名称只能包含字母、数字、下划线、中划线、中文。长度2-50个字符</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1222244921">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="872830482">运行环境（默认构建所有环境）</stringProp>
                  <stringProp name="747852388">外网二级域名</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="-967647852">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1086546254">&quot;jingang-yuming2&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">appName</stringProp>
              <stringProp name="ForeachController.returnVal">appName</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--检查预期失败信息" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：边界值检查（项目名称tag不合法检查：字母、数字、中划线，2-50个字符）" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="110120140">tag_1</stringProp>
                <stringProp name="110120141">tag_2</stringProp>
                <stringProp name="110120142">tag_3</stringProp>
                <stringProp name="110120143">tag_4</stringProp>
                <stringProp name="110120144">tag_5</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-872784595">message_err</stringProp>
                <stringProp name="1870763699">maintainerId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="704371516">
                  <stringProp name="1564628544">${USER_groupId}</stringProp>
                  <stringProp name="-235711367">${scrumId_def}</stringProp>
                  <stringProp name="-2123537004">${lobId_def}</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-1314152091">&quot;ab_cd&quot;</stringProp>
                  <stringProp name="36273">&quot;s&quot;</stringProp>
                  <stringProp name="297799850">&quot;a1234567890123456789012345678901234567890123456789b&quot;</stringProp>
                  <stringProp name="-2082136103">&quot;abc&amp;^a&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                  <stringProp name="817404650">项目名称只能包含字母、数字、中划线，且不能以中划线为开头和结尾。长度2-50个字符</stringProp>
                  <stringProp name="1411616725">${USER_id_admin}</stringProp>
                </collectionProp>
                <collectionProp name="1257352811">
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1131257392">运行环境</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1172177188">错误信息</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1217042141">
                  <stringProp name="0"></stringProp>
                  <stringProp name="-2077220034">50：测试专用</stringProp>
                  <stringProp name="-416134630">21：测试专用</stringProp>
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="-1076681748">${OUT_token}</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">tag</stringProp>
              <stringProp name="ForeachController.returnVal">tag</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">4</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--检查预期失败信息" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据清理：清理数据，删除大部分创建的应用--匹配正则：-${__time(MMdd,)}" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器--获取可删除的appid" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="114225">str</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-1118460702">
                    <stringProp name="617415625">-${__time(MMdd,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--通过查询应用列表接口，随机获取可删除数据" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="906416181">##DB【SQL查询数据】相关##</stringProp>
                  <stringProp name="450151435">数据准备[SQL]：【获取删除用户】数据库随机抽取已经删除的用户，输出{OUT_username_del}</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器--进行删除操作" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
                <stringProp name="ForeachController.inputVal">OUT_rnd_appId</stringProp>
                <stringProp name="ForeachController.returnVal">OUT_rnd_appId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">${OUT_rnd_appId_matchNr}</stringProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【用户参数赋值/转换等操作】" enabled="true">
                  <stringProp name="BeanShellSampler.query">log.info(&quot;------用户参数赋值/转换等操作-------&quot;);

vars.put(&quot;id&quot;,&quot;${OUT_rnd_appId}&quot;);
vars.put(&quot;groupId&quot;,&quot;${USER_groupId}&quot;);
vars.put(&quot;token&quot;,&quot;${OUT_token_admin}&quot;);

log.info(&quot;------END-------&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器-执行删除" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                    <stringProp name="995413762">##接口【删除应用】相关##</stringProp>
                    <stringProp name="108386895">[删除应用]-通用模块：正确入参，检查返回成功</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">1000</stringProp>
                </TestAction>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                    <stringProp name="RandomTimer.range">100</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：利用验证码接口获取响应头中的verification-code值，输出{OUT_verification-code}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names"/>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1"/>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/createRandomImage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">OUT_verification-code</stringProp>
                <stringProp name="RegexExtractor.regex">verification-code: (.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NULL</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据准备：利用登录接口获取登录的token信息（平台管理员），输出{OUT_token_admin}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-451146659">freeLogin</stringProp>
                <stringProp name="1216985755">password</stringProp>
                <stringProp name="115141968">randomCode</stringProp>
                <stringProp name="-265713450">username</stringProp>
                <stringProp name="642216616">verificationCode</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1191568218">
                  <stringProp name="97196323">false</stringProp>
                  <stringProp name="-724509857">${USER_pass_admin}</stringProp>
                  <stringProp name="1599742">4321</stringProp>
                  <stringProp name="-2095290459">${USER_name_admin}</stringProp>
                  <stringProp name="-1485427642">${OUT_verification-code}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">${__CSVRead(${__V(file_url)},0)}</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;freeLogin&quot;: ${freeLogin},&#xd;
    &quot;password&quot;: &quot;${password}&quot;,&#xd;
    &quot;randomCode&quot;: &quot;${randomCode}&quot;,&#xd;
    &quot;username&quot;: &quot;${username}&quot;,&#xd;
    &quot;verificationCode&quot;: &quot;${OUT_verification-code}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-265713450">username</stringProp>
                  <stringProp name="-860337847">realName</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">OUT_token_admin</stringProp>
                <stringProp name="RegexExtractor.regex">token: (.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NULL</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：【手工】基础检查(验证正确入参)，接口返回成功" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-1938093044">healthCheck</stringProp>
                <stringProp name="-1095727250">rollingUpdate</stringProp>
                <stringProp name="-851963114">loadBalance</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="-954129724">spaceList</stringProp>
                <stringProp name="908960928">packageType</stringProp>
                <stringProp name="632421529">volumes</stringProp>
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="621772716">
                  <stringProp name="891720472">&quot;金刚自动化应用-${__time(yyyyMMdd-HHmmss-SSS,)}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="1750023326">&quot;/healtch&quot;</stringProp>
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="700647659">&quot;ROUND_ROBIN&quot;</stringProp>
                  <stringProp name="50">2</stringProp>
                  <stringProp name="-653276964">&quot;jingang-projcet${__time(yyyyMMdd-HHmmss-SSS,)}&quot;</stringProp>
                  <stringProp name="-589639211">[&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                  <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                  <stringProp name="2914">[]</stringProp>
                  <stringProp name="204142684">${OUT_token_admin}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="post请求" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;appName&quot;: ${appName},&#xd;
	&quot;language&quot;: ${language},&#xd;
	&quot;languageVersion&quot;: ${languageVersion},&#xd;
	&quot;healthCheck&quot;: ${healthCheck},&#xd;
	&quot;rollingUpdate&quot;: ${rollingUpdate},&#xd;
	&quot;loadBalance&quot;: ${loadBalance},&#xd;
	&quot;groupId&quot;: ${groupId},&#xd;
	&quot;tag&quot;: ${tag},&#xd;
	&quot;spaceList&quot;: ${spaceList},&#xd;
	&quot;packageType&quot;: ${packageType},&#xd;
	&quot;volumes&quot;: ${volumes}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ip}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${http_type}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${path_prefix}/application/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">token</stringProp>
                    <stringProp name="Header.value">${token}</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">footprint用于做标记，用于保存未登录的访问足迹使用。目前用于登录接口和商品详情接口</stringProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="650342158">创建成功</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="检查：到数据库查询检查返回数据" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-1763888867">loginName1</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="849265853">
                    <stringProp name="901404032">${loginName}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="到数据库查询获取结果" enabled="true">
                <stringProp name="dataSource">mysql</stringProp>
                <stringProp name="query">select unix_timestamp(b.birthday)*1000,a.email,b.icourl,a.loginname,a.id,a.mobile,b.sex from m_member a left join m_member_extend b on a.id = b.member_id  

where a.loginname = &apos;${loginName1}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout">5</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">SQL_birthday,SQL_email,SQL_icourl,SQL_loginname,SQL_id,SQL_mobile,SQL_sex</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler（对结果进行比对）" enabled="true">
                <stringProp name="BeanShellSampler.query">
String[] str1 = {&quot;${JSON_birthday}&quot;,&quot;${JSON_email}&quot;,&quot;${JSON_iconUrl}&quot;,&quot;${JSON_loginName}&quot;,&quot;${JSON_memberId}&quot;,&quot;${JSON_mobile}&quot;,&quot;${JSON_sex}&quot;};
String[] str2 = {&quot;${SQL_birthday_1}&quot;,&quot;${SQL_email_1}&quot;,&quot;${SQL_icourl_1}&quot;,&quot;${SQL_loginname_1}&quot;,&quot;${SQL_id_1}&quot;,&quot;${SQL_mobile_1}&quot;,&quot;${SQL_sex_1}&quot;};


// 对生日进行处理 str2[0]
//String str = str2[0];
//Date d = new Date(str);
//Long l = d.getTime();
//str2[0] = l.toString();

for(int i = 0;i &lt; str1.length; i++){
	if(!str1[i].equals(str2[i])){
		//ResponseCode = 500;
		ResponseMessage = &quot;匹配不成功！str1:&quot; + str1[i] + &quot;  str2:&quot; + str2[i];
		IsSuccess = false;
		break;
	}

}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-数据清理：清理数据，删除大部分创建的应用--依次清除" enabled="false">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器--获取可删除的appid" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="114225">str</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-202417926">
                    <stringProp name="1450575459">123456</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--通过查询应用列表接口，随机获取可删除数据" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-1245268000">##接口【登录】相关##</stringProp>
                  <stringProp name="-114789956">[登录]-通用模块：正常值入参，检验接口返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
                <stringProp name="ForeachController.inputVal">OUT_rnd_appId</stringProp>
                <stringProp name="ForeachController.returnVal">OUT_rnd_appId</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">${OUT_rnd_appId_matchNr}</stringProp>
              </ForeachController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【用户参数赋值/转换等操作】" enabled="true">
                  <stringProp name="BeanShellSampler.query">log.info(&quot;------用户参数赋值/转换等操作-------&quot;);

vars.put(&quot;id&quot;,&quot;${OUT_rnd_appId}&quot;);
vars.put(&quot;groupId&quot;,&quot;${USER_groupId}&quot;);
vars.put(&quot;token&quot;,&quot;${OUT_token_admin}&quot;);

log.info(&quot;------END-------&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器-执行删除" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="869052411">测试计划</stringProp>
                    <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                    <stringProp name="995413762">##接口【删除应用】相关##</stringProp>
                    <stringProp name="108386895">[删除应用]-通用模块：正确入参，检查返回成功</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：正值多角度检查(创建各个环境的应用，不包含ff生产)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-794136500">appName</stringProp>
                <stringProp name="-1613589672">language</stringProp>
                <stringProp name="-901304736">languageVersion</stringProp>
                <stringProp name="-1938093044">healthCheck</stringProp>
                <stringProp name="-1095727250">rollingUpdate</stringProp>
                <stringProp name="-851963114">loadBalance</stringProp>
                <stringProp name="293428218">groupId</stringProp>
                <stringProp name="114586">tag</stringProp>
                <stringProp name="908960928">packageType</stringProp>
                <stringProp name="632421529">volumes</stringProp>
                <stringProp name="1926868213">scrumId</stringProp>
                <stringProp name="103143610">lobId</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-2090627722">spaceList_1</stringProp>
                <stringProp name="-2090627721">spaceList_2</stringProp>
                <stringProp name="-2090627720">spaceList_3</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2078165933">
                  <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                  <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                  <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                  <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                  <stringProp name="3569038">true</stringProp>
                  <stringProp name="700647659">&quot;ROUND_ROBIN&quot;</stringProp>
                  <stringProp name="551305533">${USER_groupId_jingang}</stringProp>
                  <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                  <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                  <stringProp name="2914">[]</stringProp>
                  <stringProp name="1569">12</stringProp>
                  <stringProp name="1570">13</stringProp>
                  <stringProp name="-610980561">${OUT_token_ff}</stringProp>
                  <stringProp name="1428464672">[&quot;performance&quot;,&quot;production-ff&quot;]</stringProp>
                  <stringProp name="-681415248">[&quot;test&quot;,&quot;production-ff&quot;]</stringProp>
                  <stringProp name="100131726">[&quot;beta&quot;,&quot;production-ff&quot;]</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="1475782202">
                  <stringProp name="750820247">应用名称</stringProp>
                  <stringProp name="746283076">开发语言</stringProp>
                  <stringProp name="1102026967">语言版本</stringProp>
                  <stringProp name="637287831">健康检查</stringProp>
                  <stringProp name="866437070">滚动升级</stringProp>
                  <stringProp name="1112287416">负载均衡</stringProp>
                  <stringProp name="699546968">团队id</stringProp>
                  <stringProp name="1192788952">项目名称</stringProp>
                  <stringProp name="813837542">构建类型</stringProp>
                  <stringProp name="390593085">【废弃】</stringProp>
                  <stringProp name="2010297145">所属ScrumTeam</stringProp>
                  <stringProp name="-1836890047">所属LOB</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="1131257392">运行环境</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach控制器" enabled="true">
              <stringProp name="ForeachController.inputVal">spaceList</stringProp>
              <stringProp name="ForeachController.returnVal">spaceList</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="ForeachController.startIndex">0</stringProp>
              <stringProp name="ForeachController.endIndex">3</stringProp>
            </ForeachController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（healthCheck=空null，&quot;&quot;），验证接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器1" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="908960928">packageType</stringProp>
                  <stringProp name="-1401172455">buildName</stringProp>
                  <stringProp name="-2132399770">healthCheckType</stringProp>
                  <stringProp name="-1938093044">healthCheck</stringProp>
                  <stringProp name="621602016">initialDelaySeconds</stringProp>
                  <stringProp name="-1095727250">rollingUpdate</stringProp>
                  <stringProp name="-851963114">loadBalance</stringProp>
                  <stringProp name="1809038629">script4RollingUpdate</stringProp>
                  <stringProp name="1063326916">maxAge4Script</stringProp>
                  <stringProp name="632421529">volumes</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="270829870">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="-235711367">${scrumId_def}</stringProp>
                    <stringProp name="-2123537004">${lobId_def}</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="34196">&quot;0&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="48687">120</stringProp>
                    <stringProp name="3569038">true</stringProp>
                    <stringProp name="700647659">&quot;ROUND_ROBIN&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="1629">30</stringProp>
                    <stringProp name="2914">[]</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                    <stringProp name="1790566908">HealthCheck不能为空</stringProp>
                  </collectionProp>
                  <collectionProp name="1049674295">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="1131257392">运行环境</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="813837542">构建类型</stringProp>
                    <stringProp name="-872328806">war使用的编译包名称</stringProp>
                    <stringProp name="-1745707449">健康检查类型</stringProp>
                    <stringProp name="637287831">健康检查</stringProp>
                    <stringProp name="1496928830">健康检查延迟时间</stringProp>
                    <stringProp name="866437070">滚动升级</stringProp>
                    <stringProp name="1112287416">负载均衡</stringProp>
                    <stringProp name="39486938">shell健康检查相关项1</stringProp>
                    <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                    <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="-35699488">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                    <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="1633675141">true,false</stringProp>
                    <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                    <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                    <stringProp name="27081643">默认：30</stringProp>
                    <stringProp name="27082928">默认：[]</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器2" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="908960928">packageType</stringProp>
                  <stringProp name="-1401172455">buildName</stringProp>
                  <stringProp name="-2132399770">healthCheckType</stringProp>
                  <stringProp name="-1938093044">healthCheck</stringProp>
                  <stringProp name="621602016">initialDelaySeconds</stringProp>
                  <stringProp name="-1095727250">rollingUpdate</stringProp>
                  <stringProp name="-851963114">loadBalance</stringProp>
                  <stringProp name="1809038629">script4RollingUpdate</stringProp>
                  <stringProp name="1063326916">maxAge4Script</stringProp>
                  <stringProp name="632421529">volumes</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="996044937">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="-235711367">${scrumId_def}</stringProp>
                    <stringProp name="-2123537004">${lobId_def}</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="34196">&quot;0&quot;</stringProp>
                    <stringProp name="3392903">null</stringProp>
                    <stringProp name="48687">120</stringProp>
                    <stringProp name="3569038">true</stringProp>
                    <stringProp name="700647659">&quot;ROUND_ROBIN&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="1629">30</stringProp>
                    <stringProp name="2914">[]</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                    <stringProp name="1790566908">HealthCheck不能为空</stringProp>
                  </collectionProp>
                  <collectionProp name="1049674295">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="1131257392">运行环境</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="813837542">构建类型</stringProp>
                    <stringProp name="-872328806">war使用的编译包名称</stringProp>
                    <stringProp name="-1745707449">健康检查类型</stringProp>
                    <stringProp name="637287831">健康检查</stringProp>
                    <stringProp name="1496928830">健康检查延迟时间</stringProp>
                    <stringProp name="866437070">滚动升级</stringProp>
                    <stringProp name="1112287416">负载均衡</stringProp>
                    <stringProp name="39486938">shell健康检查相关项1</stringProp>
                    <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                    <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="-35699488">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                    <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="1633675141">true,false</stringProp>
                    <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                    <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                    <stringProp name="27081643">默认：30</stringProp>
                    <stringProp name="27082928">默认：[]</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：必输检查（rollingUpdate=null），验证接口返回失败" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="事务控制器1" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="293428218">groupId</stringProp>
                  <stringProp name="1926868213">scrumId</stringProp>
                  <stringProp name="103143610">lobId</stringProp>
                  <stringProp name="-794136500">appName</stringProp>
                  <stringProp name="114586">tag</stringProp>
                  <stringProp name="-954129724">spaceList</stringProp>
                  <stringProp name="-1613589672">language</stringProp>
                  <stringProp name="-901304736">languageVersion</stringProp>
                  <stringProp name="908960928">packageType</stringProp>
                  <stringProp name="-1401172455">buildName</stringProp>
                  <stringProp name="-2132399770">healthCheckType</stringProp>
                  <stringProp name="-1938093044">healthCheck</stringProp>
                  <stringProp name="621602016">initialDelaySeconds</stringProp>
                  <stringProp name="-1095727250">rollingUpdate</stringProp>
                  <stringProp name="-851963114">loadBalance</stringProp>
                  <stringProp name="1809038629">script4RollingUpdate</stringProp>
                  <stringProp name="1063326916">maxAge4Script</stringProp>
                  <stringProp name="632421529">volumes</stringProp>
                  <stringProp name="110541305">token</stringProp>
                  <stringProp name="-872784595">message_err</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="678503601">
                    <stringProp name="1564628544">${USER_groupId}</stringProp>
                    <stringProp name="1691">50</stringProp>
                    <stringProp name="1599">21</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="-2066668542">[&quot;fpdev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="34196">&quot;0&quot;</stringProp>
                    <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                    <stringProp name="48687">120</stringProp>
                    <stringProp name="3392903">null</stringProp>
                    <stringProp name="700647659">&quot;ROUND_ROBIN&quot;</stringProp>
                    <stringProp name="1088">&quot;&quot;</stringProp>
                    <stringProp name="1629">30</stringProp>
                    <stringProp name="2914">[]</stringProp>
                    <stringProp name="204142684">${OUT_token_admin}</stringProp>
                    <stringProp name="-155471294">必须为你的应用选择是否需要滚动升级</stringProp>
                  </collectionProp>
                  <collectionProp name="1049674295">
                    <stringProp name="699546968">团队id</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="750820247">应用名称</stringProp>
                    <stringProp name="1192788952">项目名称</stringProp>
                    <stringProp name="1131257392">运行环境</stringProp>
                    <stringProp name="746283076">开发语言</stringProp>
                    <stringProp name="1102026967">语言版本</stringProp>
                    <stringProp name="813837542">构建类型</stringProp>
                    <stringProp name="-872328806">war使用的编译包名称</stringProp>
                    <stringProp name="-1745707449">健康检查类型</stringProp>
                    <stringProp name="637287831">健康检查</stringProp>
                    <stringProp name="1496928830">健康检查延迟时间</stringProp>
                    <stringProp name="866437070">滚动升级</stringProp>
                    <stringProp name="1112287416">负载均衡</stringProp>
                    <stringProp name="39486938">shell健康检查相关项1</stringProp>
                    <stringProp name="1925652191">shell监控检查相关项2</stringProp>
                    <stringProp name="-1771671454">挂载卷【未启用】</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <collectionProp name="-35699488">
                    <stringProp name="0"></stringProp>
                    <stringProp name="-2077220034">50：测试专用</stringProp>
                    <stringProp name="-416134630">21：测试专用</stringProp>
                    <stringProp name="1233493648">&quot;金刚自动化jar-${__time(MMdd-HHmm-SSS,tt)}&quot;</stringProp>
                    <stringProp name="-429737301">&quot;jingang-demo-jar-${tt}&quot;</stringProp>
                    <stringProp name="-918994203">[&quot;fpdev&quot;,&quot;dev&quot;,&quot;test&quot;,&quot;performance&quot;,&quot;beta&quot;,&quot;production&quot;]</stringProp>
                    <stringProp name="1043752798">&quot;JAVA&quot;</stringProp>
                    <stringProp name="32905449">&quot;1.8&quot;</stringProp>
                    <stringProp name="33669289">&quot;JAR&quot;</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="-644698766">0：http方式；1：shell方式；2：tcp端口方式</stringProp>
                    <stringProp name="963041309">&quot;/hello&quot;</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="1633675141">true,false</stringProp>
                    <stringProp name="-80987680">目前仅可取值：&quot;ROUND_ROBIN&quot;</stringProp>
                    <stringProp name="27081102">默认：&quot;&quot;</stringProp>
                    <stringProp name="27081643">默认：30</stringProp>
                    <stringProp name="27082928">默认：[]</stringProp>
                    <stringProp name="-1076681748">${OUT_token}</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
                <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
              </UserParameters>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器(出现预期失败信息)" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="764597751">Test Plan</stringProp>
                  <stringProp name="869052411">测试计划</stringProp>
                  <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                  <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                  <stringProp name="-18557600">[创建应用]-通用模块：错误入参，检查返回失败，检查出现预期失败信息</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：用例演示接口01" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查1(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031557803">
                  <stringProp name="318207029">jingangtest01</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="false">
              <stringProp name="BeanShellSampler.query">ResponseCode=200;
IsSuccess=true;
log.info(&quot;###### name=${name}&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查2(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031556988">
                  <stringProp name="318207030">jingangtest02</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查3(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031556950">
                  <stringProp name="318207031">jingangtest03</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误的name输入值，预期返回404" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1310669937">
                  <stringProp name="100709">err</stringProp>
                  <stringProp name="51513">405</stringProp>
                </collectionProp>
                <collectionProp name="1381637417">
                  <stringProp name="690410">名字</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--错误入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="2086089701">[用例演示接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：用例演示接口02" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查1(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031557803">
                  <stringProp name="318207029">jingangtest01</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="false">
              <stringProp name="BeanShellSampler.query">ResponseCode=200;
IsSuccess=true;
log.info(&quot;###### name=${name}&quot;);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查2(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031556988">
                  <stringProp name="318207030">jingangtest02</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查3(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031556950">
                  <stringProp name="318207031">jingangtest03</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="-366772386">[用例演示接口]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-反例${No}：错误的name输入值，预期返回404" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
                <stringProp name="-867653613">code_err</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1310669937">
                  <stringProp name="100709">err</stringProp>
                  <stringProp name="51513">405</stringProp>
                </collectionProp>
                <collectionProp name="1381637417">
                  <stringProp name="690410">名字</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <collectionProp name="802529">
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--正确入参" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-232905049">##接口【创建应用】相关##</stringProp>
                <stringProp name="1371854538">[创建应用]-通用模块：正确入参，检查返回成功</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="模块控制器--错误入参" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="869052411">测试计划</stringProp>
                <stringProp name="-690924546">Test Fragment【当前&lt;脚本&gt;通用模块库】</stringProp>
                <stringProp name="-1347299501">##接口【用例演示接口】相关##</stringProp>
                <stringProp name="2086089701">[用例演示接口]-通用模块：错误入参，检查返回失败，检查出现预期失败的错误码</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="接口：断言结果演示专用" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${xunhuan}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${xiancheng}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${xiancheng_time}</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${chixu_time}</stringProp>
        <stringProp name="ThreadGroup.delay">${yanchi_time}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="------------------------Sampler(获取线程组的名称)" enabled="true">
          <stringProp name="BeanShellSampler.query">
group =  ctx.getThreadGroup(); // 获取当前线程组
str = group.getName(); // 获取线程组的名称
//str = str.substring(0,4); // 截取字符串
vars.put(&quot;xc&quot;,str)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果（If）控制器【控制是否启用集合点】" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${flag}&quot;==&quot;1&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="集合点" enabled="true">
            <stringProp name="groupSize">${xiancheng}</stringProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="【必备】使集合点有效（显示线程序号）" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;线程数量：&gt;${__threadNum}&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【A】可自动化执行的用例" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[${xc}]-正例${No}：基础检查1(正确入参，检查接口是否成功)" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="用户参数" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-2031557803">
                  <stringProp name="318207029">jingangtest01</stringProp>
                </collectionProp>
                <collectionProp name="-925263184">
                  <stringProp name="690410">名字</stringProp>
                </collectionProp>
                <collectionProp name="25080">
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
              <stringProp name="TestPlan.comments">spaceList的可能值：fpdev、test、beta、production、performance、production-ff</stringProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP请求" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.baidu.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="299332315">www.baidu.com-111</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="附加：自增用例编号（No+1）" enabled="true">
              <stringProp name="BeanShellSampler.query">str = vars.get(&quot;No&quot;);
str1 = Integer.parseInt(str) + 1;
vars.put(&quot;No&quot;,str1.toString());


    </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【B】手工执行的用例（需要手工检查、手工修改测试数据等）" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【C】正在维护的用例" enabled="false"/>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="【D】备用参考、回收等" enabled="false"/>
        <hashTree/>
      </hashTree>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
